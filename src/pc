aedit.c:  pArea = (AREA_DATA *) ch->desc->pEdit;
aedit.c:      ch->desc->pEdit = NULL;
aedit.c:      ch->desc->connected = CON_PLAYING;
aedit.c:      ch->desc->pEdit = (void *) pArea;
aedit.c:  s = (SOCIAL *) ch->desc->pEdit;
aedit.c:      ch->desc->pEdit = NULL;
aedit.c:      ch->desc->connected = CON_PLAYING;
aedit.c:      ch->desc->pEdit = s;
alien.c:if (ch->in_room->vnum != AUGMENT_ROOM)
alien.c:    if (!IS_SET(ch->pcdata->augments, oldnum))
alien.c:    if (IS_SET(race_info[ch->pcdata->race].nat_augments, oldnum))
alien.c:    if (IS_SET(align_info[ch->pcdata->alignment].nat_augments, oldnum))
alien.c:    if (ch->pcdata->bank < 5000)
alien.c:    ch->pcdata->bank -= 5000;
alien.c:    REMOVE_BIT(ch->pcdata->augments, oldnum);
alien.c:    SET_BIT(ch->pcdata->augments, newnum);
alien.c:if (ch->pcdata->remort_times < pow.augment_cost[num][0])
alien.c:    sprintf(buf, "You need %d remorts to get this augment and you only have %d.\n\r", pow.augment_cost[num][0], ch->pcdata->remort_times);
alien.c:if (ch->pcdata->warpoints < pow.augment_cost[num][3])
alien.c:    sprintf(buf, "You need %d warpoints to get this augment and you only have %ld.\n\r", pow.augment_cost[num][3], ch->pcdata->warpoints);
alien.c:if (ch->pcdata->killpoints < pow.augment_cost[num][4])
alien.c:    sprintf(buf, "You need %d killpoints to get this augment and you only have %d.\n\r", pow.augment_cost[num][4], ch->pcdata->killpoints);
alien.c:ch->pcdata->warpoints -= pow.augment_cost[num][3];
alien.c:ch->pcdata->killpoints -= pow.augment_cost[num][4];
alien.c:ch->pcdata->augments ^= augment_flagss[num_wanted].flagname;
alien.c:  augment = ch->pcdata->augments;
alien.c:    affect = ch->affected_by;
alien.c:    affect = ch->more_affected_by;
alien.c:    int augment = ch->pcdata->augments;
alien.c:	    !IS_SET(race_info[ch->pcdata->race].nat_augments,augment_flagss[i].flagname) &&
alien.c:	    !IS_SET(align_info[ch->pcdata->alignment].nat_augments,augment_flagss[i].flagname))
alien.c:	  sprintf(buf, "-->You are level %d, with %d remorts, %ld warpoints, and %d killpoints.\n\r", LEVEL(ch), ch->pcdata->remort_times, ch->pcdata->warpoints, ch->pcdata->killpoints);
alien.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
alien.c:  if (pow.max_remorts == 1 && ch->pcdata->remort_times > 0)
alien.c:  if (ch->pcdata->remort_times >= pow.max_remorts)
alien.c:      (!ch->in_room || ch->in_room->vnum != pow.transform_in_room) &&
alien.c:      ch->pcdata->race < 11) ||
alien.c:      (!ch->in_room || ch->in_room->vnum != pow.asctransform_in_room) &&
alien.c:      ch->pcdata->race > 10))
alien.c:		if (ch->pcdata->remort_times > 1)
alien.c:			if(ch->pcdata->stat[k] > race_info[ch->pcdata->race].limits[k])
alien.c:			   i += ch->pcdata->stat[k] - race_info[ch->pcdata->race].limits[k];  
alien.c:	                   ch->pcdata->stat[k] = race_info[ch->pcdata->race].limits[k];
alien.c:			   l = race_info[ch->pcdata->race].limits[k] - ch->pcdata->stat[k];
alien.c:			     ch->pcdata->stat[k] += l;
alien.c:			     ch->pcdata->stat[k] += i;
alien.c:	  if (ch->pcdata->stat[i] + tmp_stat[i] > 36)
alien.c:	    ch->pcdata->stat[guild_data[i].stat_modified]--;
alien.c:	  if ((ch->pcdata->stat[i] + tmp_stat[i]) > 
alien.c:	      (race_info[ch->pcdata->race].limits[i]+
alien.c:         align_info[ch->pcdata->alignment].limits[i]))
alien.c:	            ch->pcdata->stat[guild_data[i].stat_modified]++;
alien.c:	    ch->pcdata->stat[guild_data[i].stat_modified]++;
alien.c:	ch->pcdata->stat[i] += tmp_stat[i];
alien.c:  for (obj = ch->carrying; obj != NULL; obj = next_obj)
alien.c:    SET_BIT (ch->pcdata->augments, augment_flagss[augmented].flagname);
alien.c:  ch->pcdata->level = 1;
alien.c:  ch->exp = 1;
alien.c:  free_string(ch->fgt->phunting);
alien.c:  ch->fgt->phunting = NULL;
alien.c:  free_string(ch->fgt->hunting);
alien.c:  ch->fgt->hunting = NULL;
alien.c:  ch->pcdata->voting_on = 0;
alien.c:  ch->pcdata->deaths =0;
alien.c:  REMOVE_BIT(ch->act, PLR_PKED_THIS_MORT);
alien.c:  ch->pcdata->practice = 10;
alien.c:  ch->pcdata->learn = 2;
alien.c:  ch->pcdata->remort_times++; 
alien.c:      ch->pcdata->learned[k] = -100;
alien.c:      sprintf (workstr, "This is remort number \x1B[1;37m%d\x1B[37;0m for your character!\n\r", ch->pcdata->remort_times);
alien.c:      if (ch->pcdata->remort_times == 2)
alien.c:      if (ch->pcdata->remort_times == 5)
alien.c:  max_remort_times[ch->pcdata->alignment] = 
alien.c:   UMAX(max_remort_times[ch->pcdata->alignment], ch->pcdata->remort_times);
alien.c:  for (obj = ch->carrying; obj != NULL; obj = nxt)
alien.c:  if (ch->position != POSITION_STANDING)
alien.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_warcry] < 50)
alien.c:  if (IS_PLAYER(ch) && (number_percent() > ch->pcdata->learned[gsn_warcry]))
alien.c:  if (ch->move < s->mana)
ansi_out.c:  if (txt != NULL && ch->desc != NULL)
ansi_out.c:      if (!IS_SET (ch->pcdata->act2, PLR_ANSI) && !IS_SET (ch->pcdata->act2, PLR_VT100))
ansi_out.c:      else if (IS_SET (ch->pcdata->act2, PLR_VT100) && !IS_SET (ch->pcdata->act2, PLR_ANSI))
ansi_out.c:      write_to_buffer (ch->desc, txt, strlen (txt));
ansi_out.c:  if(!ch || !ch->in_room || (!ch->desc && (type == TO_CHAR || type ==
ansi_out.c:  check_room_more(ch->in_room);
ansi_out.c:  to = ch->in_room->more->people;
ar.c:  if (IS_SET (ch->affected_by, AFF_FLYING))
ar.c:/*if (victim->level>ch->level) 
ar.c:  ch->fgt->riding = victim;
ar.c:  check_fgt (ch->fgt->riding);
ar.c:  ch->fgt->riding->fgt->mounted_by = NULL;
ar.c:  ch->fgt->riding = NULL;
ar.c:  check_fgt (ch->fgt->mounted_by);
ar.c:  ch->fgt->mounted_by->fgt->riding = NULL;
ar.c:  NEW_POSITION(ch->fgt->mounted_by, POSITION_RESTING);
ar.c:  ch->fgt->mounted_by = NULL;
ar.c:    if (ch->pcdata->voting_on == 998 || PHUNTING(ch) != NULL)
ar.c:    if (ch->position == POSITION_FIGHTING)
ar.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3 && !is_member (ch, GUILD_RANGER))
ar.c:	  ch->pcdata->voting_on = 0;
ar.c:	  ch->pcdata->voting_on = 0;
ar.c:		  free_string (ch->fgt->hunting);
ar.c:		  ch->fgt->hunting = NULL;
ar.c:		  ch->pcdata->voting_on = 0;
ar.c:		  ch->pcdata->voting_on = 0;
ar.c:		ch->fgt->hunting = str_dup (arg);
ar.c:	      ch->pcdata->tickcounts = 9;
ar.c:              if (ch->position == POSITION_CASTING) {
ar.c:	      ch->pcdata->voting_on = 999;
ar.c:	      ch->pcdata->voting_on = 0;
ar.c:	      free_string (ch->fgt->hunting);
ar.c:	      ch->fgt->hunting = NULL;
ar.c:	      ch->pcdata->voting_on = 0;
ar.c:	      ch->pcdata->voting_on = 0;
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:   ch->pcdata->voting_on=0;
ar.c:	ch->fgt->hunting = str_dup (arg);
ar.c:      ch->pcdata->tickcounts = 9;
ar.c:              if (ch->position == POSITION_CASTING) {
ar.c:      ch->pcdata->voting_on = 999;
ar.c:  if (ch->position == POSITION_FIGHTING)
ar.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3 && !is_member (ch, GUILD_RANGER))
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:	      free_string (ch->fgt->hunting);
ar.c:	      ch->fgt->hunting = NULL;
ar.c:	     free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:      (ch->pcdata->learned[gsn_track] < number_range (0, 50) && !is_member (ch, GUILD_RANGER)))
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:   ch->pcdata->voting_on=0;
ar.c:  for (tr = ch->in_room->tracks; tr != NULL; tr = tr->next_track_in_room)
ar.c:      (IS_MOB (tr->ch) && is_name (HUNTING (ch), tr->ch->pIndexData->name)))
ar.c:	  if (tr->dir_left == 10 || tr->ch->in_room == ch->in_room)
ar.c:		  free_string (ch->fgt->hunting);
ar.c:		  ch->fgt->hunting = NULL;
ar.c:		  ch->pcdata->voting_on = 0;
ar.c:		ch->fgt->hunting = str_dup (arg);
ar.c:   dir = find_first_step( ch->in_room, vict->in_room );
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:   ch->pcdata->voting_on=0;
ar.c:   ch->pcdata->voting_on=0;
ar.c:   free_string(ch->fgt->hunting); ch->fgt->hunting=NULL;
ar.c:   (ch->pcdata->learned[gsn_track]<number_range(0,90) && !is_member(ch,GUILD_RANGER)))
ar.c:   ch->fgt->hunting=str_dup( arg );
ar.c:  if (ch->in_room && ch->in_room->ptracks != NULL)
ar.c:    for (ptrk = ch->in_room->ptracks; (ptrk != NULL && !found); ptrk = ptrk->next_track_in_room)
ar.c:      dir = find_first_step (ch->in_room, vict->in_room);
ar.c:      dir = find_first_step (ch->in_room, get_room_index (atoi (HUNTING (ch))));
ar.c:      if (!ch->in_room->exit[dir] || (ROOM_DATA *) ! ch->in_room->exit[dir]->to_room)
ar.c:      if (!is_number (HUNTING (ch)) && ch->in_room->exit[dir] && (ROOM_DATA *) ch->in_room->exit[dir]->to_room &&
ar.c:	  ch->in_room->area != ((ROOM_DATA *) ch->in_room->exit[dir]->to_room)->area)
ar.c:      if (ch->in_room && ch->in_room->exit[dir] && ch->in_room->exit[dir]->d_info &&
ar.c:	  IS_SET (ch->in_room->exit[dir]->d_info->exit_info, EX_CLOSED) &&
ar.c:	  IS_SET (ch->in_room->exit[dir]->d_info->exit_info, EX_ISDOOR) &&
ar.c:	  !IS_SET (ch->in_room->exit[dir]->d_info->exit_info, EX_LOCKED) &&
ar.c:	  !IS_SET (ch->in_room->exit[dir]->d_info->exit_info, EX_HIDDEN))
ar.c:	  do_open (ch, ch->in_room->exit[dir]->d_info->keyword);
ar.c:      if (is_number (HUNTING (ch)) && ch->in_room->vnum == atoi (HUNTING (ch)))
ar.c:	      free_string (ch->fgt->hunting);
ar.c:	      ch->fgt->hunting = NULL;
ar.c:      if (!is_number (HUNTING (ch)) && ch->in_room == vict->in_room)
ar.c:	      if (ch->fgt && ch->fgt->hunting)
ar.c:		  free_string (ch->fgt->hunting);
ar.c:		  ch->fgt->hunting = NULL;
ar.c:	  if (IS_MOB (ch) && IS_MOB (vict) && !IS_SET (ch->pcdata->act3, ACT3_MUTE) &&
arena.c:  if (ch->pcdata->bgf)
arena.c:      ch->pcdata->bgf = FALSE;
arena.c:  ch->pcdata->bgf = TRUE;
arena.c:      for (fch = char_list; fch != NULL; fch = fch->next)
arena.c:	  if(fch->fgt->challenge == 10)
arena.c:      ch->pcdata->arena_msg = TRUE;
arena.c:      ch->pcdata->arena_msg = FALSE;
arena.c:      position = ch->position;
arena.c:      ch->position = POSITION_STANDING;
arena.c:      ch->position = position;
arena.c:      ch->pcdata->bank += biddata.bids[kkkk];
arena.c:  if (bet < 1 || bet > ch->pcdata->bank)
arena.c:      ch->pcdata->bank += biddata.bids[kkkk];
arena.c:  ch->pcdata->bank -= bet;
arena.c:  if (!ch->pcdata->challenged_by)
arena.c:  strcpy (tempstr, ch->pcdata->challenged_by);
arena.c:      sprintf (buf, "\x1B[1;37mYou have been challenged by \x1B[32m%s\x1B[37m.\x1B[37;0m Type ACCEPT YES to accept the challenge.\n\r", ch->pcdata->challenged_by);
arena.c:  if (ch->hit < ch->max_hit)
arena.c:      if (ch->pcdata->challenged_by)
arena.c:	free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  if (ch->in_room && ch->in_room->vnum < 1000)
arena.c:  if (ch->pcdata->challenged_by)
arena.c:      free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  if (!ch->pcdata->challenged_by)
arena.c:  strcpy (tempstr, ch->pcdata->challenged_by);
arena.c:      sprintf (buf, "\x1B[1;37mYou have been challenged by \x1B[32m%s\x1B[37m.\x1B[37;0m Type DECLINE YES to decline the challenge.\n\r", ch->pcdata->challenged_by);
arena.c:      if (ch->pcdata->challenged_by)
arena.c:	free_string (ch->pcdata->challenged_by);
arena.c:      ch->pcdata->challenged_by = NULL;
arena.c:  if (ch->pcdata->challenged_by)
arena.c:    free_string (ch->pcdata->challenged_by);
arena.c:  ch->pcdata->challenged_by = NULL;
arena.c:      /* if (ch->pcdata->challenge_on) 
arena.c:         ch->pcdata->challenge_on=FALSE; 
arena.c:         ch->pcdata->challenge_on=TRUE;
arena.c:      ch->pcdata->challenge_on = TRUE;
arena.c:      ch->pcdata->challenge_on = FALSE;
arena.c:  if (ch->hit != ch->max_hit)
arena.c:  if (ch->pcdata->challenge_on == FALSE)
arena.c:  if (ch->in_room && ch->in_room->vnum < 1000)
arena.c:      ch->pcdata->challenge_time = 0;
arena.c:  if (ch->pcdata->challenge_time > 0)
arena.c:  if (ch->pcdata->no_quit_pk > 0)
arena.c:  ch->pcdata->challenge_time = 5;
armor.c:      tprotect = ch->armor / ARC;
armor.c:  for (o = ch->carrying; o != NULL; o = o->next_content)
armor.c:    tprotect = ch->armor / ARC;
armor.c:  for (o = ch->carrying; o != NULL; o = o->next_content)
armor.c:    tprotect = ch->armor / ARC;
armor.c:  for (o = ch->carrying; o != NULL; o = o->next_content)
armor.c:    tprotect = ch->armor / ARC;
armor.c:  for (o = ch->carrying; o != NULL; o = o->next_content)
armor.c:    tprotect =ch->armor / ARC;
armor.c:  for (o = ch->carrying; o != NULL; o = o->next_content)
armor.c:  i = ch->armor/ARC;
armor.c:  i += ch->pcdata->armor[hit_loc -1];
auction.c:  if (ch->in_room->vnum < 1000)
auction.c:  if (IS_SET(ch->act, PLR_NOAUCTION))
auction.c:  REMOVE_BIT(ch->pcdata->deaf, CHANNEL_AUCTION);
auction.c:	  if (bid < auct->minbid || bid < auct->bid + 100 || ch->pcdata->bank < bid + prevbids)
auction.c:  if (IS_SET (ch->pcdata->deaf, CHANNEL_AUCTION))
auction.c:  if (pow.auction_lag && ch->pcdata->no_quit_pk > 0) 
auction.c:  if (IS_SET(ch->act, PLR_NOAUCTION))
auction.c:  if (ch->in_room->vnum < 1000)
auction.c:              ch->pcdata->auction_count += 50;
auction.c:              if (ch->pcdata->auction_count > 400)
auction.c:                  SET_BIT(ch->act, PLR_NOAUCTION);
auction.c:  if (ch->pcdata->bank < tobj->cost/7)
auction.c:  ch->pcdata->bank -= tobj->cost/7;
auction.c:  ch->pcdata->listen_auction = TRUE;
auction.c:  ch->pcdata->auction_count += 50;
auction.c:  if (ch->pcdata->auction_count > 400)
auction.c:      SET_BIT(ch->act, PLR_NOAUCTION);
autoeq.c:  if (!ch->in_room) return;
autoeq.c:  if (ch->in_room->vnum != 90000)
autoeq.c:  pArea = ch->in_room->area;
aw.c:  if (ch->pcdata->learned[spell->gsn] == -100)
aw.c:      if (ch->pcdata->learned[i] < 0)
aw.c:  ch->pcdata->learned[spell->gsn] = -100;
aw.c:      ch->pcdata->learned[i] = -100;
aw.c:  ch->pcdata->practice = (1 + (((LEVEL (ch) - 1) *
aw.c:    ch->pcdata->learn = (LEVEL (ch) * 2);
aw.c:    ch->pcdata->learn = 6 + (LEVEL (ch) - 3);
aw.c:      if (IS_SET (ch->act, WIZ_NOTIFY))
aw.c:          REMOVE_BIT (ch->act, WIZ_NOTIFY);
aw.c:          SET_BIT (ch->act, WIZ_NOTIFY);
aw.c:      if (IS_SET (ch->act, WIZ_NOTIFY_DEATH))
aw.c:          REMOVE_BIT (ch->act, WIZ_NOTIFY_DEATH);
aw.c:          SET_BIT (ch->act, WIZ_NOTIFY_DEATH);
aw.c:      if (IS_SET (ch->act, WIZ_NOTIFY_BUG))
aw.c:          REMOVE_BIT (ch->act, WIZ_NOTIFY_BUG);
aw.c:          SET_BIT (ch->act, WIZ_NOTIFY_BUG);
aw.c:      if (IS_SET (ch->act, WIZ_NOTIFY_LOG))
aw.c:          REMOVE_BIT (ch->act, WIZ_NOTIFY_LOG);
aw.c:          SET_BIT (ch->act, WIZ_NOTIFY_LOG);
aw.c:          if (IS_SET (ch->act, WIZ_NOTIFY_BUG))
aw.c:      if (IS_SET (ch->act, WIZ_NOTIFY_LOGIN))
aw.c:          REMOVE_BIT (ch->act, WIZ_NOTIFY_LOGIN);
aw.c:          SET_BIT (ch->act, WIZ_NOTIFY_LOGIN);
aw.c:               IS_SET (ch->act, WIZ_NOTIFY_LOGIN) ? "ON" : "OFF");
aw.c:               IS_SET (ch->act, WIZ_NOTIFY_BUG) ? "ON" : "OFF");
aw.c:               IS_SET (ch->act, WIZ_NOTIFY_LOG) ? "ON" : "OFF");
aw.c:               IS_SET (ch->act, WIZ_NOTIFY_DEATH) ? "ON" : "OFF");
aw.c:               IS_SET (ch->act, WIZ_NOTIFY) ? "active" : "inactive");
aw.c:      free_string (ch->pcdata->beamin);
aw.c:      ch->pcdata->beamin = str_dup (argy);
aw.c:      free_string (ch->pcdata->beamout);
aw.c:      ch->pcdata->beamout = str_dup (argy);
aw.c:          && d->character->in_room == ch->in_room)
aw.c:              && d->character->in_room == ch->in_room)
aw.c:      location = ch->in_room;
aw.c:  original = ch->in_room;
aw.c:  original = ch->in_room;
aw.c:  gotoxy (ch, 1, ch->pcdata->pagelen);
aw.c:  if (ch != NULL && ch->in_room != NULL) sectr = ch->in_room->sector_type;
aw.c:  location = (arg[0] == '\0') ? ch->in_room : find_location (ch, arg);
aw.c:      location = ch->in_room;
aw.c:                   (IS_PLAYER (tr->ch) ? NAME (tr->ch) : tr->ch->pIndexData->short_descr),
aw.c:    pArea = ch->in_room->area;
aw.c:    pArea = ch->in_room->area;
aw.c:    pArea = ch->in_room->area;
aw.c:          if (d->snoop_by == ch->desc)
aw.c:  if (ch->desc != NULL)
aw.c:      for (d = ch->desc->snoop_by; d != NULL; d = d->snoop_by)
aw.c:  victim->desc->snoop_by = ch->desc;
aw.c:  if (IS_MOB (ch) || ch->desc == NULL)
aw.c:  if (ch->desc->original != NULL)
aw.c:  ch->desc->character = victim;
aw.c:  ch->desc->original = ch;
aw.c:  victim->desc = ch->desc;
aw.c:  ch->desc = NULL;
aw.c:  if (ch->desc == NULL)
aw.c:  if (ch->desc->original == NULL)
aw.c:  ch->desc->character = ch->desc->original;
aw.c:  ch->desc->original = NULL;
aw.c:  ch->desc->character->desc = ch->desc;
aw.c:  ch->desc = NULL;
aw.c:  char_to_room (victim, ch->in_room);
aw.c:      obj_to (obj, ch->in_room);
aw.c:    if (!ch->in_room->more)
aw.c:  raw_purge (ch->in_room);
aw.c:  for (v = ch->in_room->more->people; v != NULL; v = v->next_in_room)
aw.c:    check_room_more (ch->in_room);
aw.c:  for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
aw.c:          rch->fgt->fighting = NULL;
aw.c:          if (rch->fgt->hunting != NULL)
aw.c:              free_string (rch->fgt->hunting);
aw.c:              rch->fgt->hunting = NULL;
aw.c:	  if (rch->fgt->phunting !=NULL) /* JRAJRA - track stuff */
aw.c:	      free_string (rch->fgt->phunting);
aw.c:	      rch->fgt->phunting = NULL;
aw.c:      ch->desc->pString = &obj->description;
aw.c:      ch->desc->pString = &victim->pcdata->long_descr;
aw.c:  if (ch->pcdata->level > MAX_LEVEL)
aw.c:    ch->pcdata->level = MAX_LEVEL;
aw.c:  for (tch = char_list; tch != NULL; tch = tch->next)
aw.c:      if (IS_PLAYER (tch) && tch->desc == NULL)
aw.c:    ch->pcdata->level = MAX_LEVEL;
aw.c:          vch_next = vch->next;
aw.c:  oldinvis = ch->pcdata->wizinvis;
aw.c:      ch->pcdata->wizinvis = ch->pcdata->wizinvis == 0 ? LEVEL (ch) : 0;
aw.c:    ch->pcdata->wizinvis = atoi (arg);
aw.c:  ch->pcdata->wizinvis = ch->pcdata->wizinvis <= LEVEL (ch) ? ch->pcdata->wizinvis : LEVEL (ch);
aw.c:  if (ch->pcdata->wizinvis <= LEVEL_IMMORTAL && ch->pcdata->wizinvis != 0)
aw.c:    ch->pcdata->wizinvis = 0;
aw.c:  if (ch->pcdata->wizinvis == oldinvis ||
aw.c:      (ch->pcdata->wizinvis >= LEVEL_IMMORTAL && oldinvis >= LEVEL_IMMORTAL))
aw.c:  if (ch->pcdata->wizinvis < oldinvis && ch->pcdata->wizinvis == 0)
aw.c:  else if (ch->pcdata->wizinvis >= LEVEL_IMMORTAL && ch->pcdata->wizinvis > oldinvis)
aw.c:  if (IS_SET (ch->act, PLR_HOLYWALK))
aw.c:      REMOVE_BIT (ch->act, PLR_HOLYWALK);
aw.c:      SET_BIT (ch->act, PLR_HOLYWALK);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_MAPPING) || IS_AFFECTED(ch,AFF_BLIND))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_MAPPING);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_MAPPING);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_NOIBM))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_NOIBM);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_NOIBM);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_MAPSPAM))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_MAPSPAM);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_MAPSPAM);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_VIEWMOBS))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_VIEWMOBS);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_VIEWMOBS);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_VIEWPLAYERS))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_VIEWPLAYERS);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_VIEWPLAYERS);
aw.c:  if (IS_SET (ch->pcdata->act2, PLR_HOLYLAG))
aw.c:      REMOVE_BIT (ch->pcdata->act2, PLR_HOLYLAG);
aw.c:      SET_BIT (ch->pcdata->act2, PLR_HOLYLAG);
aw.c:  if (IS_SET (ch->act, PLR_HOLYPEACE))
aw.c:      REMOVE_BIT (ch->act, PLR_HOLYPEACE);
aw.c:      SET_BIT (ch->act, PLR_HOLYPEACE);
aw.c:  if (IS_SET (ch->act, PLR_HOLYLIGHT))
aw.c:      REMOVE_BIT (ch->act, PLR_HOLYLIGHT);
aw.c:      SET_BIT (ch->act, PLR_HOLYLIGHT);
aw.c:                   (ch->in_room->area == pAreat ? "*" : " "),
aw.c:                   (ch->in_room->area == pAreat ? "*" : " "),
bank.c:    check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:  if ((type == 'G') && (ch->pcdata->bank < (amount*100)))
bank.c:  else if ((type == 'W') && (ch->pcdata->warpoints < amount))
bank.c:      bank_num = ch->pcdata->alignment;
bank.c:	      ch->pcdata->warpoints -= amount;
bank.c:	      ch->pcdata->bank -= 100*amount;
bank.c:	      ch->pcdata->warpoints -= amount;
bank.c:	      ch->pcdata->bank -= 100*amount;
bank.c:  align = ch->pcdata->alignment;
bank.c:  sprintf(buf, "You have %ld gold and %ld warpoints.\n\r", ((ch->pcdata->bank)/100), ch->pcdata->warpoints);
bank.c:    check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:  sprintf (buf, "The banker tells you 'You have %ld coins in your account.'\n\r", ch->pcdata->bank);
bank.c:	  if (ch->pcdata->storage[k] != NULL)
bank.c:	      sprintf (buf, "\x1B[1;37m%-2d> \x1B[0m%-30s \x1B[1;30m[\x1B[34m%d coins get back\x1B[30m]\x1B[37;0m\n\r", k + 1, strip_ansi_codes (OOSTR (ch->pcdata->storage[k], short_descr)), ch->pcdata->storage[k]->cost / STOREDIV);
bank.c:  check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:  if (tally_coins (ch) < store_cost && ch->pcdata->bank < store_cost)
bank.c:    ch->pcdata->bank -= store_cost;
bank.c:  ch->pcdata->storage[k] = obj;
bank.c:	  if (ch->pcdata->storage[k] != NULL)
bank.c:	      sprintf (buf, "\x1B[1;37m%-2d> \x1B[0m%-30s \x1B[1;30m[\x1B[34m%d coins get back\x1B[30m]\x1B[37;0m\n\r", k + 1, strip_ansi_codes (OOSTR (ch->pcdata->storage[k], short_descr)), ch->pcdata->storage[k]->cost / STOREDIV);
bank.c:  check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:      if (ch->pcdata->storage[itemnum] == NULL)
bank.c:      obj = ch->pcdata->storage[itemnum];
bank.c:	  if (ch->pcdata->storage[k] != NULL && is_name (arg1, ch->pcdata->storage[k]->pIndexData->name))
bank.c:	      obj = ch->pcdata->storage[k];
bank.c:  if (tally_coins (ch) < remove_cost && ch->pcdata->bank < remove_cost)
bank.c:    ch->pcdata->bank -= remove_cost;
bank.c:  ch->pcdata->storage[k] = NULL;
bank.c:      if (ch->in_room->vnum >= cdat->start_vnum + 1 && ch->in_room->vnum <= cdat->start_vnum + 20)
bank.c:  if (!IS_SET(ch->in_room->room_flags, ROOM_CLANSTORE))
bank.c:	  if ((ch->in_room->vnum >= clan->start_vnum) && (ch->in_room->vnum - clan->start_vnum) < 50)
bank.c:  if (!IS_SET(ch->in_room->room_flags, ROOM_CLANSTORE))
bank.c:	  if ((ch->in_room->vnum >= clan->start_vnum) && (ch->in_room->vnum - clan->start_vnum) < 50)
bank.c:  check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:      ch->pcdata->bank += amount;
bank.c:      sprintf (buf, "Your new balance is: %ld copper.\n\r", ch->pcdata->bank);
bank.c:  ch->pcdata->bank += amount;
bank.c:  sprintf (buf, "Your new balance is: %ld copper.\n\r", ch->pcdata->bank);
bank.c:  check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:      amount = ch->pcdata->bank;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      sprintf (buf, "Your new balance is: \e[1;36m%ld\e[0m.\n\r", ch->pcdata->bank);
bank.c:  if (amount < 1 || amount > ch->pcdata->bank)
bank.c:  ch->pcdata->bank -= amount;
bank.c:  sprintf (buf, "Your new balance is: \e[1;36m%ld\e[0m.\n\r", ch->pcdata->bank);
bank.c:  check_room_more (ch->in_room);
bank.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
bank.c:      ch->pcdata->bank += amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank -= amount;
bank.c:      ch->pcdata->bank += amount;
buysell.c:  check_room_more (ch->in_room);
buysell.c:  for (keeper = ch->in_room->more->people; keeper; keeper = keeper->next_in_room)
buysell.c:      sprintf(buff, "Ahh, welcome %s. It is so good to see you again. I am currently partaking of my midday meal. Perhaps if you would be so kind as to return in a little while, I will be able to assist you, as you are one of my most valued customers. We strive for one hundred percent customer satisfaction here at %s. However, I must eat my lunch, Thank you, come again.\n\r", NAME(ch),  ch->in_room->name);
buysell.c:  check_room_more (ch->in_room);
buysell.c:  for (keeper = ch->in_room->more->people; keeper; keeper = keeper->next_in_room)
buysell.c:      if(number_range(1,130) < (ch->pcdata->learned[gsn_patch] +
buysell.c:      if(number_range(1,130) < (ch->pcdata->learned[gsn_patch] +
buysell.c:      for (obj = ch->carrying; obj != NULL; obj = obj_nxt)
buysell.c:      for (obj = ch->carrying; obj != NULL; obj = obj_nxt)
buysell.c:      for (obj = ch->carrying; obj != NULL; obj = obj_nxt)
buysell.c:      for (obj = ch->carrying; obj != NULL; obj = obj_nxt)
buysell.c:    if (LEVEL (ch) > 100 && !IS_REAL_GOD (ch) && ch->in_room->area->open == 1)
buysell.c:  if (IS_SET (ch->in_room->room_flags, ROOM_PET_SHOP))
buysell.c:      oneroomNext = get_room_index (ch->in_room->vnum + 1);
buysell.c:	  bug ("Do_buy: bad pet shop at vnum %d.", ch->in_room->vnum);
buysell.c:      in_room = ch->in_room;
buysell.c:      ch->in_room = oneroomNext;
buysell.c:      ch->in_room = in_room;
buysell.c:	if (ch->pcdata->number_pets > 1)
buysell.c:	if (ch->pcdata->number_pets > 2)
buysell.c:	if (ch->pcdata->number_pets > 3)
buysell.c:      if (ch->pcdata->number_pets > 4)
buysell.c:      ch->pcdata->number_pets++;
buysell.c:      char_to_room (pet, ch->in_room);
buysell.c:  if (IS_SET (ch->in_room->room_flags, ROOM_PET_SHOP))
buysell.c:      oneroomNext = get_room_index (ch->in_room->vnum + 1);
buysell.c:	  bug ("Do_list: bad pet shop at vnum %d.", ch->in_room->vnum);
buysell.c:      flex = 14-(strlen(ch->in_room->name))/2;
buysell.c:      sprintf(hugebuf_o, "\x1b[1;36m_\\|%s\x1b[0;32mWelcome to %s, what would you like to buy?%s%s\x1b[1;36m|/_\n\n\r", buff,ch->in_room->name,buff,(IS_SET(strlen(ch->in_room->name), 1) ? " " : ""));
buysell.c:  if (LEVEL (ch) > 100 && ch->in_room->area->open == 1 && !IS_REAL_GOD (ch))
chan.c:  pp = ch->position;
chan.c:  ch->position = POSITION_STANDING;
chan.c:  ch->position = POSITION_STANDING;
channels.c:  if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_SILENCE))
channels.c:      j = ch->position;
channels.c:      ch->position = POSITION_STANDING;
channels.c:       for (i = ch->pcdata->ctell_counter + 1; i != ch->pcdata->ctell_counter; i++)
channels.c:         if (ch->pcdata->last_ctells[i])
channels.c:	  act (ch->pcdata->last_ctells[i], ch, NULL, ch, TO_CHAR);
channels.c:       ch->position = j;
channels.c:      ch->position = j;
channels.c:      if (!IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:	ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:      if (IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:	ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:  if (IS_PLAYER(ch) && IS_SET (ch->pcdata->chan_ignore, (1 << channel)))
channels.c:      ch->pcdata->chan_ignore ^= (1 << channel);
channels.c:      if (ch->move < (c->moves+5))
channels.c:   p = ch->position;
channels.c:   ch->position = POSITION_STANDING;
channels.c:	    ch->pcdata->chan_color[channel], c->channel_name, 
channels.c:	    argy, ch->pcdata->chan_color[channel], 
channels.c:   ch->position = p;
channels.c:	sprintf (format, "%s%10s > %s%s%s\x1B[37;0m", ch->pcdata->chan_color[channel], NAME(ch),
channels.c:	sprintf (format, "%s%10s > %s%s%s\x1B[37;0m", ch->pcdata->chan_color[channel],
channels.c:     sprintf (format, "%s%10s > %s%s%s\x1B[37;0m", ch->pcdata->chan_color[channel],NAME(ch),
channels.c:     if (ch->pcdata->last_ctells[ch->pcdata->ctell_counter])
channels.c:       free (ch->pcdata->last_ctells[ch->pcdata->ctell_counter]);
channels.c:      ch->pcdata->last_ctells[ch->pcdata->ctell_counter] = malloc (strlen (format) + 1);
channels.c:      strcpy (ch->pcdata->last_ctells[ch->pcdata->ctell_counter], format);
channels.c:      ch->pcdata->ctell_counter++;
channels.c:      if (ch->pcdata->ctell_counter > 14)
channels.c:	ch->pcdata->ctell_counter = 0;
channels.c:              sprintf (format, "%s%10s > %s%s%s\x1B[37;0m", ch->pcdata->chan_color[channel],NAME(ch),
channels.c:	  if (ch->pcdata->ignore[k])
channels.c:	      sprintf (general_use, "+= %s =+\n\r", ch->pcdata->ignore[k]);
channels.c:      if (ch->pcdata->ignore[k] && !str_cmp (ch->pcdata->ignore[k], argy))
channels.c:	  free_string (ch->pcdata->ignore[k]);
channels.c:	  ch->pcdata->ignore[k] = NULL;
channels.c:      if (!ch->pcdata->ignore[k])
channels.c:	  ch->pcdata->ignore[k] = str_dup (capitalize (argy));
channels.c:      if (!ch->pcdata->ignore[k])
channels.c:      if (!str_prefix (ch->pcdata->ignore[k], NAME (victim)))
channels.c:  if (IS_PLAYER(ch) && IS_SET(ch->pcdata->act2, PLR_SILENCE)) return;
channels.c:  if (IS_MOB (ch) && ch->position == POSITION_SLEEPING)
channels.c:  if (IS_SET (ch->in_room->room_flags, ROOM_SILENCE))
channels.c:	   (IS_MOB (ch) ? "\x1B[1;37m" : color_table[ch->pcdata->colors[COLOR_SAY]].code), verb,
channels.c:  if (ch->desc != NULL)
channels.c:      sprintf (buf, "%s says (%d): %s\n", NAME (ch), ch->in_room->vnum, conv);
channels.c:	if (ch->in_room->vnum == tr->attached_to_room)
channels.c:	    s->room = ch->in_room;
channels.c:  check_room_more (ch->in_room);
channels.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
channels.c:	  switch (ch->pIndexData->mobtype)
channels.c:    /* if not arguments, then list back the last ch->pcdata->tell_counter tells */
channels.c:      j = ch->position;
channels.c:      ch->position = POSITION_STANDING;
channels.c:      for (i = ch->pcdata->tell_counter + 1; i != ch->pcdata->tell_counter; i++)
channels.c:	  if (ch->pcdata->last_tells[i])
channels.c:	    act (ch->pcdata->last_tells[i], ch, NULL, ch, TO_CHAR);
channels.c:      ch->position = j;
channels.c:  if (IS_SET (ch->in_room->room_flags, ROOM_SILENCE))
channels.c:  if (IS_PLAYER (ch) && ch->pcdata->quiet)
channels.c:      || (IS_MOB (victim) && victim->in_room != ch->in_room) ||
channels.c:	   (IS_MOB (ch) ? "$7" : color_table[ch->pcdata->colors[COLOR_TELL]].act_code),
channels.c:  position = ch->position;
channels.c:  ch->position = POSITION_STANDING;
channels.c:  ch->position = position;
channels.c:      if (ch->pcdata->last_tells[ch->pcdata->tell_counter])
channels.c:	  free (ch->pcdata->last_tells[ch->pcdata->tell_counter]);
channels.c:      ch->pcdata->last_tells[ch->pcdata->tell_counter] = malloc (strlen (buf) + 1);
channels.c:      strcpy (ch->pcdata->last_tells[ch->pcdata->tell_counter], buf);
channels.c:      ch->pcdata->tell_counter++;
channels.c:      if (ch->pcdata->tell_counter > 14)
channels.c:	ch->pcdata->tell_counter = 0;
channels.c:  if ((victim = ch->ced->reply) == NULL || (DIFF_ALIGN(ch, victim) &&
channels.c:	   (IS_MOB (ch) ? "$7" : color_table[ch->pcdata->colors[COLOR_TELL]].act_code),
channels.c:  position = ch->position;
channels.c:  ch->position = POSITION_STANDING;
channels.c:  ch->position = position;
channels.c:      if (ch->pcdata->last_tells[ch->pcdata->tell_counter])
channels.c:	  free (ch->pcdata->last_tells[ch->pcdata->tell_counter]);
channels.c:      ch->pcdata->last_tells[ch->pcdata->tell_counter] = malloc (strlen (buf) + 1);
channels.c:      strcpy (ch->pcdata->last_tells[ch->pcdata->tell_counter], buf);
channels.c:      ch->pcdata->tell_counter++;
channels.c:      if (ch->pcdata->tell_counter > 14)
channels.c:	ch->pcdata->tell_counter = 0;
channels.c:  if (!ch->pcdata->quiet)
channels.c:      ch->pcdata->quiet = 1;
channels.c:      ch->pcdata->quiet = 0;
channels.c:    if (!ch->in_room) return;
channels.c:    check_room_more(ch->in_room);
channels.c:    if (IS_SET (ch->in_room->room_flags, ROOM_SILENCE))
channels.c:  for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
channels.c:    j = ch->position;
channels.c:    ch->position = POSITION_STANDING;
channels.c:    for (i = ch->pcdata->gtell_counter + 1; i != ch->pcdata->gtell_counter; i++)
channels.c:       if (ch->pcdata->last_gtells[i])
channels.c:	act (ch->pcdata->last_gtells[i], ch, NULL, ch, TO_CHAR);
channels.c:      ch->position = j;
channels.c:	   (IS_MOB (ch) ? "\x1B[37;0m" : color_table[ch->pcdata->colors[COLOR_TELL]].code),
channels.c:  oldpos = ch->position;
channels.c:  ch->position = POSITION_STANDING;
channels.c:  ch->position = oldpos;
channels.c:  for (gch = char_list; gch != NULL; gch = gch->next)
channels.c:	       (IS_MOB (gch) ? "\x1B[37;0m" : color_table[gch->pcdata->colors[COLOR_TELL]].code),
channels.c:      position = gch->position;
channels.c:      gch->position = POSITION_STANDING;
channels.c:	       (IS_MOB (gch) ? "\x1B[37;0m" : color_table[gch->pcdata->colors[COLOR_TELL]].code),
channels.c:	    if (gch->pcdata->last_gtells[gch->pcdata->gtell_counter])
channels.c:              free (gch->pcdata->last_gtells[gch->pcdata->gtell_counter]);
channels.c:      	    gch->pcdata->last_gtells[gch->pcdata->gtell_counter] = malloc (strlen (buf) + 1);
channels.c:	    strcpy (gch->pcdata->last_gtells[gch->pcdata->gtell_counter], buf);
channels.c:      	    gch->pcdata->gtell_counter++;
channels.c:	    if (gch->pcdata->gtell_counter > 14)
channels.c:	      gch->pcdata->gtell_counter = 0;
channels.c:      gch->position = position;
channels.c:	(IS_MOB (ch) ? "\x1B[37;0m" : color_table[ch->pcdata->colors[COLOR_TELL]].code),
channels.c:      if (ch->pcdata->last_gtells[ch->pcdata->gtell_counter])
channels.c:	  free (ch->pcdata->last_gtells[ch->pcdata->gtell_counter]);
channels.c:      ch->pcdata->last_gtells[ch->pcdata->gtell_counter] = malloc (strlen (buf) + 1);
channels.c:      strcpy (ch->pcdata->last_gtells[ch->pcdata->gtell_counter], buf);
channels.c:      ch->pcdata->gtell_counter++;
channels.c:      if (ch->pcdata->gtell_counter > 14)
channels.c:	ch->pcdata->gtell_counter = 0;
char.c:  ch->data_type = K_CHAR;
char.c:      ch->desc = NULL;
char.c:      ch->ced = NULL;
char.c:      ch->in_room = NULL;
char.c:      ch->gen_next = NULL;
char.c:      ch->data_type = K_CHAR;
char.c:      ch->armor = 100;
char.c:      ch->position = POSITION_STANDING;
char.c:      ch->next_fighting = NULL;
char.c:      ch->exp = 0;
char.c:      ch->height = -1;
char.c:      ch->special = 0;
char.c:      ch->pIndexData = NULL;
char.c:      ch->affected = NULL;
char.c:      ch->timer = -1;
char.c:      ch->wait = 0;
char.c:      ch->affected_by = 0;
char.c:      ch->more_affected_by = 0;
char.c:      ch->act = 0;
char.c:      ch->copper = 0;
char.c:      ch->gold = 0;
char.c:      ch->position = POSITION_STANDING;
char.c:      ch->carrying = NULL;
char.c:      ch->hold1 = NULL;
char.c:      ch->hold2 = NULL;
char.c:      ch->hitroll = 0;
char.c:      ch->damroll = 0;
char.c:      ch->hit = 20;
char.c:      ch->max_hit = 20;
char.c:      ch->move = 70;
char.c:      ch->max_move = 70;
clan.c:  ClanData = (CLAN_DATA *) ch->desc->pEdit;
clan.c:      if (ch->fgt->attacker_turn)
clan.c:      ch->desc->pEdit = NULL;
clan.c:      ch->desc->connected = CON_PLAYING;
clan.c:  if (str_cmp (ch->pcdata->name, ClanData->leader))
clan.c:  if (str_cmp (ch->pcdata->name, ClanData->leader))
clan.c:	  ch->pcdata->clan = -1;
clan.c:  if (ClanData->alignment != ch->pcdata->alignment)
climb.c:  in_room = ch->in_room;
climb.c:      move -= ch->pcdata->carry_number - get_curr_str (ch);
climb.c:      if (ch->move < move)
climb.c:      fch_next = fch->next_in_room;
climb.c:	  if (IS_SET (fch->act, PLR_HOLYLIGHT))
climb.c:      else if (IS_MOB (ch) && IS_SET (ch->act, ACT_SCRAMBLE))
climb.c:  if (MOUNTED_BY (ch) != NULL && ch->in_room != MOUNTED_BY (ch)->in_room)
climb.c:      fch_next = fch->next_in_room;
climb.c:	  if (IS_SET (fch->act, PLR_HOLYLIGHT))
climb.c:      else if (IS_MOB (ch) && IS_SET (ch->act, ACT_SCRAMBLE))
climb.c:      fch_next = fch->next_in_room;
climb.c:      if (MASTER (fch) == ch && fch->position >= POSITION_STANDING)
comm.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
comm.c:      ch->carrying = NULL;
comm.c:        ch->pcdata->storage[i] = NULL;
comm.c:        ch->pcdata->learned[i] = -100;
comm.c:          if (FIGHTING (ch) == NULL && ch->position == POSITION_FIGHTING)
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->wait = 0;
comm.c:            ch->pcdata->speedwalk = 0;
comm.c:            ch->pcdata->auction_count = 0;
comm.c:            if (--ch->pcdata->tickcounts <= 0)
comm.c:              ch->pcdata->tickcounts = 0;
comm.c:            if (--ch->pcdata->auction_count <= 0)
comm.c:              ch->pcdata->auction_count = 0;
comm.c:            if (--ch->pcdata->speedwalk <= 0)
comm.c:              ch->pcdata->speedwalk = 0;
comm.c:            if (--ch->wait <= 0)
comm.c:              ch->wait = 0;
comm.c:          if (ch->in_room && ch->pcdata->tickcounts < 1)
comm.c:            if (ch->position == POSITION_CASTING && ch->pcdata->temp)
comm.c:              ch->wait = 0;
comm.c:              do_actual_cast (ch, ch->pcdata->temp->temp_string);
comm.c:            else if (ch->position == POSITION_CHARGING && ch->pcdata->temp)
comm.c:              ch->wait = 0;
comm.c:              do_actual_charge (ch, ch->pcdata->temp->temp_string);
comm.c:            else if (ch->position == POSITION_CIRCLE)
comm.c:            else if (ch->position == POSITION_INVEST && ch->pcdata->temp)
comm.c:              do_actual_investigate (ch, ch->pcdata->temp->temp_string);
comm.c:            else if (ch->position == POSITION_BACKSTAB && ch->pcdata->temp)
comm.c:              do_actual_backstab (ch, ch->pcdata->temp->temp_string);
comm.c:              ch->wait = 8;
comm.c:            else if (ch->position == POSITION_SEARCHING && ch->pcdata->temp)
comm.c:              do_actual_search (ch, ch->pcdata->temp->temp_string);
comm.c:            else if (ch->position == POSITION_SHOOTING && ch->pcdata->temp)
comm.c:              do_actual_shoot (ch, ch->pcdata->temp->temp_string);
comm.c:            else if (ch->position == POSITION_MINING)
comm.c:            if (ch->pcdata->voting_on == 999)
comm.c:              ch->pcdata->voting_on = 10;
comm.c:            if (ch->pcdata->voting_on == 998)
comm.c:              ch->pcdata->voting_on = 11;
comm.c:          if (FIGHTING (ch) == NULL && ch->position == POSITION_FIGHTING)
comm.c:        if (ch && ch->pcdata && ch->pcdata->tickcounts > 0)
comm.c:          switch (ch->position)
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:            ch->pcdata->tickcounts = 0;
comm.c:    if ((ch = dclose->character) != NULL && dclose->descriptor > 0 && ch->data_type != 50)
comm.c:      sprintf (log_buf, "Closing link to %s.", ch->pcdata->name);
comm.c:        ch->desc = NULL;
comm.c:        ch->desc = NULL;
comm.c:        for (tch = char_list; tch != NULL; tch = tch->next)
comm.c:        if (IS_SET (ch->pcdata->act2, PLR_BLANK) || !ch)
comm.c:        if (ch && IS_SET (ch->pcdata->act2, PLR_PROMPT) &&
comm.c:        ch->pcdata->nat_armor = 100;
comm.c:        ch->affected_by = 0;
comm.c:        ch->pcdata->nat_abilities = 0;
comm.c:        ch->pcdata->nat_abilities2 = 0;
comm.c:        ch->pcdata->augments = 0;
comm.c:            ch->pcdata->stat[i] = 0;
comm.c:            ch->pcdata->stat_mod[i] = 0;
comm.c:        ch->pcdata->alignment = 0;
comm.c:        ch->pcdata->race = 0;
comm.c:        ch->height = 0;
comm.c:            ch->pcdata->stat[i] = 0;
comm.c:            ch->pcdata->stat_mod[i] = 0;
comm.c:		        ch->pcdata->stat[j] = 0;
comm.c:            ch->pcdata->stat_mod[j] = 0;
comm.c:            ch->pcdata->stat_mod[k] +=  
comm.c:        ch->pcdata->nat_armor = race_info[ch->pcdata->race].natarmor;
comm.c:        ch->pcdata->nat_abilities = race_info[ch->pcdata->race].affect_bits;
comm.c:        ch->pcdata->nat_abilities2 = race_info[ch->pcdata->race].affect_bits2;
comm.c:        ch->pcdata->augments = race_info[ch->pcdata->race].nat_augments;
comm.c:        ch->pcdata->alignment = race_info[ch->pcdata->race].start_room -100;
comm.c:		          ch->pcdata->stat[i] = ch->pcdata->stat_mod[i] + race_info[ch->pcdata->race].bonus[i] + align_info[ch->pcdata->alignment].bonus[i];
comm.c:              ch->pcdata->stat_mod[i] = 0;
comm.c:                if (ch->pcdata->stat[i] > 23) {
comm.c:                  ch->pcdata->stat[i] = 23;
comm.c:                  if (i+1 < NUM_STATS) ch->pcdata->stat[i+1]++;
comm.c:                if (ch->pcdata->stat[i] > 24) {
comm.c:                  ch->pcdata->stat[i] = 24;
comm.c:                  if (i+1 < NUM_STATS) ch->pcdata->stat[i+1]++;
comm.c:              ch->pcdata->start_stat[i] = ch->pcdata->stat[i];
comm.c:        if (!IS_SET (ch->pcdata->act2, PLR_ANSI))
comm.c:          ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN;
comm.c:          ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN | PLR_ANSI;
comm.c:        ch->pcdata->temp_room = get_room_index (race_info[ch->pcdata->race].start_room);
comm.c:        ch->pcdata->level = 0;
comm.c:        if ((IS_SET(d->act, DESC_WRONG_PWD) || pow.validation) && !IS_SET (ch->act, ACT_UNVAL))
comm.c:          ch->act |= ACT_UNVAL;
comm.c:        sprintf (buf, "the %s Adventurer", race_info[ch->pcdata->race].name);
comm.c:        ch->pcdata->n_mana = ch->pcdata->n_max_mana;
comm.c:      if (!ch->pcdata->pwd || ch->pcdata->pwd[0] == '\0' || ch->pcdata->pwd == "") {
comm.c:  /*    if (strcmp (argy, ch->pcdata->pwd) && */ 
comm.c:	if (strcmp(argy,ch->pcdata->rpwd)) { /* JRAJRA */
comm.c:          (ch->desc ? ch->desc->username : "nodesc"),(ch->desc ? ch->desc->host :   "nodesc"), NAME(ch)); 
comm.c:      if (ch->pcdata->rpwd != NULL) free_string(ch->pcdata->rpwd);
comm.c:      ch->pcdata->rpwd = str_dup(argy);
comm.c:      if (ch->desc && ch->desc->host[29] != 1 ) {
comm.c:        write_to_buffer (ch->desc, echo_on_str, 0);
comm.c:      if (check_reconnect (d, ch->pcdata->name, TRUE)) { /*Player entered NM & PW */	  
comm.c:      if (IS_SET (ch->act, ACT_UNVAL)) {
comm.c:        kks = ch->pcdata->pagelen;
comm.c:        ch->pcdata->pagelen = 99;
comm.c:        ch->pcdata->pagelen = kks;
comm.c:          ch->pcdata->stat_mod[i] = 0;
comm.c:          ch->pcdata->name, echo_off_str);
comm.c:        if (ch->pcdata->pwd)
comm.c:          free_string (ch->pcdata->pwd);
comm.c:        ch->pcdata->pwd = str_dup (pwdnew);
comm.c:        if (ch->pcdata->rpwd)
comm.c:          free_string(ch->pcdata->rpwd);
comm.c:        ch->pcdata->rpwd = str_dup (argy);
comm.c:        if (strcmp (argy, ch->pcdata->pwd) &&
comm.c:          strcmp(argy, ch->pcdata->rpwd))
comm.c:        if (ch->pcdata->rpwd)
comm.c:          free_string(ch->pcdata->rpwd);
comm.c:        ch->pcdata->rpwd = str_dup(argy);
comm.c:        sprintf (buf2, "New player %s@%s.", ch->pcdata->name, d->host);
comm.c:          ch->pcdata->sex = SEX_MALE;
comm.c:          ch->pcdata->sex = SEX_FEMALE;
comm.c:          ch->pcdata->sex = SEX_NEUTRAL;
comm.c:          SET_BIT (ch->pcdata->act2, PLR_TELNET_GA);
comm.c:            SET_BIT (ch->pcdata->act2, PLR_ANSI);
comm.c:            SET_BIT (ch->pcdata->act2, PLR_ANSI);
comm.c:            strcpy (ch->pcdata->email, argy);
comm.c:            ch->pcdata->race = iRace;
comm.c:            ch->pcdata->alignment = race_info[iRace].start_room -100;
comm.c:            ch->pcdata->pray_points = BASE_ROLLING_POINTS-2;
comm.c:            ch->pcdata->tmp_str = 15;
comm.c:            ch->pcdata->tmp_con = 15;
comm.c:            ch->pcdata->tmp_dex = 15;
comm.c:            ch->pcdata->tmp_int = 15;
comm.c:            ch->pcdata->tmp_wis = 15;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_str < 24 && ch->pcdata->tmp_str < race_info[ch->pcdata->race].limits[0])
comm.c:                ch->pcdata->tmp_str++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_con < 24 && ch->pcdata->tmp_con < race_info[ch->pcdata->race].limits[4])
comm.c:                ch->pcdata->tmp_con++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_dex < 24 && ch->pcdata->tmp_dex < race_info[ch->pcdata->race].limits[3])
comm.c:                ch->pcdata->tmp_dex++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_int < 24 && ch->pcdata->tmp_int < race_info[ch->pcdata->race].limits[1])
comm.c:                ch->pcdata->tmp_int++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_wis < 24 && ch->pcdata->tmp_wis < race_info[ch->pcdata->race].limits[2]) 
comm.c:                ch->pcdata->tmp_wis++;
comm.c:                ch->pcdata->pray_points--;
comm.c:                  if (ch->pcdata->tmp_str>3) 
comm.c:                    ch->pcdata->tmp_str--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if (ch->pcdata->tmp_con>3) 
comm.c:                    ch->pcdata->tmp_con--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_dex>3) 
comm.c:                    ch->pcdata->tmp_dex--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_int>3) 
comm.c:                    ch->pcdata->tmp_int--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_wis>3) 
comm.c:                    ch->pcdata->tmp_wis--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:              tmp_stats[0] = ch->pcdata->tmp_str;
comm.c:              tmp_stats[4] = ch->pcdata->tmp_con;
comm.c:              tmp_stats[3] = ch->pcdata->tmp_dex;
comm.c:              tmp_stats[1] = ch->pcdata->tmp_int;
comm.c:              tmp_stats[2] = ch->pcdata->tmp_wis;
comm.c:              ch->pcdata->nat_armor = race_info[ch->pcdata->race].natarmor;
comm.c:              ch->pcdata->nat_abilities = race_info[ch->pcdata->race].affect_bits;
comm.c:              ch->pcdata->nat_abilities2 = race_info[ch->pcdata->race].affect_bits2;
comm.c:              ch->pcdata->augments = race_info[ch->pcdata->race].nat_augments;
comm.c:              ch->pcdata->alignment = race_info[ch->pcdata->race].start_room -100;
comm.c:              /* ch->pcdata->stat[i] = ch->pcdata->stat_mod[i] 
comm.c:              + race_info[ch->pcdata->race].bonus[i] 
comm.c:              + align_info[ch->pcdata->alignment].bonus[i]
comm.c:                ch->pcdata->stat[i] = tmp_stats[i];
comm.c:                ch->pcdata->stat_mod[i] = 0;
comm.c:                ch->pcdata->start_stat[i] = ch->pcdata->stat[i];
comm.c:              if (!IS_SET (ch->pcdata->act2, PLR_ANSI))
comm.c:                ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN;
comm.c:                ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN | PLR_ANSI;
comm.c:              ch->pcdata->temp_room = get_room_index (race_info[ch->pcdata->race].start_room);
comm.c:              ch->pcdata->level = 0;
comm.c:              if ((IS_SET(d->act, DESC_WRONG_PWD) || pow.validation) && !IS_SET (ch->act, ACT_UNVAL))
comm.c:                ch->act |= ACT_UNVAL;
comm.c:              sprintf (buf, "the %s Adventurer", race_info[ch->pcdata->race].name);
comm.c:              ch->pcdata->n_mana = ch->pcdata->n_max_mana;
comm.c:            ch->pcdata->pray_points = BASE_ROLLING_POINTS + (4 * ch->pcdata->ascend_times);
comm.c:            ch->pcdata->tmp_str = 15;
comm.c:            ch->pcdata->tmp_con = 15;
comm.c:            ch->pcdata->tmp_dex = 15;
comm.c:            ch->pcdata->tmp_int = 15;
comm.c:            ch->pcdata->tmp_wis = 15;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_str < 26 && ch->pcdata->tmp_str < race_info[ch->pcdata->race].limits[0])
comm.c:                ch->pcdata->tmp_str++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_con < 26 && ch->pcdata->tmp_con < race_info[ch->pcdata->race].limits[4])
comm.c:                ch->pcdata->tmp_con++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_dex < 26 && ch->pcdata->tmp_dex < race_info[ch->pcdata->race].limits[3])
comm.c:                ch->pcdata->tmp_dex++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_int < 26 && ch->pcdata->tmp_int < race_info[ch->pcdata->race].limits[1])
comm.c:                ch->pcdata->tmp_int++;
comm.c:                ch->pcdata->pray_points--;
comm.c:              if (ch->pcdata->pray_points>0 && ch->pcdata->tmp_wis < 26 && ch->pcdata->tmp_wis < race_info[ch->pcdata->race].limits[2]) 
comm.c:                ch->pcdata->tmp_wis++;
comm.c:                ch->pcdata->pray_points--;
comm.c:                  if (ch->pcdata->tmp_str>3) 
comm.c:                    ch->pcdata->tmp_str--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if (ch->pcdata->tmp_con>3) 
comm.c:                    ch->pcdata->tmp_con--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_dex>3) 
comm.c:                    ch->pcdata->tmp_dex--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_int>3) 
comm.c:                    ch->pcdata->tmp_int--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:                  if(ch->pcdata->tmp_wis>3) 
comm.c:                    ch->pcdata->tmp_wis--;
comm.c:                    ch->pcdata->pray_points++;
comm.c:              if(ch->pcdata->pray_points == 0) {
comm.c:                tmp_stats[0] = ch->pcdata->tmp_str;
comm.c:                tmp_stats[4] = ch->pcdata->tmp_con;
comm.c:                tmp_stats[3] = ch->pcdata->tmp_dex;
comm.c:                tmp_stats[1] = ch->pcdata->tmp_int;
comm.c:                tmp_stats[2] = ch->pcdata->tmp_wis;
comm.c:                ch->pcdata->nat_armor = race_info[ch->pcdata->race].natarmor;
comm.c:                ch->pcdata->nat_abilities = race_info[ch->pcdata->race].affect_bits;
comm.c:                ch->pcdata->nat_abilities2 = race_info[ch->pcdata->race].affect_bits2;
comm.c:                ch->pcdata->augments = race_info[ch->pcdata->race].nat_augments;
comm.c:                //ch->pcdata->alignment = race_info[ch->pcdata->race].start_room -100;
comm.c:                /* ch->pcdata->stat[i] = ch->pcdata->stat_mod[i] 
comm.c:                + race_info[ch->pcdata->race].bonus[i] 
comm.c:                + align_info[ch->pcdata->alignment].bonus[i]
comm.c:                  ch->pcdata->stat[i] = tmp_stats[i];
comm.c:                  ch->pcdata->stat_mod[i] = 0;
comm.c:                  ch->pcdata->start_stat[i] = ch->pcdata->stat[i];
comm.c:                //if (!IS_SET (ch->pcdata->act2, PLR_ANSI))
comm.c:                //  ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN;
comm.c:                //  ch->pcdata->act2 = PLR_AUTOGOLD | PLR_AUTOLOOT | PLR_AUTOEXIT | PLR_ASSIST | PLR_AUTOSPLIT | PLR_BLANK | PLR_COMBINE | PLR_PROMPT | PLR_AUTOSCAN | PLR_ANSI;
comm.c:                ch->pcdata->temp_room = get_room_index (race_info[ch->pcdata->race].start_room);
comm.c:                ch->pcdata->level = 0;
comm.c:                //if ((IS_SET(d->act, DESC_WRONG_PWD) || pow.validation) && !IS_SET (ch->act, ACT_UNVAL))
comm.c:                //  ch->act |= ACT_UNVAL;
comm.c:                sprintf (buf, "the Ascended %s", race_info[ch->pcdata->race].name);
comm.c:                ch->pcdata->n_mana = ch->pcdata->n_max_mana;
comm.c:          if (ch->pcdata->stat[WIS] == 0)
comm.c:          ch->pcdata->nat_armor = 100;
comm.c:          ch->affected_by = 0;
comm.c:          ch->pcdata->nat_abilities = 0;
comm.c:          ch->pcdata->nat_abilities2 = 0;
comm.c:          ch->pcdata->augments = 0;
comm.c:              ch->pcdata->stat[i] = 0;
comm.c:              ch->pcdata->stat_mod[i] = 0;
comm.c:          ch->height = 0;
comm.c:              ch->pcdata->stat[i] = 0;
comm.c:              ch->pcdata->stat_mod[i] = 0;
comm.c:            SET_BIT (ch->pcdata->act2, PLR_HARDCORE);
comm.c:        sprintf (log_buf, "%s@%s new player.", ch->pcdata->name, d->host);
comm.c:        ch->pcdata->pray_points = -1;
comm.c:        ch->pcdata->bank = 50;
comm.c:          fprintf (fpp, "Email Address....... '%s'\n", ch->pcdata->email);
comm.c:          fprintf (fpp, "Current Site Logon.. '%s'\n", ch->desc->host);
comm.c:            if (!str_cmp (playerbase->player_name, ch->pcdata->name))
comm.c:            if (!str_cmp (playerbase->email_address, ch->pcdata->email) && playerbase->player_level != -1)
comm.c:          ch->pcdata->temp_room = get_room_index (race_info[ch->pcdata->race].start_room);
comm.c:          int i=ch->pcdata->pagelen;
comm.c:          ch->pcdata->pagelen=100;
comm.c:          ch->pcdata->pagelen=i;
comm.c:        sprintf (log_buf, "%s@%s ascended.", ch->pcdata->name, d->host);
comm.c:        ch->pcdata->pray_points = -1;        
comm.c:        if (ch->in_room) char_from_room (ch);
comm.c:        ch->pcdata->temp_room = get_room_index(100+ch->pcdata->alignment);
comm.c:        char_to_room (ch, ch->pcdata->temp_room);
comm.c:            for (tch = char_list; tch != NULL; tch = tch->next)
comm.c:              ch->next = char_list;
comm.c:            if (!str_cmp (ch->pcdata->name, online->name))
comm.c:              ch->pcdata->online_spot = online;
comm.c:              online_new->name = str_dup(ch->pcdata->name);
comm.c:              ch->pcdata->online_spot = online_new;
comm.c:            sprintf (buf2, "%s@%s has entered the game.", ch->pcdata->name, d->host);
comm.c:          ch->pcdata->voting_on = 0;
comm.c:          ch->pcdata->tickcounts = 0;
comm.c:          if (ch->position != POSITION_SLEEPING
comm.c:            || ch->position != POSITION_RESTING
comm.c:            || ch->position != POSITION_STANDING
comm.c:            || ch->position != POSITION_MEDITATING)
comm.c:          ch->affected_by |= ch->pcdata->nat_abilities;
comm.c:          ch->more_affected_by |= ch->pcdata->nat_abilities2;
comm.c:            if (ch->pcdata->ignore[k])
comm.c:                if (!str_cmp (playerbase->player_name, ch->pcdata->ignore[k]))
comm.c:                sprintf (bufnot, "Ignore -= %s =- not found in playerbase; removing.\n\r", ch->pcdata->ignore[k]);
comm.c:                free_string (ch->pcdata->ignore[k]);
comm.c:                ch->pcdata->ignore[k] = NULL;
comm.c:                playerbase->player_last_login = (int) ch->pcdata->logon;
comm.c:                playerbase->player_align = ch->pcdata->alignment;
comm.c:                playerbase->player_level = (ch->pcdata->level);
comm.c:                strcpy (playerbase->email_address, ch->pcdata->email);
comm.c:                playerbase->player_remort_times = ch->pcdata->remort_times;
comm.c:                playerbase->player_created = ch->pcdata->created;
comm.c:              strcpy (playerbase->email_address, ch->pcdata->email);
comm.c:              playerbase->player_last_login = (int) ch->pcdata->logon;
comm.c:              playerbase->player_align = ch->pcdata->alignment;
comm.c:              playerbase->player_level = ch->pcdata->level;
comm.c:              playerbase->player_remort_times = ch->pcdata->remort_times;
comm.c:          if (ch->in_room)
comm.c:          if (ch->pcdata->temp_room == NULL)
comm.c:            ch->pcdata->temp_room = get_room_index(100+ch->pcdata->alignment);
comm.c:          if(ch->pcdata->temp_room->vnum > 500 && ch->pcdata->temp_room->vnum < 510)
comm.c:            ch->pcdata->temp_room = get_room_index (100+ch->pcdata->alignment);
comm.c:          char_to_room (ch, ch->pcdata->temp_room);
comm.c:            ch->pcdata->level = 1;
comm.c:            ch->pcdata->created = current_time;
comm.c:            if (CHALLENGE (ch) != 10 && ch->in_room && ch->in_room->vnum < 1000)
comm.c:              char_to_room(ch, ch->pcdata->temp_room);
comm.c:            ch->pcdata->clan = clan_number(ch);
comm.c:            ch->pcdata->clan2 = clan_number_2(ch);
comm.c:                ch->pcdata->pet_temp[uui] = 0;
comm.c:              if (is_note_to (ch, pnote) && str_cmp (ch->pcdata->name, pnote->sender)  && pnote->date_stamp > ch->pcdata->last_note)
comm.c:              if (is_note_to (ch, pnote) && str_cmp (ch->pcdata->name, pnote->sender)  && pnote->date_stamp > ch->pcdata->last_note && pnote->board_num == 1)
comm.c:          for (cch = char_list; cch != NULL; cch = cch->next)
comm.c:              if ((cch->pcdata->alignment == ch->pcdata->alignment && str_cmp(ch->pcdata->name,cch->pcdata->name)) || IS_IMMORTAL(cch))
comm.c:                if(ch->pcdata->alignment == 1)
comm.c:                  sprintf(buf,"\n\r\x1b[0;31mThe forces of evil strengthen as \x1B[32;0m%s\x1B[0;37m\x1b[0;31m steps from the shadows.\x1b[0;37m\n\r",ch->pcdata->name);
comm.c:                else if(ch->pcdata->alignment == 2)
comm.c:                  sprintf(buf,"\n\r\x1b[1;37mThe forces of good strengthen as \x1B[32;0m%s\x1B[0;37m\x1b[1;37m emerges from a beam of light.\x1b[0;37m\n\r",ch->pcdata->name);
comm.c:                else if(ch->pcdata->alignment == 0)
comm.c:                  sprintf(buf, "\n\r\x1b[1;37mThe \x1b[0;34mp\x1b[1;34mr\x1b[0;36mo\x1b[1;36mt\x1b[1;37me\x1b[1;36mc\x1b[0;36mt\x1b[1;34me\x1b[0;34md\x1b[1;37m forces become stronger as \x1b[1;36m%s\x1b[1;37m emerges from a beam of light.\x1b[0;37m\n\r",ch->pcdata->name);
comm.c:             else if(!str_cmp(ch->pcdata->name,"Bern") && str_cmp(cch->pcdata->name,ch->pcdata->name))
comm.c:  for (ch = char_list; ch != NULL; ch = ch->next)
comm.c:    || ch->desc == NULL
comm.c:    || ch->desc->connected != CON_PLAYING
comm.c:    || (ch->ced && ch->ced->was_in_room == NULL))
comm.c:  ch->timer = 0;
comm.c:  if (txt != NULL && ch->desc != NULL)
comm.c:    write_to_buffer (ch->desc, txt, strlen (txt));
comm.c:  if (txt == NULL || ch->desc == NULL || !txt)
comm.c:  free_string (ch->desc->showstr_head);
comm.c:  ch->desc->showstr_head = add_color (txt);
comm.c:  ch->desc->showstr_point = ch->desc->showstr_head;
comm.c:  show_string (ch->desc, "");
comm.c:  if (txt == NULL || ch->desc == NULL || !txt)
comm.c:  free_string (ch->desc->showstr_head);
comm.c:  ch->desc->showstr_head = add_color_limited (txt);
comm.c:  ch->desc->showstr_point = ch->desc->showstr_head;
comm.c:  show_string (ch->desc, "");
comm.c:      race_info[ch->pcdata->race].name);
comm.c:      race_info[ch->pcdata->race].limits[STR],ch->pcdata->tmp_str);
comm.c:      race_info[ch->pcdata->race].limits[CON],ch->pcdata->tmp_con);
comm.c:      race_info[ch->pcdata->race].limits[DEX],ch->pcdata->tmp_dex);
comm.c:      race_info[ch->pcdata->race].limits[INT],ch->pcdata->tmp_int);
comm.c:      race_info[ch->pcdata->race].limits[WIS],ch->pcdata->tmp_wis);
comm.c:      ch->pcdata->pray_points);
config.c:  if (IS_SET (ch->pcdata->act2, PLR_BLANK))
config.c:      if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_SILENCE))
config.c:      send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_AUCTION)
config.c:      send_to_char (!IS_SET (ch->pcdata->deaf, CHANNEL_YELL)
config.c:          REMOVE_BIT (ch->pcdata->deaf, bit);
config.c:          SET_BIT (ch->pcdata->deaf, bit);
config.c:  if (IS_SET (ch->ced->fight_ops, F_JUJI))
config.c:  if (IS_SET (ch->ced->fight_ops, F_CHOKE))
config.c:  if (IS_SET (ch->ced->fight_ops, F_BITE))
config.c:  if (IS_SET (ch->ced->fight_ops, F_ELBOW))
config.c:  if (IS_SET (ch->ced->fight_ops, F_KNEE))
config.c:  if (IS_SET (ch->ced->fight_ops, F_HEADBUTT))
config.c:  if (IS_SET (ch->ced->fight_ops, F_POWER))
config.c:  if (IS_SET (ch->ced->fight_ops, F_AGGRESSIVE))
config.c:  if (IS_SET (ch->ced->fight_ops, F_GROUND))
config.c:    ch->ced->fight_ops ^= F_JUJI;
config.c:    ch->ced->fight_ops ^= F_HEADBUTT;
config.c:    ch->ced->fight_ops ^= F_ELBOW;
config.c:    ch->ced->fight_ops ^= F_KNEE;
config.c:    ch->ced->fight_ops ^= F_BITE;
config.c:    ch->ced->fight_ops ^= F_CHOKE;
config.c:	if (IS_SET(ch->ced->fight_ops, F_AGGRESSIVE))
config.c:	  ch->damroll -=2;
config.c:	  ch->damroll +=2;
config.c:	ch->ced->fight_ops ^= F_AGGRESSIVE;
config.c:      if (IS_SET(ch->ced->fight_ops, F_POWER))
config.c:	ch->damroll -=1;
config.c:	ch->damroll +=1;
config.c:      ch->ced->fight_ops ^= F_POWER;
config.c:    ch->ced->fight_ops ^= F_GROUND;
config.c:  if (ch->pcdata->learned[gsn_stance1] < 68)
config.c:    if (ch->pcdata->stance == 0)
config.c:    if (ch->pcdata->stance == 1)
config.c:    if (ch->pcdata->stance == 2)
config.c:    if (ch->pcdata->stance == 3)
config.c:    if (ch->pcdata->stance == 4)
config.c:    if (ch->pcdata->stance == 5)
config.c:    if (ch->pcdata->stance == 6)
config.c:    if (ch->pcdata->stance == 7)
config.c:    if (ch->pcdata->stance == 8)
config.c:      ch->pcdata->stance = 0; 
config.c:      ch->pcdata->stance = 1; 
config.c:      ch->pcdata->stance = 2; 
config.c:      ch->pcdata->stance = 3; 
config.c:    else if (!strcmp(argy, "tiger") && ch->pcdata->race > 11)
config.c:      ch->pcdata->stance = 4;
config.c:    else if (!strcmp(argy, "mongoose") && ch->pcdata->race > 11)
config.c:      ch->pcdata->stance = 5;
config.c:    else if (!strcmp(argy, "bear") && ch->pcdata->race > 11)
config.c:      ch->pcdata->stance = 6;
config.c:    else if (!strcmp(argy, "dragon") && ch->pcdata->level > 79
config.c:             && ch->pcdata->race > 11)
config.c:      ch->pcdata->stance = 7;
config.c:    else if (!strcmp(argy, "crane") && ch->pcdata->level > 79
config.c:             && ch->pcdata->race > 11)
config.c:      ch->pcdata->stance = 8;
config.c:  if (wimpy > (ch->max_hit / 3))
config.c:  ch->ced->wimpy = wimpy;
config.c:  if (IS_SET (ch->pcdata->act2, PLR_BRIEF))
config.c:  ch->pcdata->pagelen = lines;
config.c:      if (ch->pcdata->rprompt)
config.c:        free_string (ch->pcdata->rprompt);
config.c:      ch->pcdata->rprompt = str_dup (argy);
config.c:  if (!IS_SET (ch->pcdata->act2, PLR_PROMPT))
config.c:      SET_BIT (ch->pcdata->act2, PLR_PROMPT);
config.c:      REMOVE_BIT (ch->pcdata->act2, PLR_PROMPT);
config.c:  if (ch->position == POSITION_GROUNDFIGHTING)
config.c:  if (ch->position != POSITION_STANDING)
config.c:  ch->fgt->fighting = victim->fgt->fighting;
config.c:      if (IS_SET (ch->pcdata->act2, PLR_ANSI))
config.c:          p = ch->position;
config.c:          ch->position = POSITION_STANDING;
config.c:              sprintf (buf, "$R%s", ch->pcdata->chan_color[i]);
config.c:                       ch->pcdata->chan_color[i]);
config.c:          ch->position = p;
config.c:  strcpy (ch->pcdata->chan_color[i], argy);
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_PROMPT_UP)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOEXIT)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOSAC)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT)
config.c:        send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOSCAN)
config.c: send_to_char (IS_SET (ch->pcdata->act2, PLR_AUTOBLINK)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_ASSIST)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_BLANK)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_BRIEF)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_COMBINE)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_PROMPT)
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_ANSI)
config.c:      /* send_to_char( IS_SET(ch->pcdata->act2, PLR_TELNET_GA)
config.c:          send_to_char (ch->pcdata->challenge_on
config.c:          send_to_char (ch->pcdata->arena_msg == 1
config.c:                        : (ch->pcdata->arena_msg == 2
config.c:      send_to_char (IS_SET (ch->pcdata->act2, PLR_SILENCE)
config.c:          send_to_char (IS_SET (ch->act, PLR_HOLYLIGHT) && IS_IMMORTAL (ch)
config.c:          send_to_char (IS_SET (ch->act, PLR_HOLYPEACE) && IS_IMMORTAL (ch)
config.c:          send_to_char (IS_SET (ch->pcdata->act2, PLR_HOLYLAG) && IS_IMMORTAL (ch)
config.c:          send_to_char (IS_SET (ch->act, PLR_HOLYWALK) && IS_IMMORTAL (ch)
config.c:              if (ch->pcdata->challenge_on)
config.c:                  ch->pcdata->challenge_on = FALSE;
config.c:                  ch->pcdata->challenge_on = TRUE;
config.c:	       if (ch->pcdata->arena_msg == 2)
config.c:		   ch->pcdata->arena_msg = 0;
config.c:	       else if (ch->pcdata->arena_msg == 1)
config.c:		   ch->pcdata->arena_msg = 2;
config.c:		   ch->pcdata->arena_msg = 1;
config.c:	   SET_BIT (ch->pcdata->act2, bit);
config.c:	   REMOVE_BIT (ch->pcdata->act2, bit);
config.c:	   if (IS_SET (ch->pcdata->act2, bit))
config.c:              REMOVE_BIT (ch->pcdata->act2, bit);
config.c:	       SET_BIT (ch->pcdata->act2, bit);
config.c:  free_string (ch->pcdata->title);
config.c:  ch->pcdata->title = str_dup (buf);
config.c:  if (strlen(ch->pcdata->title) > 80)
config.c:  free_string (ch->pcdata->title);
config.c:  ch->pcdata->title = str_dup ("my title was too long");
config.c: if (IS_SET(ch->act, PLR_LAMER))
config.c: if (IS_SET(ch->act, PLR_LAMER))
config.c:  string_append (ch, &ch->pcdata->description);
config.c:/*if (ch->description!=NULL) {
config.c:   for (t=ch->description; *t!='\0'; t++) {
config.c:   strcpy(tp,ch->description);
config.c:   free_string(ch->description);
config.c:   ch->description=str_dup(tp);
config.c:   free_string( ch->description );
config.c:   ch->description = str_dup( buf );
config.c:   send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
consid.c:    ch_dam += ch->pIndexData->damroll;
consid.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_resilience] > 7)
consid.c:    ch_absorb +=(ch->pcdata->learned[gsn_resilience]/4);
consid.c:      if (ch->pcdata->learned[571] > 0)
consid.c:	ch_attacks += ch->pcdata->learned[571]*3/50 + 1;
consid.c:      if (ch->pcdata->learned[gsn_second_attack] > 0)
consid.c:	ch_attacks += ch->pcdata->learned[gsn_second_attack]*3/50 + 1;
consid.c:      if (ch->pcdata->learned[gsn_third_attack] > 0)
consid.c:	ch_attacks += ch->pcdata->learned[gsn_third_attack]/20 + 1;
consid.c:  rounds_to_kill_ch = ch->hit * 10/victim_dam;
consid.c:  for (attacker = ch->in_room->more->people; attacker !=NULL; attacker = attacker->next_in_room)
consid.c:  rounds_to_kill_ch = ch->hit * 10/victim_dam + number_range(0,2);
create.c: if(!ch->in_room) return;
create.c: if (ch->in_room->sector_type != SECT_FOREST &&
create.c:     ch->in_room->sector_type != SECT_WOODS &&
create.c:     ch->in_room->sector_type != SECT_BRUSH)
create.c: if (!check_skill(ch, gsn_chop) || number_range(1,300) > ch->pcdata->learned[gsn_chop])
create.c: if (ch->pcdata->online_spot->chopped > 200 && LEVEL(ch) < 100)
create.c: if (ch->in_room->minerals <= 0)
create.c:	 obj_to(log, ch->in_room);
create.c:	 ch->in_room->minerals--;
create.c:	 ch->pcdata->online_spot->chopped++;
create.c: if(!ch->in_room) return;
create.c: check_room_more (ch->in_room);
create.c: for(obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
create.c: check_room_more (ch->in_room);
create.c:  for(obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
create.c:  for(obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
create.c:      for(obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
create.c:      for(obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
create.c:  if (!ch->in_room) return;
create.c:  check_room_more(ch->in_room);
create.c:  for(obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
create.c:   for(obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
create.c:      for(obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
create.c:      for(obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
create.c:	  if(ch->pcdata->learned[spell[i]->gsn] < pow.max_prac_spells)
create.c:   ch->pcdata->tickcounts = number_range(10,45);
create.c:  ch->position = POSITION_STANDING;
create.c:  if (ch->in_room->sector_type != SECT_MOUNTAIN &&
create.c:      ch->in_room->sector_type != SECT_HILLS &&
create.c:      ch->in_room->sector_type != SECT_ROCKY &&
create.c:      ch->in_room->sector_type != SECT_CANYON &&
create.c:      ch->in_room->sector_type < SECT_CAVE)
create.c:      if (ch->pcdata->online_spot->mined > 200)
create.c:      if (ch->in_room->minerals <= 0)
create.c:          ch->in_room->minerals--;
create.c:	  ch->pcdata->online_spot->mined++;
create.c:      if (ch->max_hit < 800)
create.c:      if (ch->pcdata->learned[gsn_enchant] < pow.max_prac_skills)
create.c:	  ch->hit = 1;
create.c:      if (ch->pcdata->bank < cost)
create.c:	  ch->max_hit--;
create.c:	  ch->pcdata->bank -= cost/10;
create.c:	      ch->hit = 1;
create.c:      ch->max_hit--;
create.c:      ch->pcdata->bank -= cost;
create.c:      if (number_range(1,220) < ch->pcdata->learned[gsn_lore] && pot_info[potion_number].ingredients[i] > 0)
dam.c:  ch->position=nw;
dam.c:  if (!ch || ch->data_type==50) 
dam.c:ch->hit-=i;
dam.c:  if (!ch || ch->data_type==50) 
dam.c:  ch->move-=i;
dam.c:ch->hit+=i;
dam.c:  ch->move+=i;
dam.c:  ch->hit=ch->max_hit;
dam.c:  ch->move=ch->max_move;
dam2.c:  if( IS_MOB(ch) && ch->pIndexData->mobtype == MOB_DUMMY )
dam2.c:  if(IS_MOB(ch) && ch->pIndexData->mobtype == MOB_DUMMY) return;
dam2.c:      if (!ch->pIndexData->attackname || !str_cmp ("(null)", ch->pIndexData->attackname) || !str_cmp ("N/A", ch->pIndexData->attackname) || ch->pIndexData->attackname == NULL || ch->pIndexData->attackname[0] == ' ')
dam2.c:	  if (!str_cmp (mob_type_attack (ch->pIndexData->mobtype), "punch") && FIGHTING (ch) != NULL &&
dam2.c:	    strcpy (bare, mob_type_attack (ch->pIndexData->mobtype));
dam2.c:	  if (!str_cmp (ch->pIndexData->attackname, "punch") && FIGHTING (ch) != NULL && FIGHTING (ch)->position == POSITION_GROUNDFIGHTING)
dam2.c:	    strcpy (bare, ch->pIndexData->attackname);
dam2.c:      if (victim->in_room != ch->in_room)
db2.c:	if (!ch->pcdata->script_flags[i]) continue;
db2.c:	for (temp=sa_head[CALCULATE_HEAD(ch->pcdata->script_flags[i])]; temp!=NULL; temp=temp->next) {
db2.c:		if (!str_cmp(temp->flagname,ch->pcdata->script_flags[i])) {
db2.c:	  if (!allf && oneroom->area != ch->in_room->area)
db2.c:	      write_to_descriptor2 (ch->desc, tmpbuf, 0);
db2.c:	       ch->in_room ? ch->in_room->vnum : 0, NAME (ch), str);
death.c:    check_room_more (ch->in_room);
death.c:  if (ch->pcdata->learned[gsn_invest] < 1)
death.c:  if ((obj = get_obj_list (ch, argy, ch->in_room->more->contents)) == NULL)
death.c:  ch->pcdata->tickcounts = 21;
death.c:  strcpy (ch->pcdata->temp->temp_string, argy);
death.c:  if ((obj = get_obj_list (ch, argy, ch->in_room->more->contents)) == NULL)
death.c:  if (number_range (1, 90) > ch->pcdata->learned[gsn_invest])
death.c:  check_room_more (ch->in_room);
death.c:      ((I_CONTAINER *) (corpse->more))->key_vnum=ch->pIndexData->vnum;
death.c:  if (IS_PLAYER (ch) || (IS_MOB (ch) && ch->pIndexData->pShop == NULL))
death.c:	  check_room_more (ch->in_room);
death.c:	  ch->in_room->more->copper += ch->copper;
death.c:	  ch->in_room->more->gold += ch->gold;
death.c:	  ch->gold=0;
death.c:	  ch->copper=0;
death.c:  for (obj = ch->carrying; obj != NULL; obj = obj_next)
death.c:		obj_to (obj, ch->in_room);
death.c:        || IS_SET(ch->pcdata->act2, PLR_HARDCORE))
death.c:		obj_to (obj, ch->in_room);
death.c:      ch->gold = 0;
death.c:      ch->copper = 0;
death.c:      obj_to (corpse, ch->in_room);
death.c:  if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_REPTILE)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_UNDEAD)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_GHOST)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_FISH)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_PLANT)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_STATUE)
death.c:  else if (IS_MOB (ch) && ch->pIndexData->mobtype == MOB_BIRD)
death.c:      obj_to (obj, ch->in_room);
death.c:  was_in_room = ch->in_room;
death.c:	  ch->in_room = pexit->to_room;
death.c:  ch->in_room = was_in_room;
death.c:          tmpchnx = tmpch->next_in_room;
death.c:          if (tmpch->fgt && tmpch->fgt->fighting == victim)
death.c:              tmpch->fgt->fighting = NULL;
death.c:              tmpch->position = POSITION_STANDING;
death.c:          if(tmpch->fgt && tmpch->fgt->phunting && 
death.c:	      !str_cmp(tmpch->fgt->phunting, NAME(victim)))
death.c:               free_string(tmpch->fgt->phunting); 
death.c:               tmpch->fgt->phunting = NULL;
death.c:          if (tmpch->fgt && tmpch->fgt->hunting &&
death.c:            !str_cmp(tmpch->fgt->hunting, NAME(victim)))
death.c:               free_string(tmpch->fgt->hunting);
death.c:               tmpch->fgt->hunting = NULL;
death.c:      tmpchnx = tmpch->next;
death.c:      if (tmpch->fgt && (tmpch->fgt->fighting == victim))
death.c:	  tmpch->fgt->fighting = NULL;
death.c:	  tmpch->position = POSITION_STANDING;
death.c:	  if (tmpch->in_room)
death.c:	      check_room_more(tmpch->in_room);
death.c:	      for (cd = tmpch->in_room->more->people; cd != NULL; cd = cdnext) 
death.c:		      tmpch->fgt->fighting = cd;
death.c:		      tmpch->position = POSITION_FIGHTING;   
death.c:     if (HUNTING (tmpch) && !str_cmp (tmpch->fgt->hunting, NAME (victim)))
death.c:	   free_string (tmpch->fgt->hunting);
death.c:	   tmpch->fgt->hunting = NULL;
death.c:	  for (gch = curr_room->more->people; gch != NULL; gch =gch->next_in_room) 
death.c:	      ch->pcdata->remort_times <= victim->pcdata->remort_times &&
death.c:	    ch->pcdata->hard_pkills++;
death.c:		  for (gch = curr_room->more->people; gch != NULL; gch = gch->next_in_room)
death.c:			  gch->pcdata->pkills++;
death.c:			  gch->pcdata->pklevels += LEVEL(victim);
death.c:			  gch->pcdata->pkhelpers += same_align;
death.c:			  gch->pcdata->totalkills++;
death.c:			    gch->pcdata->killpoints++;
death.c:			    gch->pcdata->killpoints++;
death.c:			    gch->pcdata->killpoints++;
death.c:			    gch->pcdata->killpoints++;
death.c:                          if (IS_SET(gch->pcdata->act2, PLR_HARDCORE))
death.c:			  sprintf (g_exp, "You've gained %d experience for the kill, and %d for fighting.\n\r", xp, gch->pcdata->voting_on);
death.c:			  gch->pcdata->voting_on = 0;
draw.c:  write_to_buffer (ch->desc, "\x1B[37;0m\x1B[2J\x1B[1;1f", 0);
draw.c:  write_to_buffer (ch->desc, tt, 0);
draw.c:  write_to_descriptor (ch->desc->descriptor, tt, 0);
draw.c:  if (!ch->desc)
draw.c:  if (IS_SET(ch->pcdata->act2, PLR_NOIBM))
draw.c:  ch->pcdata->maxx = maxx;
draw.c:  ch->pcdata->maxy = maxy;
draw.c:  go_display (ch, ch->in_room, (maxx/2), (maxy/2), maxy, maxx);
draw.c:  write_to_buffer(ch->desc, "\x1B[0;37m", 0);
draw.c:  undisplay(ch, ch->in_room, 150); 
draw.c:  gotoxy(ch, 1, ch->pcdata->pagelen);
draw.c:  bool ibm = !IS_SET(ch->pcdata->act2, PLR_NOIBM);
draw.c:      for (j = 1; j < ch->pcdata->maxx+1; j++)
draw.c:	      write_to_buffer (ch->desc, " ", 0);
draw.c:		  write_to_buffer (ch->desc, scrnn[j][i], 0);
draw.c:	      write_to_buffer (ch->desc, outp[j][i], 0); /* Draw the char */
draw.c:    if (!ch->desc)
draw.c:  write_to_buffer (ch->desc, "\x1B[0;37m", 0);
draw.c:  sprintf (tt, "\x1B[%d;1f", ch->pcdata->pagelen);
draw.c:      for(rch = rid->more->people; rch != NULL; rch=rch->next_in_room)
draw.c:      for (rch = rid->more->people; rch != NULL; rch = rch->next_in_room)
draw.c:      for(rch = rid->more->people; rch != NULL; rch=rch->next_in_room)
draw.c:       for (rch = rid->more->people; rch != NULL; rch =rch->next_in_room)
draw.c:  if (IS_SET(ch->pcdata->act2, PLR_NOIBM)) noibm = TRUE;
draw.c:  if (IS_SET(ch->pcdata->act2, PLR_VIEWMOBS)) mb = TRUE;
draw.c:  if (IS_SET(ch->pcdata->act2, PLR_VIEWPLAYERS)) kk = TRUE;
draw.c:  ch->pcdata->x = (MAP_WIDTH/2);
draw.c:  ch->pcdata->y = (MAP_HEIGHT/2);
draw.c:    sml_noibm(ch, ch->in_room,MAP_WIDTH/2, MAP_HEIGHT/2);
draw.c:    sml_ibm(ch, ch->in_room, MAP_WIDTH/2, MAP_HEIGHT/2);
draw.c:  write_to_buffer(ch->desc, "\x1B[0;37m", 0);
draw.c:  undisplay(ch, ch->in_room, 50); 
draw.c:  gotoxy(ch, 1, ch->pcdata->pagelen);
draw.c:  sprintf(buf, "\x1b[%d;%dr", MAP_HEIGHT, ch->pcdata->pagelen);
draw.c:	      write_to_buffer (ch->desc, " ", 0);
draw.c:	      write_to_buffer (ch->desc, color_table[smlcolors[j][i]].code, 0);
draw.c:	  write_to_buffer (ch->desc, smlmap[j][i] , 0); 
draw.c:  sprintf(buf, "\x1b[%d;1f", ch->pcdata->pagelen);
edit.c:  sprintf (buf, "\x1B[24;1f%d,%d [%d] ", row, col, ch->desc->location);
edit.c:  write_to_descriptor2 (ch->desc, buf, 0);
edit.c:  write_to_descriptor2 (ch->desc, buf, 0);
edit.c:  if (!ch->desc->pString)
edit.c:      ch->desc->connected = CON_PLAYING;
edit.c:  strcpy (buf, *ch->desc->pString);
edit.c:  if (!ch->desc)
edit.c:  if (!ch->pcdata->name)
edit.c:      tpos = ch->desc->location;
edit.c:      ch->desc->location = ll;
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      tpos = ch->desc->location;
edit.c:      for (spl = ch->desc->location;; spl--)
edit.c:      for (snl = ch->desc->location;; snl++)
edit.c:      ch->desc->location = ppp;
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      if (ch->desc->location + 1 <= max)
edit.c:	ch->desc->location++;
edit.c:      if (ch->desc->location > 1 && buf[ch->desc->location - 1] == '\n')
edit.c:	  if (ch->desc->location + 1 <= max)
edit.c:	    ch->desc->location += 1;
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      if (ch->desc->location - 1 >= 0)
edit.c:	ch->desc->location--;
edit.c:      if (buf[ch->desc->location] == '\r')
edit.c:	  if (ch->desc->location - 1 >= 0)
edit.c:	    ch->desc->location--;
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      free_string (*ch->desc->pString);
edit.c:      *ch->desc->pString = str_dup ("");
edit.c:      ch->desc->location = 0;
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[2J", 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:      *ch->desc->pString = format_string (*ch->desc->pString);
edit.c:      ch->desc->location = 0;
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[2J", 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:      strcpy (buf, *ch->desc->pString);
edit.c:      write_to_descriptor2 (ch->desc, buf, 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:      position_cursor (ch, ch->desc->location, buf);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[2J\x1B[1;1f", 0);
edit.c:      write_to_descriptor2 (ch->desc, buf, 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:      position_cursor (ch, ch->desc->location, buf);
edit.c:      if (ch->desc->location - 1 < 0)
edit.c:      if (ch->desc->location - 1 >= 0 && buf[ch->desc->location - 1] == '\r')
edit.c:      for (ii = ch->desc->location - 1; ii < oldlen; ii++)
edit.c:      ch->desc->location--;
edit.c:	  for (ii = ch->desc->location - 1; ii < oldlen; ii++)
edit.c:	  ch->desc->location--;
edit.c:      free_string (*ch->desc->pString);
edit.c:      *ch->desc->pString = str_dup (buf);
edit.c:	  write_to_descriptor2 (ch->desc, "\x1B[2J", 0);
edit.c:	  write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:	  write_to_descriptor2 (ch->desc, buf, 0);
edit.c:	  write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:	  position_cursor (ch, ch->desc->location, buf);
edit.c:      strcpy (buf, *ch->desc->pString);
edit.c:      for (ctr = ch->desc->location;; ctr++)
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[K", 0);
edit.c:      write_to_descriptor2 (ch->desc, teol, 0);
edit.c:      position_cursor (ch, ch->desc->location, *ch->desc->pString);
edit.c:      ch->desc->pString = NULL;
edit.c:      ch->desc->location = 0;
edit.c:      ch->desc->connected = CON_PLAYING;
edit.c:      SET_BIT (ch->pcdata->act2, PLR_TELNET_GA);
edit.c:      write_to_descriptor2 (ch->desc, linemode_on, 0);
edit.c:      write_to_descriptor2 (ch->desc, echo_on_str, 0);
edit.c:      write_to_descriptor2 (ch->desc, "\x1B[24;1f\x1B[KText Saved. Press Enter. ", 0);
edit.c:  if (!IS_SET(ch->desc->act, DESC_INSERT))
edit.c:	  if (buf[ch->desc->location] != '\0')
edit.c:	      position_cursor (ch, ch->desc->location, buf);
edit.c:	      for (tt = slb; tt >= ch->desc->location; tt--)
edit.c:	      buf[ch->desc->location] = to_add[i];
edit.c:	      for (pteol = ch->desc->location; pteol < slb; pteol++)
edit.c:		  write_to_descriptor2 (ch->desc, "\x1B[2J", 0);
edit.c:		  write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:		  write_to_descriptor2 (ch->desc, buf, 0);
edit.c:		  write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:		  write_to_descriptor2 (ch->desc, "\x1B[K", 0);
edit.c:		  write_to_descriptor2 (ch->desc, ts, 0);
edit.c:	      position_cursor (ch, ch->desc->location + 1, buf);
edit.c:	    buf[ch->desc->location] = to_add[i];
edit.c:	  ch->desc->location++;
edit.c:  position_cursor (ch, ch->desc->location, buf);
edit.c:  free_string (*ch->desc->pString);
edit.c:  *ch->desc->pString = str_dup (buf);
edit.c:  write_to_descriptor2 (ch->desc, dontecho, 0);
edit.c:  write_to_descriptor2 (ch->desc, echo_off_str, 0);
edit.c:  write_to_descriptor2 (ch->desc, linemode_off, 0);
edit.c:  write_to_descriptor2 (ch->desc, echo_off_str, 0);
edit.c:  write_to_descriptor2 (ch->desc, "\x1B[2J", 0);
edit.c:  REMOVE_BIT (ch->pcdata->act2, PLR_TELNET_GA);
edit.c:  write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:  write_to_descriptor2 (ch->desc, *pString, 0);
edit.c:  write_to_descriptor2 (ch->desc, "\x1B[24;15fCTRL-E = CLEAR @ = Save/Quit CTRL-R = Redraw CTRL-F = Format", 0);
edit.c:  write_to_descriptor2 (ch->desc, "\x1B[1;1f", 0);
edit.c:  ch->desc->location = 0;
edit.c:  ch->desc->pString = pString;
edit.c:  ch->desc->connected = CON_FSEDITOR;
emlen.h:				(ch->pcdata->security <= area->security \
emlen.h:				|| strstr( area->builders, ch->pcdata->name ) != NULL \
emlen.h:#define IS_OUTSIDE(ch)          (!IS_SET((ch)->in_room->room_flags, ROOM_INDOORS) && ch->in_room->sector_type !=SECT_INSIDE && ch->in_room->sector_type < SECT_CAVE)
emlen.h:#define NAME( ch )              (( IS_PLAYER( ch ) ? (ch)->pcdata->name : ch->pIndexData->short_descr ))
emlen.h:		if (ch->in_room) strcat(cl,itoa(ch->in_room->vnum)); \
emlen.h:#define BUILDERS_CAN_GIVE(yn)        if ( !(yn) && IS_PLAYER(ch) && ch->pcdata->level>99 && ch->pcdata->level<110 ) {send_to_char("Builders cannot use the 'give' command, sorry.\n\r",ch); return;}
emlen.h:#define TEMPFLAG(num)           (ch->pcdata->tempflag[(num)])
emlen.h:#define FLAG(num)               (ch->pcdata->complete[(num)])
emlen.h:/* Example: LOOP(ch,char_list,ch->next) { blah } */
fgt.c:      if (spl->guilds & ~(ch->pcdata->guilds))
fgt.c:  if (ch->pcdata->learned[gsn] == -100 || number_range(1,103) > ch->pcdata->learned[gsn])
fgt.c:  if (IS_MOB(victim) || !ch->in_room)
fgt.c:  check_room_more(ch->in_room);
fgt.c:  if (IS_PLAYER(ch) && (ch != victim) && (!ch->fgt || ch->fgt->fighting != victim))
fgt.c:      if ((!IS_SET(victim->act, PLR_SAME_SIDE_PK) && ch->in_room->vnum >= 1000 && !DIFF_ALIGN(ch, victim)) || LEVEL(victim) >= IMM_LEVEL)
fgt.c:	  sprintf(log_buf, "ILLEGAL PKILL %s attacked %s at %d.\n\r", NAME(ch), NAME(victim), ch->in_room->vnum);
fgt.c:	  SET_BIT(ch->act, PLR_SAME_SIDE_PK);
fgt.c:      else if (!DIFF_ALIGN(ch, victim) && ch->in_room->vnum >=1000)
fgt.c:	  sprintf(log_buf, "OK PKILL %s attacked %s at %d.\n\r", NAME(ch), NAME(victim), ch->in_room->vnum);
fgt.c:	  SET_BIT(ch->act, PLR_SAME_SIDE_PK);
fgt.c:       sprintf(buf, "Help, I am being attacked by %s at %s.\n\r",rNAME(ch, victim), ch->in_room->name);
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->no_quit_pk == 0 && IS_PLAYER(victim) && ALIGN(ch)!= 0 
fgt.c:	&& ALIGN(victim)!=0 && !IN_BATTLE(ch) && ch->fgt->challenge != 10)
fgt.c:      ch->pcdata->no_quit_pk = 4;
fgt.c:	&& ALIGN(victim)!=0 && !IN_BATTLE(ch) && ch->fgt->challenge != 10)
fgt.c:		ch->fgt->fighting = guarder;
fgt.c:    if (!IS_SET (ch->ced->fight_ops, F_GROUND)) {
fgt.c:  if (ch->fgt->ears > 9) {
fgt.c:  if (ch->wait > 2) return;
fgt.c:	&& ch->fgt->challenge != 10)
fgt.c:	&& ch->fgt->challenge != 10)
fgt.c:   (str_cmp(race_info[ch->pcdata->race].name, "minotaur") &&
fgt.c:   str_cmp(race_info[ch->pcdata->race].name, "gargoyle")))) {
fgt.c:    if ((ch->hold1 != NULL && (ch->hold1->pIndexData->item_type == ITEM_WEAPON)))
fgt.c:if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] > 0)
fgt.c:  chan += (ch->pcdata->learned[gsn_grapple]/4);
fgt.c:if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_tackle] > 0)
fgt.c:  chan += (ch->pcdata->learned[gsn_tackle]/4);
fgt.c:chan += ch->height / 5;
fgt.c:if (IS_PLAYER(ch) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur")
fgt.c:		  || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle")))
fgt.c:if ((number_range (0, xn) > chan && IS_AWAKE (victim)) || (number_range(1,70) > ch->pcdata->learned[gsn_tackle]))
fgt.c:ch->ced->ground_pos = 0;
fgt.c:ch->fgt->fighting = victim;
fgt.c:ch->ced->ground_pos = 0;
fgt.c:    if (ch->data_type==50)
fgt.c:	ch->fgt->fighting=NULL;
fgt.c:    ch_next = ch->next_fighting;
fgt.c:    ch->fgt->ears--;
fgt.c:    if (ch->fgt->ears <= 10)
fgt.c:	ch->fgt->ears = 2;
fgt.c:	if (ch->position == POSITION_BASHED)
fgt.c:	if (ch->position == POSITION_FIGHTING)
fgt.c:	    if (IS_SET (ch->pIndexData->act, ACT_FASTHUNT) &&
fgt.c:		ch->fgt->hunting != NULL &&
fgt.c:		ch->position == POSITION_STANDING &&
fgt.c:		ch->fgt->master != NULL &&
fgt.c:		ch->fgt->master->in_room == ch->in_room &&
fgt.c:		ch->fgt->master->fgt != NULL &&
fgt.c:		ch->fgt->master->fgt->fighting != NULL)
fgt.c:	      multi_hit (ch, ch->fgt->master->fgt->fighting, TYPE_UNDEFINED);
fgt.c:	ch->fgt->fighting = NULL;
fgt.c:	ch->position = POSITION_STANDING;
fgt.c:    if (IS_AWAKE (ch) && ch->in_room == victim->in_room)
fgt.c:	if (IS_MOB (ch) && IS_SET (ch->act, ACT_MOBSWITCH))
fgt.c:	    for (cir = ch->in_room->more->people; cir != NULL; cir = cir->next_in_room)
fgt.c:	if (ch->fgt->challenge == 10 && number_range (1, 7) == 2)
fgt.c:	if (ch != victim && ch->position == POSITION_GROUNDFIGHTING && victim->position == POSITION_GROUNDFIGHTING)
fgt.c:	else if (ch->position != POSITION_CASTING)
fgt.c:              if (ch->fgt->challenge == 10 && number_range (1, 5) == 2)
fgt.c:	      if (IS_MOB (ch) && ch->pIndexData && ch->pIndexData->opt)
fgt.c:                  if (number_range (1, 101) < ch->pIndexData->opt->warrior_percent)
fgt.c:                      if (number_range (1, 101) < ch->pIndexData->opt->cast_percent)
fgt.c:                              if (number_range (1, 2) == 1 && ch->pIndexData->opt->cast_spells[iil] != NULL)
fgt.c:                                  if ((spl = skill_lookup (ch->pIndexData->opt->cast_spells[iil], -1)) == NULL)
fgt.c:			  if(number_percent() < ch->pcdata->learned[gsn_guard])
fgt.c:			      ch->fgt->fighting = guarder;
fgt.c:    for (rch = ch->in_room->more->people; rch != NULL; rch = rch_next)
fgt.c:	rch_next = rch->next_in_room;
fgt.c:	    && IS_SET (rch->pcdata->act2, PLR_ASSIST)
fgt.c:	    && rch->position == POSITION_STANDING)
fgt.c:	if (IS_MOB (rch) && !IS_AFFECTED (rch, AFF_CHARM) && (rch->pIndexData == ch->pIndexData) &&LEVEL (rch) > 9 &&  can_see (rch, victim))
fgt.c:	    rch->fgt->fighting = victim;
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->pcdata->tickcounts > 3)
fgt.c:  if (ch->wait > 1)
fgt.c:  if (ch->position != POSITION_FIGHTING)
fgt.c:    if (ch->pcdata->learned[!gsn_circle] < 3)
fgt.c:  ch->pcdata->tickcounts = spl->mana;   /*13; */
fgt.c:  if (ch->wait > 1)
fgt.c:  if (ch->position != POSITION_CIRCLE && !used_flash)
fgt.c:   if (ch->pcdata->learned[gsn_circle] < 2)
fgt.c:  if (number_range (0, 104) < ch->pcdata->learned[gsn_circle])
fgt.c:        ch->pcdata->tickcounts = spl->casting_time;
fgt.c:  if (ch->in_room != victim->in_room)
fgt.c:      ch->fgt->fighting=NULL;
fgt.c:      ch->position=POSITION_STANDING;
fgt.c:  if (IS_MOB (ch) && (ch->pIndexData->mobtype == MOB_DUMMY))
fgt.c:  if (ch->position == POSITION_SLEEPING)
fgt.c:  if (ch->position <= POSITION_STUNNED && ch->position >= 0)
fgt.c:      ch->wait = 0;
fgt.c:  wield1 = ((ch->hold1 != NULL && ch->hold1->pIndexData->item_type ==
fgt.c:	     ITEM_WEAPON) ? ch->hold1 : NULL);
fgt.c:  wield2 = ((ch->hold2 != NULL && ch->hold2->pIndexData->item_type ==
fgt.c:	     ITEM_WEAPON) ? ch->hold2 : NULL);
fgt.c:      if (IS_PLAYER (ch) && ch->desc != NULL && FIGHTING (ch) == NULL)
fgt.c:	  write_to_descriptor2 (ch->desc, "\n\r", 2);
fgt.c:	  ch->fgt->fighting = victim;
fgt.c:	  ch->fgt->fighting = victim;
fgt.c:      ch->ced->attackers[0] = victim;
fgt.c:  for (vch = victim->in_room->more->people; vch != NULL; vch = vch->next_in_room)
fgt.c:  if (ch->fgt->combat_delay_count <= -5)
fgt.c:      ch->fgt->combat_delay_count--;
fgt.c:      if (ch->fgt->combat_delay_count < -8)
fgt.c:	ch->fgt->combat_delay_count = -1;
fgt.c:  if (ch->fgt->combat_delay_count > 0)
fgt.c:      ch->fgt->combat_delay_count--;
fgt.c:  if (ch->position != POSITION_BASHED && ch->fgt->combat_delay_count == 0)
fgt.c:      ch->fgt->combat_delay_count = -1;
fgt.c:      ch->fgt->ears = 2;
fgt.c:  if (IS_MOB (ch) && ch->position == POSITION_BASHED && ch->fgt->combat_delay_count < 1)
fgt.c:      ch->fgt->combat_delay_count = -5;
fgt.c:      ch->fgt->ears = 2;
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->fgt->combat_delay_count < 1 && ch->position == POSITION_STANDING)
fgt.c:      && ch->hit < ch->max_hit/2)
fgt.c:	  !IS_SET (ch->ced->fight_ops, F_GROUND) ||
fgt.c:	  ch->position == POSITION_GROUNDFIGHTING)
fgt.c:    if (number_range(1,4) == 2 && ch->pcdata->learned[gsn_unarmed] > 85)
fgt.c:    if (number_range(1,4) == 2 && ch->pcdata->stance != 2)
fgt.c:       (ch->pcdata->stance == 1 || ch->pcdata->stance == 4 || 
fgt.c:        ch->pcdata->stance == 7) )
fgt.c:    if (number_range(1,4) == 2 && ch->pcdata->stance == 4)
fgt.c:    if (number_range(1,4) == 2 && ch->pcdata->stance == 4)
fgt.c:      IS_SET(ch->pcdata->elemental_alignment, ELEMENTAL_ALIGN_FIRE) &&
fgt.c:      IS_SET(ch->pcdata->elemental_alignment, ELEMENTAL_ALIGN_EARTH) &&
fgt.c:      IS_SET(ch->pcdata->elemental_alignment, ELEMENTAL_ALIGN_AIR) &&
fgt.c:      IS_SET(ch->pcdata->elemental_alignment, ELEMENTAL_ALIGN_WATER) &&
fgt.c:      number_percent() < ch->pcdata->learned[571]*3/5)
fgt.c:    ((ch->pcdata->learned[gsn_second_attack]*3/5)); /* JRAJRA were 4 */
fgt.c:    ch->pcdata->learned[gsn_third_attack]/2); /* JRAJRA was 4 */
fgt.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:          if (ch->pcdata->stance == 1)
fgt.c:          else if (ch->pcdata->stance == 4)
fgt.c:          else if (ch->pcdata->stance == 5)
fgt.c:          else if (ch->pcdata->stance == 8)
fgt.c:      if (ch->pcdata->stance == 1)
fgt.c:      else if (ch->pcdata->stance == 4)
fgt.c:      else if (ch->pcdata->stance == 5)
fgt.c:      else if (ch->pcdata->stance == 8)
fgt.c:      return (ch->pcdata->learned[gsn_polearm] == -100 ? -30 : (-20+ch->pcdata->learned[gsn_polearm] / 7));
fgt.c:      return (ch->pcdata->learned[gsn_pierce] == -100 ? 0 : ch->pcdata->learned[gsn_pierce] / 4);
fgt.c:      return (ch->pcdata->learned[gsn_concussion] == -100 ? 0 : ch->pcdata->learned[gsn_concussion] / 5);
fgt.c:      return (ch->pcdata->learned[gsn_whip] == -100 ? 0 : ch->pcdata->learned[gsn_whip] / 4);
fgt.c:  else if (ch->pcdata->learned[gsn_slashing] == -100)
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 7);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 6);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 4);
fgt.c:      return ((ch->pcdata->learned[gsn_slashing] / 4) + ((get_curr_str (ch) - 5) / 2));
fgt.c:      return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:    return (ch->pcdata->learned[gsn_polearm] == -100 ? -30 : (-20+ch->pcdata->learned[gsn_polearm] / 7));
fgt.c:    return (ch->pcdata->learned[gsn_pierce] == -100 ? 0 : ch->pcdata->learned[gsn_pierce] / 4);
fgt.c:    return (ch->pcdata->learned[gsn_concussion] == -100 ? 0 : ch->pcdata->learned[gsn_concussion] / 5);
fgt.c:    return (ch->pcdata->learned[gsn_whip] == -100 ? 0 : ch->pcdata->learned[gsn_whip] / 4);
fgt.c:  else if (ch->pcdata->learned[gsn_slashing] == -100)
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 7);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 6);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:        return (ch->pcdata->learned[gsn_slashing] / 4);
fgt.c:    return ((ch->pcdata->learned[gsn_slashing] / 4) + ((get_curr_str (ch) - 5) / 2));
fgt.c:    return (ch->pcdata->learned[gsn_slashing] / 5);
fgt.c:  if (IS_MOB (ch) && (ch->pIndexData->mobtype == MOB_DUMMY)) {
fgt.c:  if(ch->pIndexData->mobtype == MOB_DUMMY) send_to_char("Its a dummy\n\r",victim);
fgt.c:  if (ch->in_room != victim->in_room || victim->position == POSITION_DEAD)
fgt.c:      ch->fgt->fighting=NULL;
fgt.c:      ch->position=POSITION_STANDING;
fgt.c:	      free_string (ch->fgt->hunting);
fgt.c:	      ch->fgt->hunting = NULL;
fgt.c:	  ch->fgt->hunting = str_dup (NAME (victim));
fgt.c:      ch->fgt->riding = NULL;
fgt.c:          if (ch-> hit > dam)
fgt.c:    (IS_MOB(ch) ? ch->pIndexData->hitroll : (ch->pcdata->learned[gsn_accuracy] > 0 ? ch->pcdata->learned[gsn_accuracy]/8 : 0));
fgt.c:      dam += ch->pIndexData->damroll/2;
fgt.c:      if (is_member(ch, GUILD_MONK) && ch->pcdata->stance == 7
fgt.c:        int monkbonus = ch->pcdata->learned[gsn_unarmed] - 68;
fgt.c:        if (ch->pcdata->stance == 3)
fgt.c:        else if (ch->pcdata->stance == 6)
fgt.c:        else if (ch->pcdata->stance == 7)
fgt.c:        else if (ch->pcdata->stance == 2)
fgt.c:        else if (ch->pcdata->stance == 5)
fgt.c:  if (is_member(ch, GUILD_MONK) && IS_SET(ch->act, PLR_HAS_SHIELD))
fgt.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:        if (ch->pcdata->alignment == fch->pcdata->alignment)
fgt.c:        else if (fch->pcdata->alignment > 0)
fgt.c:      if (ch->pcdata->learned[gsn_enhanced_damage] > 0)
fgt.c:	  roll = number_range(0, ch->pcdata->learned[gsn_enhanced_damage]);
fgt.c:      if (IS_PLAYER (ch) && dif > 4 && number_range (1, 100) < ch->pcdata->learned[gsn_penetration])
fgt.c:  if (ch->in_room->sector_type == SECT_ASTRAL)
fgt.c:           dam = dam * (race_info[ch->pcdata->race].backstab_percent +
fgt.c:              align_info[ch->pcdata->alignment].backstab_percent)/100;
fgt.c:  if (number_range(1,38) == 2 && ch->position != POSITION_BASHED && victim->position != POSITION_BASHED)
fgt.c:	      if (ch->hit > 7)
fgt.c:	  if (ch->hit > 10)
fgt.c:        dam = (dam*(race_info[ch->pcdata->race].backstab_percent +
fgt.c:	  align_info[ch->pcdata->alignment].backstab_percent))/100;
fgt.c:  if (number_range (1, 5) == 1 && ch->move > 0) {
fgt.c:  if (ch->pIndexData->mobtype == MOB_HUMAN
fgt.c:      || ch->pIndexData->mobtype == MOB_DWARF
fgt.c:      || ch->pIndexData->mobtype == MOB_ELF
fgt.c:      || ch->pIndexData->mobtype == MOB_GIANT
fgt.c:      || ch->pIndexData->mobtype == MOB_DRAGON)
fgt.c:  if (ch->pIndexData->mobtype == MOB_GHOST)
fgt.c:  if (ch->pIndexData->mobtype == MOB_DRAGON)
fgt.c:  if (ch->pIndexData->mobtype == MOB_GHOST)
fgt.c:  if (ch->in_room != victim->in_room) /* Not a spell or ranged */
fgt.c:	  ch->fgt->fighting=NULL;
fgt.c:	  ch->position=POSITION_STANDING;
fgt.c:  if (IS_PLAYER(ch) && LEVEL(ch) >= IMM_LEVEL && LEVEL(ch) < MAX_LEVEL && (!ch->in_room->area || ch->in_room->area->open == 1))
fgt.c:      ch->fgt->fighting = NULL;
fgt.c:      ch->wait = 0;
fgt.c:  if (ch->in_room == victim->in_room)
fgt.c:      if (FIGHTING (victim) == ch && FIGHTING (ch) != victim && !(victim->position == POSITION_GROUNDFIGHTING &&   ch->position == POSITION_GROUNDFIGHTING) && dt != gsn_kick &&  victim->position != POSITION_CASTING && victim->position != POSITION_BASHED
fgt.c:	  && ch->position != POSITION_CASTING  && ch->position != POSITION_BASHED)
fgt.c:	      ch->fgt->fighting = victim;
fgt.c:      if (ch->position == POSITION_GROUNDFIGHTING && victim->position != POSITION_GROUNDFIGHTING)
fgt.c:	      if(ch->pcdata->no_quit_pk < MOB_QUIT_TIMER)
fgt.c:		ch->pcdata->no_quit_pk = MOB_QUIT_TIMER;
fgt.c:	      ch->pcdata->no_quit_pk = PK_QUIT_TIMER;
fgt.c:  if (can_yell (victim) && victim->hit < 8 && victim->max_hit > 100 && ch->hit > 60 && dt > 300)
fgt.c:	ch->pcdata->voting_on += gn;
fgt.c:      REMOVE_BIT (ch->affected_by, AFF_HIDE);
fgt.c:      REMOVE_BIT (ch->more_affected_by, AFF_CHAMELEON);
fgt.c:      if ((IS_MOB (ch) && number_percent () < 20) && ch->move > 10)
fgt.c:	  && ch->move > 10)
fgt.c:  if(ch->in_room == victim->in_room)
fgt.c:	  ch->copper++;
fgt.c:      ch->wait = 0;
fgt.c:	  ch->fgt->fighting = NULL;
fgt.c:      ch->wait = 0;
fgt.c:        if(victim->pcdata->no_quit_pk >= 5 && IS_MOB(ch) && !victim->in_room->area->homeland && !IS_SET(ch->act, ACT_AGGRESSIVE)
fgt.c:           && !IS_SET(ch->pIndexData->act4, ACT4_KILL_OPP) )
fgt.c:             for (gch = victim->in_room->more->people; gch != NULL; gch=gch->next_in_room)
fgt.c:	if (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT))
fgt.c:	else if (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD))
fgt.c:	if (IS_SET (ch->pcdata->act2, PLR_AUTOSAC))
fgt.c:	if (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT)
fgt.c:    ch->wait = 0;
fgt.c:if (ch->in_room && ((ch->in_room->vnum < 111 && ch->in_room->vnum > 95)||
fgt.c:   ch->in_room->vnum == 112))
fgt.c:for (tch = victim->in_room->more->people; tch != NULL; tch = tch->next_in_room)
fgt.c:  if (IS_PLAYER(tch) && LEVEL(tch) > IMM_LEVEL  && IS_SET (tch->act, PLR_HOLYPEACE))
fgt.c:	  ch->fgt->fighting = NULL;
fgt.c:  ch->fgt->fighting = victim;
fgt.c:  if (ch->position != POSITION_GROUNDFIGHTING && ch->position != POSITION_BASHED)
fgt.c:      NEW_POSITION(ch->fgt->fighting,POSITION_STANDING);
fgt.c:	  ch->fgt->fighting->fgt->fighting = NULL;
fgt.c:      fch_next = fch->next_fighting;
fgt.c:          fch->fgt->fighting = NULL;
fgt.c:          if (fch->position == POSITION_BASHED) continue;
fgt.c:          fch->fgt->combat_delay_count = -1;
fgt.c:  if (ch->fgt)
fgt.c:      ch->fgt->fighting = NULL;
fgt.c:  if (ch->is_undead)
fgt.c:  switch (ch->pIndexData->mobtype)
fgt.c:  if (ch->in_room && ch->in_room->vnum < 1000) return;
fgt.c:  if (ch->wait > 2)
fgt.c:  ch->wait+= 5;
fgt.c:if (ch->pcdata->learned[gsn_bash] < 10)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->in_room->sector_type == SECT_UNDERWATER)
fgt.c:  if ((FIGHTING (ch) == NULL || ch->position != POSITION_FIGHTING) && (argy == "" || argy[0] == '\0'))
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:    chan = ((ch->pcdata->learned[gsn_bash]) + (get_curr_str (ch) * 3)) -tmpi;
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_bash] < 5)
fgt.c:    if ((number_percent() < ch->pcdata->learned[gsn_smash]) &&
fgt.c:    ( ch->pcdata->learned[gsn_smash] > 20))
fgt.c:       ch->fgt->ears = 9 + (s->casting_time * 2);
fgt.c:       ch->fgt->ears = 10 + (s->casting_time *2);
fgt.c:    if((IS_MOB(ch) && number_range(1,10) == 4) ||(IS_PLAYER(ch) && is_member(ch, GUILD_BATTLEMASTER) && is_member(ch, GUILD_WARRIOR) && ch->pcdata->learned[gsn_smash] > 9 && number_percent() < ch->pcdata->learned[gsn_smash]))
fgt.c:  if (ch->in_room->sector_type == SECT_UNDERWATER)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->wait > 2) return;
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch_next)
fgt.c:      fch_next = fch->next_in_room;
fgt.c:      if (IS_MOB (fch) && IS_SET (fch->pIndexData->act3, ACT3_GUARD_MOB)
fgt.c:          && victim->pIndexData != NULL && victim->pIndexData->vnum == fch->pIndexData->guard)
fgt.c:  if (ch->position == POSITION_FIGHTING && FIGHTING (ch) != victim)
fgt.c:  if (ch->fgt->combat_delay_count >= 0)
fgt.c:      ch->fgt->combat_delay_count = -1;
fgt.c:if (IS_MOB (ch) && IS_SET (ch->pIndexData->act4, ACT4_KILLGLADIATOR))
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->move < pow.flurry_mps)
fgt.c:  victim = ch->fgt->fighting;
fgt.c:    ||(ch->pcdata->learned[gsn_flurry] > 0 && number_range(1,170) <
fgt.c:     ch->pcdata->learned[gsn_flurry])))
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:      if (number_percent() > ch->pcdata->learned[gsn_flash])
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    ch->pcdata->tickcounts = spl->mana;
fgt.c:  strcpy (ch->pcdata->temp->temp_string, argy);
fgt.c:  if (ch->position == POSITION_FIGHTING)
fgt.c:    ch->pcdata->tickcounts = spl->casting_time;
fgt.c:      || (IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_backstab]))
fgt.c:  if (!ch || !ch->in_room) return;
fgt.c:  if ((ch->in_room->vnum < 108 && ch->in_room->vnum > 97)|| ch->position < POSITION_GROUNDFIGHTING)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->tickcounts > 1)
fgt.c:  if (ch->wait > 0)
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:      if (victim->in_room != ch->in_room)
fgt.c:          for (fch = victim->in_room->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:               if (fch->fgt->fighting == ch)
fgt.c:                 fch->fgt->fighting = NULL;
fgt.c:	  ch->fgt->fighting = NULL;
fgt.c:	  ch->position = POSITION_STANDING;
fgt.c:	  ch->wait = 0;
fgt.c:      if (ch->position == POSITION_BASHED)
fgt.c:      check_room_more(ch->in_room);
fgt.c:      for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:              ch->fgt->fighting = fch;
fgt.c:          ch->wait = 0;
fgt.c:      if (ch->position == POSITION_FIGHTING)
fgt.c:  room_one = ch->in_room;
fgt.c:  if((pexit = ch->in_room->exit[door]) != NULL
fgt.c:      check_fgt (ch->fgt->riding);
fgt.c:      ch->fgt->riding->fgt->mounted_by = NULL;
fgt.c:      ch->fgt->riding = NULL;
fgt.c:      check_fgt (ch->fgt->mounted_by);
fgt.c:      ch->fgt->mounted_by->fgt->riding = NULL;
fgt.c:      ch->fgt->mounted_by = NULL;
fgt.c:      if (ch->data_type == 50) return;
fgt.c:      ch->fgt->fighting = NULL;
fgt.c:      ch->position = POSITION_STANDING;
fgt.c:      ch->fgt->combat_delay_count = -1;
fgt.c:      for (fch = room_one->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:	  if (fch->fgt->fighting == ch)
fgt.c:	      fch->fgt->fighting = NULL;
fgt.c:              fch->position = POSITION_STANDING;
fgt.c:      if(ch->in_room != room_two)
fgt.c:	  room_two = ch->in_room;
fgt.c:          if (ch->data_type == 50) return;
fgt.c:	  if (ch->fgt)
fgt.c:	    ch->fgt->fighting = NULL;
fgt.c:	  ch->position = POSITION_STANDING;
fgt.c:          ch->fgt->combat_delay_count = -1;
fgt.c:if (FIGHTING(ch) != NULL || ch->position != POSITION_STANDING)
fgt.c:if (ch->pcdata->learned[gsn_guard] < 50)
fgt.c:    if (ch->pcdata->guarded_by[i] != NULL)
fgt.c:if(ch->pcdata->guarding != NULL)
fgt.c:	ch->pcdata->guarding = victim;
fgt.c:  if(ch->pcdata->guarding == NULL)
fgt.c:  if (FIGHTING(ch) != NULL || ch->position != POSITION_STANDING)
fgt.c:  victim = (CHAR_DATA *) ch->pcdata->guarding;
fgt.c:  ch->pcdata->guarding = NULL;
fgt.c:  if (ch->position != POSITION_STANDING && ch->position != POSITION_FIGHTING)
fgt.c:  if (fch->position != POSITION_FIGHTING)
fgt.c:      if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  if (IS_PLAYER (ch) && number_percent () > ch->pcdata->learned[gsn_rescue])
fgt.c:  temp2 = fch->fgt->combat_delay_count;
fgt.c:      if (fch->ced->attackers[jj] == victim)
fgt.c:	fch->ced->attackers[jj] = NULL;
fgt.c:  fch->fgt->combat_delay_count = temp2;
fgt.c:  fch->fgt->combat_delay_count = temp2;
fgt.c:  if (ch->move < 1) {
fgt.c:  if (ch->wait > 2)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
fgt.c:    if (fch->pcdata->alignment > 0 && fch->pcdata->alignment != ch->pcdata->alignment)
fgt.c:      chance += (ch->pcdata->learned[gsn_tornado] + ch->pcdata->learned[gsn_kick])/2;
fgt.c:	  if (ch->in_room != victim->in_room || victim->data_type == 50)
fgt.c:  if (ch->move < 1) {
fgt.c:  if (ch->wait > 2)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  chance += ch->pcdata->learned[gsn_buddha] - 10;
fgt.c:    if (ch->in_room != victim->in_room || victim->data_type == 50)
fgt.c:  if (ch->wait > 2)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:      chance += ch->pcdata->learned[gsn_nerve]/2;
fgt.c:	  if (ch->in_room != victim->in_room || victim->data_type == 50)
fgt.c:  if (ch->wait > 2)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:number_percent()<(ch->pcdata->learned[gsn_double_kick]/5)) ||
fgt.c:      chance += ch->pcdata->learned[gsn_kick];
fgt.c:	  if (ch->in_room != victim->in_room || victim->data_type == 50)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->position != POSITION_FIGHTING)
fgt.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[580] < 0)
fgt.c:  if (ch->move < 0)
fgt.c:  if (ch->hit > ch->max_hit/2)
fgt.c:      int learned = ch->pcdata->learned[580];
fgt.c:  if (ch->wait > 4)
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:    victim = ch->fgt->fighting;
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:  if (ch->position == POSITION_BASHED)
fgt.c:  if (ch->position == POSITION_GROUNDFIGHTING)
fgt.c:  if (number_percent() >= ch->pcdata->learned[gsn_impale])
fgt.c:  if(LEVEL(ch) >= 80 && number_range(1,10) == 1 && ch->position == POSITION_FIGHTING) {
fgt.c:  if (ch->wait > 2)
fgt.c:  if (IS_PLAYER (ch) && ch->pcdata->tickcounts > 3)
fgt.c:  if (IS_MOB (ch) || (IS_PLAYER (ch) && percent < ch->pcdata->learned[gsn_disarm] * 2 / 3))
fgt.c:  	if (ch->in_room && ch->in_room->vnum >= BATTLEGROUND_START_VNUM &&
fgt.c:		ch->in_room->vnum <= BATTLEGROUND_END_VNUM)
fgt.c:	if (ch->in_room && ch->in_room->vnum >= (BATTLEGROUND_START_VNUM + bg_multiplier) && ch->in_room->vnum <= (BATTLEGROUND_END_VNUM + bg_multiplier))
fgt.c:  if (ch->pcdata->no_quit_pk < 5 && number_range(1,15) != 10)
fgt.c:  if (ch->pcdata->learned[gsn] < 40)
fgt.c:  if (ch->pcdata->learned[gsn] < 50 && number_range (1, vall[0]) == 5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 60 && number_range (1, vall[1]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 70 && number_range (1, vall[2]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 80 && number_range (1, vall[3]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 90 && number_range (1, vall[4]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 92 && number_range (1, vall[5]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 94 && number_range (1, vall[6]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 96 && number_range (1, vall[7]) ==5)
fgt.c:  else if (ch->pcdata->learned[gsn] < 98 && number_range (1, vall[8]) ==5)
fgt.c:  if (learnyes && ch->pcdata->learned[gsn] < 100)
fgt.c:      ch->pcdata->learned[gsn]++;
fgt.c:  if (ch->fgt && ch->fgt->fighting && ch->fgt->fighting->fgt &&
fgt.c:      ch->fgt->fighting->fgt->fighting == ch)
fgt.c:  if (ch->fgt)
fgt.c:      ch->fgt->fighting = NULL;
fgt.c:  ch->position = POSITION_STANDING;
fgt.c:  if (ch->position != POSITION_STANDING)
fgt.c:  for(obj = ch->carrying; obj != NULL; obj = obj->next_content)
fgt.c:  if (ch->position != POSITION_STANDING)
fgt.c:/*  victim = get_char_room_near (ch, ch->in_room, range, argy); */
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if (ch->position != POSITION_STANDING)
fgt.c:  if ((victim = get_char_room_near (ch, ch->in_room, range, argy)) == NULL)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:  strcpy(ch->pcdata->temp->temp_string, argy);
fgt.c:  ch->pcdata->tickcounts = 10+(((I_WEAPON *)bow->more)->ammo_type)*4;
fgt.c:  if (ch->position != POSITION_SHOOTING)
fgt.c:  if ((victim = get_char_room_near (ch, ch->in_room, range, argy)) == NULL)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:		&& ch->fgt->challenge != 10)
fgt.c:  if (number_range(1,110) >  ch->pcdata->learned[gsn_shoot])
fgt.c:  if (ch->fgt->ears > 9)
fgt.c:  if ((victim = get_char_room_near (ch, ch->in_room, range, arg2)) == NULL)
fgt.c:		&& ch->fgt->challenge != 10)   {
fgt.c:		&& ch->fgt->challenge != 10) {
fgt.c:  if (number_range(1,110) > ch->pcdata->learned[gsn_throw])
give.c:  if (ch->move < 10)
give.c:  oldroom = ch->in_room;
give.c:    for (rch = oldroom->more->people; rch != NULL; rch = rch->next_in_room)
give.c:  obj_to (obj, ch->in_room);
give.c:  for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
give.c:  if (ch->fgt && ch->fgt->ears > 9)
give.c:     if (FIGHTING(ch)->in_room != ch->in_room)
give.c:          ch->fgt->fighting = NULL;
give.c:  if (ch->position != POSITION_STANDING && ch->position != POSITION_RESTING && ch->position != POSITION_MEDITATING)
give.c:  if (ch->position == POSITION_MEDITATING)
give.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch_next)
give.c:      fch_next = fch->next_in_room;
give.c:      if (IS_MOB (fch) && IS_SET (fch->pIndexData->act3, ACT3_GUARD_ITEM)
give.c:	  && obj->pIndexData->vnum == fch->pIndexData->guard)
give.c:    OOSTR(obj, short_descr), NAME(ch), ch->in_room->vnum);
give.c:	SET_BIT(ch->act, PLR_HAS_BOAT);
give.c:    check_room_more (ch->in_room);
give.c:      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
give.c:	      if (ch->in_room->more->gold > 0)
give.c:		  sprintf(bah, "You pick up \x1b[1;33m%d\x1b[0;37m gold.\n\r", ch->in_room->more->gold);
give.c:		  ch->gold += ch->in_room->more->gold;
give.c:		  ch->in_room->more->gold = 0;
give.c:	      if (ch->in_room->more->copper > 0)
give.c:ch->in_room->more->copper);
give.c:		  ch->copper += ch->in_room->more->copper;
give.c:		  ch->in_room->more->copper = 0;
give.c:	  obj = get_obj_list (ch, arg1, ch->in_room->more->contents);
give.c:	  if (ch->in_room->more->gold > 0)
give.c:	      sprintf(bah, "You pick up \x1b[1;33m%d\x1b[0;37m gold.\n\r", ch->in_room->more->gold);
give.c:	      ch->gold += ch->in_room->more->gold;
give.c:	      ch->in_room->more->gold = 0;
give.c:	  if (ch->in_room->more->copper > 0)
give.c:ch->in_room->more->copper);
give.c:	      ch->copper += ch->in_room->more->copper;
give.c:	      ch->in_room->more->copper = 0;
give.c:	  for (obj = ch->in_room->more->contents; obj != NULL; obj = obj_next)
give.c:               if (ch->pcdata->no_quit_pk < 4);
give.c:		ch->pcdata->no_quit_pk = 4;/*JRAJRA*/
give.c:	      ch->copper += cnt->money;
give.c:	      ch->copper += cnt->money;
give.c:  check_clear_more (ch->in_room);
give.c:      cnt->money += ch->copper;
give.c:      ch->copper = 0;
give.c:	    REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
give.c:		    REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:  if (!ch->in_room || !ch->in_room->more) return;
give.c:  if (IS_PLAYER(ch) && ch->pcdata->no_quit_pk >= 6)
give.c:      for (rch = ch->in_room->more->people; rch != NULL; rch =
give.c:rch->next_in_room)
give.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
give.c:	  ch->in_room->more->copper += ch->copper;
give.c:	  ch->in_room->more->gold += ch->gold;
give.c:      ch->gold = 0;
give.c:      ch->copper = 0;
give.c:      if (ch->gold < amount)
give.c:      ch->gold -= amount;
give.c:      if (ch->in_room->sector_type != SECT_WATER_SWIM && ch->in_room->sector_type != SECT_WATER_NOSWIM &&
give.c:	ch->in_room->more->gold += amount;
give.c:      if (ch->copper < amount)
give.c:      ch->copper -= amount;
give.c:      if (ch->in_room->sector_type != SECT_WATER_SWIM && ch->in_room->sector_type != SECT_WATER_NOSWIM &&
give.c:	ch->in_room->more->copper += amount;
give.c:  if ((str_cmp (arg, "all") && str_prefix ("all.", arg)) || (ch->fgt && ch->fgt->combat_delay_count == 9))
give.c:	  (ch->fgt && ch->fgt->combat_delay_count == 9))
give.c:	  ch->fgt->combat_delay_count = 0;
give.c:	  if (ch->in_room->sector_type == SECT_WATER_SWIM || ch->in_room->sector_type == SECT_WATER_NOSWIM)
give.c:	  obj_to (obj, ch->in_room);
give.c:		REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:	  if (number_percent () > ch->pcdata->learned[gsn_hide] + ch->pcdata->plus_hide)
give.c:      if (obj->pIndexData->item_type != ITEM_BOAT && (ch->in_room->sector_type == SECT_WATER_SWIM || ch->in_room->sector_type == SECT_WATER_NOSWIM))
give.c:	  obj_to (obj, ch->in_room);
give.c:		REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:			  sprintf(tmp,"%d",ch->in_room->vnum);
give.c:	  if (IS_SET(ch->in_room->room_flags, ROOM_DROPSCRIPT))
give.c:		    if (ch->in_room->vnum == tr->attached_to_room)
give.c:			s->room = ch->in_room;
give.c:	      if (ch->in_room->sector_type != SECT_WATER_SWIM && ch->in_room->sector_type != SECT_WATER_NOSWIM &&
give.c:		  ch->in_room->more->gold += ch->gold;
give.c:		  ch->in_room->more->copper += ch->copper;
give.c:	      ch->gold = 0;
give.c:	      ch->copper = 0;
give.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
give.c:	      if (obj->pIndexData->item_type != ITEM_BOAT && (ch->in_room->sector_type == SECT_WATER_SWIM || ch->in_room->sector_type == SECT_WATER_NOSWIM))
give.c:				  sprintf(tmp,"%d",ch->in_room->vnum);
give.c:		  if (IS_SET(ch->in_room->room_flags, ROOM_DROPSCRIPT))
give.c:			    if (ch->in_room->vnum == tr->attached_to_room)
give.c:				s->room = ch->in_room;
give.c:		  obj_to (obj, ch->in_room);
give.c:			REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:      if (ch->gold < amount)
give.c:      ch->gold -= amount;
give.c:      if (ch->copper < amount)
give.c:      ch->copper -= amount;
give.c:   ch->num_in_group++;
give.c:    OOSTR(obj, short_descr), NAME(ch), NAME(victim), ch->in_room->vnum);
give.c:	REMOVE_BIT(ch->act, PLR_HAS_BOAT);
give.c:      for (fountain = ch->in_room->more->contents; fountain != NULL;
give.c:      for (obj = ch->in_room->more->contents; obj; obj = obj->next_content)
give.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 10)
give.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_THIRST] < 7)
give.c:  if (IS_PLAYER (ch) && ch->pcdata->condition[COND_THIRST] > 40)
give.c:	  ch->pcdata->condition[COND_THIRST] = 48;
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_DRUNK] > 10)
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_FULL] > 40)
give.c:	    if (IS_PLAYER (ch) && ch->pcdata->condition[COND_THIRST] > 40)
give.c:      if (IS_PLAYER (ch) &&  ch->pcdata->condition[COND_FULL] > 40)
give.c:	--ch->in_room->light;
give.c:      if (ch->in_room->light < 0) ch->in_room->light = 0;
give.c:	    conditiona = ch->pcdata->condition[COND_FULL];
give.c:	    if (conditiona < 4 && ch->pcdata->condition[COND_FULL] > 4)
give.c:	    else if (ch->pcdata->condition[COND_FULL] > 40)
give.c:  if (IS_MOB (ch) && (pShop = ch->pIndexData->pShop) != NULL)
give.c:	   if (IS_SET(pObj->value[10], guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
give.c:  if ((objh1 = ch->hold1) != NULL)
give.c:  if ((objh2 = ch->hold2) != NULL)
give.c:      ch->hold2 = NULL;
give.c:      ch->hold1 = objh2;
give.c:      ch->hold1 = NULL;
give.c:      ch->hold2 = objh1;
give.c:      ch->hold1 = objh2;
give.c:      ch->hold2 = objh1;
give.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
give.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
give.c:      if (ch->move > ch->max_move)
give.c:  if (ch->move > ch->max_move)
give.c:  if (ch->hit > ch->max_hit)
give.c:    ch->hit = ch->max_hit;
give.c:  obj = get_obj_list (ch, arg, ch->in_room->more->contents);
give.c:  if (ch->pcdata->no_quit_pk < 5 && get_curr_int(ch) > 21 && get_curr_wis(ch) > 21
give.c:      ch->copper++;
give.c:      for (vch = ch->in_room->more->people; vch; vch = vch_next)
give.c:	  vch_next = vch->next_in_room;
give.c:  if (ch->pcdata->learned[(bk->teaches)] > 25)
give.c:      ch->pcdata->learned[(bk->teaches)] = 26;
give.c:  if (ch->pcdata->alignment == 0)
give.c:  if (IS_PLAYER (ch) && (ch->fgt->in_battle || ch->fgt->challenge == 10))
give.c:  if (ch->pcdata->alignment == victim->pcdata->alignment)
give.c:  if (victim->pcdata->alignment == 0 && ch->pcdata->alignment != 0)
give.c:  if (ch->pcdata->alignment == 0 && victim->pcdata->alignment != 0)
give.c:	  || (IS_PLAYER (ch) && ch->pcdata->learned[gsn_steal] < 60)
give.c:		SET_BIT(ch->act, PLR_HAS_BOAT);
give.c:	  if (ch->in_room->light < 0) ch->in_room->light = 0;
give.c:	  ch->in_room->light++;
give.c:	    ch->pcdata->light++;
give.c:      ch->in_room->light--;
give.c:      if (ch->in_room->light < 0) ch->in_room->light = 0;
give.c:	  ch->pcdata->light--;
give.c:	  if (ch->pcdata->light < 0) ch->pcdata->light = 0;
give.c:  if (number_range (0, 100) > ch->pcdata->learned[gsn_butcher])
give.c:      obj_to (steak, ch->in_room);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	  ch->ced->ground_pos = 0;      
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_1 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_3)
grnd.c:	  ch->ced->ground_pos = 0;	  
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	  ch->ced->ground_pos = 0;
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	  ch->ced->ground_pos = 0;
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:       ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	   ch->ced->ground_pos = 0;
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:   if (ch->ced->ground_pos == FP_CHOKE_3 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_1 ||
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	  ch->ced->ground_pos = 0;	  
grnd.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] != -100)
grnd.c:    dam += (ch->pcdata->learned[gsn_grapple]/7);
grnd.c:  if (IS_PLAYER(ch) &&  (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam += 3;
grnd.c:  if (IS_PLAYER(victim) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle"))) dam /= 1;
grnd.c:      ch->wait = 0;
grnd.c:      if (victim->position != POSITION_GROUNDFIGHTING || ch->position != POSITION_GROUNDFIGHTING)
grnd.c:  ch->fgt->fighting = victim;
grnd.c:  if (ch->ced->ground_pos == FP_CHOKE_1 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_2 || 
grnd.c:      ch->ced->ground_pos == FP_CHOKE_3)
grnd.c:	(get_curr_str(ch) + get_curr_dex(ch) + ch->height /5 + 
grnd.c:	  if (ch->ced->ground_pos == FP_CHOKE_3)
grnd.c:	  else if (ch->ced->ground_pos == FP_CHOKE_2)
grnd.c:	    ch->ced->ground_pos = FP_CHOKE_3;
grnd.c:	  else if (ch->ced->ground_pos == FP_CHOKE_1)
grnd.c:	    ch->ced->ground_pos = FP_CHOKE_2;
grnd.c:      victim->hit -= (get_curr_str(ch) + (IS_AUGMENTED(ch, AUG_FACE_SPIKE) ? 20 : 0) + ((IS_PLAYER(ch) && ch->pcdata->learned[gsn_grapple] > 0)  ?   ch->pcdata->learned[gsn_grapple]/8 : 0));
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_HEADBUTT )) num_options++;
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_JUJI )) num_options++;
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_ELBOW )) num_options++;
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_KNEE )) num_options++;
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_BITE )) num_options++;
grnd.c:	  if (IS_SET(ch->ced->fight_ops, F_CHOKE )) num_options++;
grnd.c:      if (!done_hit && IS_SET(ch->ced->fight_ops, F_HEADBUTT))
grnd.c:      if (!done_hit && IS_SET (ch->ced->fight_ops, F_ELBOW))
grnd.c:      if (!done_hit && IS_SET (ch->ced->fight_ops, F_BITE))
grnd.c:      if (!done_hit && IS_SET (ch->ced->fight_ops, F_JUJI))	
grnd.c:      if (!done_hit && IS_SET (ch->ced->fight_ops, F_KNEE))
grnd.c:      if(!done_hit && IS_SET(ch->ced->fight_ops, F_CHOKE))
grnd.c:	  if ((num_used == hit_type) && (number_range(1,6) == 2 || (IS_PLAYER(ch) && (!str_cmp(race_info[ch->pcdata->race].name, "minotaur") || !str_cmp(race_info[ch->pcdata->race].name, "gargoyle")) && number_range(1,2) == 2)))
grnd.c:      ch->wait = 0;      
grnd.c:	  ch->hit = ch->max_hit;	  
grnd.c:      ch->wait = 0;      
grnd.c:	   if (IS_SET (ch->pcdata->act2, PLR_AUTOLOOT))
grnd.c:	   else if (IS_SET (ch->pcdata->act2, PLR_AUTOGOLD))
grnd.c:	   if (IS_SET (ch->pcdata->act2, PLR_AUTOSAC))	    
grnd.c:	   if (IS_SET (ch->pcdata->act2, PLR_AUTOSPLIT) 
grnd.c:       ch->wait = 0;
grnd.c:    if (ch->pIndexData->mobtype == MOB_HUMAN 
grnd.c:	||ch->pIndexData->mobtype == MOB_DWARF 
grnd.c:	||ch->pIndexData->mobtype == MOB_ELF 
grnd.c:	||ch->pIndexData->mobtype == MOB_GNOME 
grnd.c:	||ch->pIndexData->mobtype == MOB_GIANT 
grnd.c:	||ch->pIndexData->mobtype == MOB_ORC 
grnd.c:	||ch->pIndexData->mobtype == MOB_TROLL
grnd.c:	||ch->pIndexData->mobtype == MOB_OGRE 
grnd.c:	||ch->pIndexData->mobtype == MOB_SPRITE 
grnd.c:	||ch->pIndexData->mobtype == MOB_DRACONIAN
grnd.c:	||ch->pIndexData->mobtype == MOB_HOBGOBLIN
grnd.c:	||ch->pIndexData->mobtype == MOB_MINOTAUR
grnd.c:	||ch->pIndexData->mobtype == MOB_KENDER
grnd.c:	||ch->pIndexData->mobtype == MOB_SKAVEN
grnd.c:	||ch->pIndexData->mobtype == MOB_ILLITHID
grnd.c:	||ch->pIndexData->mobtype == MOB_TROGLODYTE
grnd.c:	||ch->pIndexData->mobtype == MOB_GNOLL
grnd.c:	||ch->pIndexData->mobtype == MOB_HOBBIT)
guild.c:  if (IS_SET (ch->pcdata->guilds, guildflag))
guild.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
guild.c:      if (!IS_SET (ch->pcdata->guilds, (mob->pIndexData->act3)))
guild.c:	      ch->pcdata->stat[guild_data[i].stat_modified]--;
guild.c:	      REMOVE_BIT(ch->pcdata->guilds, guild_data[i].player_guild_bit);
guild.c:      if (!IS_SET(ch->pcdata->guilds, oldnum))
guild.c:      if (ch->pcdata->bank < 60000)
guild.c:      if(ch->pcdata->warpoints < 100)
guild.c:      ch->pcdata->bank -= 60000;
guild.c:      ch->pcdata->warpoints -= 100;
guild.c:	      ch->pcdata->stat[guild_data[i].stat_modified]--;
guild.c:	      REMOVE_BIT(ch->pcdata->guilds, guild_data[i].player_guild_bit);
guild.c:	      ch->pcdata->stat[guild_data[i].stat_modified]++;
guild.c:	      SET_BIT(ch->pcdata->guilds, guild_data[i].player_guild_bit);
guild.c:      if (IS_SET (ch->pcdata->guilds, mob->pIndexData->act3 ))
guild.c:      if (ch->pcdata->remort_times < remorts)
guild.c:      if (ch->pcdata->warpoints < wps)
guild.c:      if (ch->pcdata->killpoints < kps)
guild.c:      ch->pcdata->warpoints -= wps;
guild.c:      ch->pcdata->killpoints -= kps;
guild.c:	      ch->pcdata->stat[guild_data[i].stat_modified]++;
guild.c:	      SET_BIT(ch->pcdata->guilds, guild_data[i].player_guild_bit);
guild.c:	  sprintf(buf, "-->You are level %d, with %d remorts, %ld warpoints, and %d killpoints.\n\r", LEVEL(ch), ch->pcdata->remort_times, ch->pcdata->warpoints, ch->pcdata->killpoints);
help.c:	  int pp = ch->position;
help.c:	  ch->position = POSITION_STANDING;
help.c:	  ch->position = pp;
hnd.c:  if (ch->fgt)
hnd.c:      if (ch->fgt->hunting)
hnd.c:	free_string (ch->fgt->hunting);
hnd.c:      if (ch->fgt->next_command) {
hnd.c:	free(ch->fgt->next_command);
hnd.c:	ch->fgt->next_command=NULL;
hnd.c:  if (ch->fgt)
hnd.c:      free (ch->fgt);
hnd.c:  ch->fgt = NULL;
hnd.c:  if (!ch->fgt)
hnd.c:    ch->fgt = new_fgt ();
hnd.c:      ch->pcdata->no_spam = 1;
hnd.c:  if (IS_SET (ch->special, IS_IN_AGGRO_LIST))
hnd.c:  ch->gen_next = aggro_check;
hnd.c:  SET_BIT (ch->special, IS_IN_AGGRO_LIST);
hnd.c:  if (ch->pcdata->no_spam == 0)
hnd.c:      ch->pcdata->no_spam = 2;
hnd.c:  else if (ch->pcdata->no_spam == 1)
hnd.c:      ch->pcdata->no_spam = 0;
hnd.c:  ch->pcdata->no_spam = 1;
hnd.c:  return 18 + (((ch->pcdata->played / 2) + (((int) (current_time - ch->pcdata->logon)) / 2)) / 7200) / 4;
hnd.c:  return URANGE (3, (ch->pcdata->stat[num] + UMIN(2, ch->pcdata->stat_mod[num])), 36);
hnd.c:      SET_BIT (ch->affected_by, paf->bitvector);
hnd.c:      SET_BIT (ch->more_affected_by, paf->bitvector2);
hnd.c:      REMOVE_BIT (ch->affected_by, paf->bitvector);
hnd.c:      REMOVE_BIT (ch->more_affected_by, paf->bitvector2);
hnd.c:	    ch->pcdata->stat_mod[STR] += mod;
hnd.c:	    ch->pcdata->stat_mod[DEX] += mod;
hnd.c:	    ch->pcdata->stat_mod[INT] += mod;
hnd.c:	    ch->pcdata->stat_mod[WIS] += mod;
hnd.c:	    ch->pcdata->stat_mod[CON] += mod;
hnd.c:	    ch->max_hit += mod;
hnd.c:	    ch->max_move += mod;
hnd.c:	  ch->armor += mod;
hnd.c:	  ch->hitroll += mod;
hnd.c:	  ch->damroll += mod;
hnd.c:	  ch->pcdata->saving_throw += mod;
hnd.c:	  ch->pcdata->resist_summon += mod;
hnd.c:	  ch->pcdata->plus_kick += mod;
hnd.c:	  ch->pcdata->plus_sneak += mod;
hnd.c:	  ch->pcdata->warmth += mod;
hnd.c:	  ch->pcdata->plus_hide += mod;
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:      ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:      ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
hnd.c:   (IS_SET(ch->pIndexData->act3, ACT3_GUARD_DOOR) ||
hnd.c:    IS_SET(ch->pIndexData->act3, ACT3_GUARD_DOOR_ALIGN)))
hnd.c:  paf_new->next = ch->affected;
hnd.c:  ch->affected = paf_new;
hnd.c:  if (ch->affected == NULL)
hnd.c:  if (paf == ch->affected)
hnd.c:      ch->affected = paf->next;
hnd.c:      for (prev = ch->affected; prev != NULL; prev = (!prev->next ? NULL : prev->next))
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
hnd.c:  ch->affected_by = 0;
hnd.c:  ch->more_affected_by = 0;
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:      ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:      ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2; 
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:      ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:       ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:      ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:       ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf_next)
hnd.c:      ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:      ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:      ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:      ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:       ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf->next)
hnd.c:  for (paf = ch->affected; paf != NULL; paf = paf->next)
hnd.c:  for (paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next)
hnd.c:  if (IS_SET (ch->special, IS_IN_FIGHTING_LIST))
hnd.c:    REMOVE_BIT (ch->special, IS_IN_FIGHTING_LIST);
hnd.c:      f_first = ch->next_fighting;
hnd.c:      ch->next_fighting = NULL;
hnd.c:	  c->next_fighting = ch->next_fighting;
hnd.c:	  ch->next_fighting = NULL;
hnd.c:  if (IS_SET (ch->special, IS_IN_FIGHTING_LIST))
hnd.c:  ch->next_fighting = f_first;
hnd.c:  SET_BIT (ch->special, IS_IN_FIGHTING_LIST);
hnd.c:  if (IS_SET (ch->special, IS_IN_AGGRO_LIST))
hnd.c:      REMOVE_BIT (ch->special, IS_IN_AGGRO_LIST);
hnd.c:      aggro_check = ch->gen_next;
hnd.c:      ch->gen_next = NULL;
hnd.c:	    c->gen_next = ch->gen_next;
hnd.c:	    ch->gen_next = NULL;
hnd.c:  if (!ch || ch->in_room == NULL)
hnd.c:  check_room_more (ch->in_room);
hnd.c:      ch->in_room->light -= ch->pcdata->light;
hnd.c:      if (ch->in_room->light < 0) 
hnd.c:	ch->in_room->light = 0;
hnd.c:      ch->in_room->area->nplayer--;
hnd.c:      ch->in_room->more->pcs--;
hnd.c:      if (IS_SET(ch->pIndexData->act4, ACT4_COMMANDSCRIPT))
hnd.c:	ch->in_room->command_objs--;
hnd.c:      if (ch->in_room->command_objs < 0)
hnd.c:	ch->in_room->command_objs = 0;
hnd.c:  if (ch == ch->in_room->more->people)
hnd.c:      ch->in_room->more->people = ch->next_in_room;
hnd.c:      for (prev = ch->in_room->more->people; prev; prev = prev->next_in_room)
hnd.c:	      prev->next_in_room = ch->next_in_room;
hnd.c:	  ch->in_room = NULL;
hnd.c:	  ch->next_in_room = NULL;
hnd.c:  if (IS_MOB (ch) && ch->in_room->more->pcs == 0)
hnd.c:      for (pir = ch->in_room->more->people; pir != NULL; pir = pir->next_in_room)
hnd.c:	  if (ch->in_room->more->pcs == 0)
hnd.c:	      while (ch->pcdata->pet_temp[kk] != 0)
hnd.c:	      ch->pcdata->pet_temp[kk] = pir->pIndexData->vnum;
hnd.c:	      ch->pcdata->pet_hps[kk] = pir->hit;
hnd.c:	      ch->pcdata->pet_move[kk] = pir->move;
hnd.c:      for (vch=char_list; vch!=NULL; vch=vch->next) 
hnd.c:	      vch->fgt->fighting=NULL;
hnd.c:	      vch->position=POSITION_STANDING;
hnd.c:      ch->fgt->fighting=NULL;
hnd.c:      ch->position=POSITION_STANDING;
hnd.c:  check_clear_more (ch->in_room);
hnd.c:  ch->in_room = NULL;
hnd.c:  ch->next_in_room = NULL;
hnd.c:      if (ch->pcdata->stat[i] >  race_info[ch->pcdata->race].limits[i])
hnd.c:	ch->pcdata->stat[i] = race_info[ch->pcdata->race].limits[i];
hnd.c:      IS_AFFECTED(ch,AFF_FLYING) && (ch->height > INDOOR_FLY_HEIGHT)) 
hnd.c:  if (ch->in_room)
hnd.c:  if (oneroom->area && oneroom->area->open != 0 && IS_PLAYER (ch) && ch->pcdata->level > 100 && ch->pcdata->level < 105)
hnd.c:    if (oneroom->area && oneroom->area->open == 0 && IS_PLAYER (ch) && ch->pcdata->level < 101)
hnd.c:  if (IS_PLAYER (ch) && !IS_SET (ch->act, PLR_HOLYWALK))
hnd.c:	  ch->affected_by |= ch->pcdata->nat_abilities;
hnd.c:	  ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
hnd.c:	  ch->more_affected_by |= ch->pcdata->nat_abilities2;
hnd.c:	  ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
hnd.c:	   ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
hnd.c:      ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
hnd.c:		      racenum == ch->pcdata->race && (nr = get_room_index (roomvn)) != NULL && (nr->vnum < 100 && nr->vnum > (100+NUM_ALIGN-1)))
hnd.c:  if (IS_PLAYER (ch) && ch->in_room && ch->in_room->more)
hnd.c:      for (d = ch->in_room->more->people; d != NULL; d = d->next_in_room)
hnd.c:	      ch->in_room = oneroom;
hnd.c:	      ch->in_room = oneroom;
hnd.c:  ch->in_room = oneroom;
hnd.c:	  ch->pcdata->pet_temp[kk] = 0;
hnd.c:      ch->in_room->area->nplayer++;
hnd.c:	ch->in_room->more->pcs++;
hnd.c:  if (IS_MOB (ch) && ch->in_room->more->pcs > 0)
hnd.c:    ch->next_in_room = oneroom->more->people;
hnd.c:      ch->fgt->in_battle = TRUE;
hnd.c:      if (ch->fgt)
hnd.c:	  ch->fgt->in_battle = FALSE;
hnd.c:	  ch->fgt->wasroomtwo = oneroom->vnum;
hnd.c: if (IS_PLAYER(ch) && ch->pcdata->light >= 0)
hnd.c:   oneroom->light +=ch->pcdata->light;
hnd.c:      if (IS_SET(ch->pIndexData->act4, ACT4_COMMANDSCRIPT))
hnd.c:	ch->in_room->command_objs++;
hnd.c:  if (IS_PLAYER(ch) && IS_SET(ch->pcdata->act2, PLR_MAPPING))
hnd.c:  ch->in_room = oneroom;
hnd.c:    ch->next_in_room = oneroom->more->people;
hnd.c:      ch->fgt->in_battle = TRUE;
hnd.c:      if (ch->fgt)
hnd.c:	  ch->fgt->in_battle = FALSE;
hnd.c:	  ch->fgt->wasroomtwo = oneroom->vnum;
hnd.c:      ch->in_room->area->nplayer++;
hnd.c:	ch->in_room->more->pcs++;
hnd.c:	++ch->in_room->light;
hnd.c:  if (ch->hold1 != NULL && ch->hold1->pIndexData->item_type == itype)
hnd.c:    return ch->hold1;
hnd.c:  if (ch->hold2 != NULL && ch->hold2->pIndexData->item_type == itype)
hnd.c:    return ch->hold2;
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = ((!obj->next_content) ? NULL : obj->next_content))
hnd.c:    ch->hold1 = obj;
hnd.c:    ch->hold2 = obj;
hnd.c:	      ch->pcdata->armor[0] += (r->protects_body);
hnd.c:	      ch->pcdata->armor[1] += (r->protects_head);
hnd.c:	      ch->pcdata->armor[2] += (r->protects_legs);
hnd.c:	      ch->pcdata->armor[3] += (r->protects_arms);
hnd.c:	      ch->pcdata->armor[2] += (r->protects_legs * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[0] += (r->protects_body * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[1] += (r->protects_head * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[3] += (r->protects_arms * r->condition_now) / (r->max_condition);
hnd.c:	  ch->pcdata->warmth += r->warmth;
hnd.c:	  if (ch->pcdata->warmth < 0) 
hnd.c:	    ch->pcdata->warmth = 0;
hnd.c:	SET_BIT(ch->act, PLR_HAS_SHOES);
hnd.c:	SET_BIT(ch->act, PLR_HAS_SHIELD);
hnd.c:	    SET_BIT(ch->act, PLR_HAS_SNOWSHOES);
hnd.c:	    SET_BIT(ch->act, PLR_HAS_SCUBA);
hnd.c:	    SET_BIT(ch->act, PLR_HAS_MTN_BOOTS);
hnd.c:	  /*      if (ch->pcdata->n_mana<0) ch->pcdata->n_mana += ((I_GEM *) obj->more)->mana_now;
hnd.c:		  ((I_GEM *) obj->more)->mana_now+=ch->pcdata->n_mana;
hnd.c:	  ch->pcdata->n_mana = 0;
hnd.c:	REMOVE_BIT (ch->affected_by, AFF_FLYING);
hnd.c:	  && ch->in_room != NULL)
hnd.c:	  if(++ch->in_room->light < 0) ch->in_room->light = 0;
hnd.c:      ++ch->pcdata->light;
hnd.c:      if (ch->move > ch->max_move)
hnd.c:	ch->move = ch->max_move;
hnd.c:  if (ch->hold1 == NULL)
hnd.c:  if (ch->hold2 == NULL)
hnd.c:    ch->hold1 = NULL;
hnd.c:    ch->hold2 = NULL;
hnd.c:	REMOVE_BIT(ch->act, PLR_HAS_SHOES);
hnd.c:	REMOVE_BIT(ch->act, PLR_HAS_SHIELD);
hnd.c:	    REMOVE_BIT(ch->act, PLR_HAS_SNOWSHOES);
hnd.c:	    REMOVE_BIT(ch->act, PLR_HAS_SCUBA);
hnd.c:	    REMOVE_BIT(ch->act, PLR_HAS_MTN_BOOTS);
hnd.c:	      ch->pcdata->armor[0] -= (r->protects_body);
hnd.c:	      ch->pcdata->armor[1] -= (r->protects_head);
hnd.c:	      ch->pcdata->armor[2] -= (r->protects_legs);
hnd.c:	      ch->pcdata->armor[3] -= (r->protects_arms);
hnd.c:	      ch->pcdata->armor[2] -= (r->protects_legs * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[0] -= (r->protects_body * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[1] -= (r->protects_head * r->condition_now) / (r->max_condition);
hnd.c:	      ch->pcdata->armor[3] -= (r->protects_arms * r->condition_now) / (r->max_condition);
hnd.c:	  ch->pcdata->warmth -= r->warmth;
hnd.c:	  if (ch->pcdata->warmth < 0) 
hnd.c:	    ch->pcdata->warmth = 0;
hnd.c:	  amt=UMIN((0-((I_GEM *) obj->more)->mana_now),ch->pcdata->n_mana);
hnd.c:	  ch->pcdata->n_mana-=amt;
hnd.c:      if (ch->in_room != NULL)
hnd.c:	  if (--ch->in_room->light < 0) 
hnd.c:	    ch->in_room->light = 0;
hnd.c:	if(--ch->pcdata->light < 0)
hnd.c:	  ch->pcdata->light = 0;
hnd.c:  ir = ch->in_room;
hnd.c:  if (ch->in_room)
hnd.c:  if (ch->in_room)
hnd.c:      if(ch->pcdata->guarding != NULL)
hnd.c:	      if(IS_PLAYER(ch->pcdata->guarding))
hnd.c:		if (ch->pcdata->guarding->pcdata->guarded_by[i] == ch)
hnd.c:		  ch->pcdata->guarding->pcdata->guarded_by[i] = NULL;
hnd.c:	  ch->pcdata->guarding = NULL;
hnd.c:	  if(ch->pcdata->guarded_by[i] != NULL)
hnd.c:	      if (IS_PLAYER(ch->pcdata->guarded_by[i]))
hnd.c:		ch->pcdata->guarded_by[i]->pcdata->guarding = NULL;
hnd.c:	      ch->pcdata->guarded_by[i] = NULL;
hnd.c:      check_fgt (ch->fgt->riding);
hnd.c:      ch->fgt->riding->fgt->mounted_by = NULL;
hnd.c:      ch->fgt->riding = NULL;
hnd.c:      check_fgt (ch->fgt->mounted_by);
hnd.c:      ch->fgt->mounted_by->fgt->riding = NULL;
hnd.c:      ch->fgt->mounted_by = NULL;
hnd.c:  if (IS_PLAYER (ch) && ch->desc != NULL && ch->desc->original != NULL)
hnd.c:      for (wch = char_list; wch != NULL; wch = wch->next)
hnd.c:	    wch->fgt->master = NULL;
hnd.c:	    wch->fgt->leader = NULL;
hnd.c:	    wch->fgt->riding = NULL;
hnd.c:	    wch->fgt->mounted_by = NULL;
hnd.c:	  if (wch->ced && wch->ced->reply == ch)
hnd.c:	    wch->ced->reply = NULL;
hnd.c:	  char_list = ch->next;
hnd.c:	  ch->next = NULL;
hnd.c:		  prev->next = ch->next;
hnd.c:/*	      ch->next = NULL;*/
hnd.c:	      ch->in_room = ir;
hnd.c:      for (obj = ch->carrying; obj != NULL; obj = obj_next)
hnd.c:      ch->pcdata->condition[COND_FULL] = 55;
hnd.c:      ch->pcdata->condition[COND_THIRST] = 55;
hnd.c:      ch->pcdata->condition[COND_DRUNK] = 0;
hnd.c:      char_to_room(ch, get_room_index(ch->pcdata->alignment+100));
hnd.c:      --ch->pIndexData->count;
hnd.c:  if (IS_PLAYER (ch) && ch->desc)
hnd.c:    ch->desc->character = NULL;
hnd.c:  if (ch == NULL || !ch->in_room) return NULL;
hnd.c:  if (!ch->in_room)
hnd.c:  for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:      if (!rch->in_room)
hnd.c:		  for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:		  if (!rch->in_room)
hnd.c:				  if (rch->pcdata->race != RCLOOK)
hnd.c:    for (rch = ch->in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:			if (!rch->in_room)
hnd.c:  for (rch = in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:      for (rch = in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:		  if (rch->pcdata->race != RCLOOK)
hnd.c:  for (rch = in_room->more->people; rch != NULL; rch = rch->next_in_room)
hnd.c:  if (!ch || !ch->in_room)
hnd.c:      if (!wch->in_room)
hnd.c:	  (ch->in_room && wch->in_room && wch->in_room->area != ch->in_room->area))
hnd.c:      if (!wch->in_room) continue;
hnd.c:  if (!ch->in_room)
hnd.c:  for (wch = char_list; wch != NULL; wch = wch->next)
hnd.c:      if (!wch->in_room)
hnd.c:      if (wch->desc && wch->desc > 0)
hnd.c:  if (!ch->in_room)
hnd.c:  for (wch = char_list; wch != NULL; wch = wch->next)
hnd.c:      if (!wch->in_room)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
hnd.c:  check_room_more (ch->in_room);
hnd.c:      obj = get_obj_list (ch, argy, ch->in_room->more->contents);
hnd.c:      obj = get_obj_list (ch, argy, ch->in_room->more->contents);
hnd.c:  ii = (ch->gold * 100) + ch->copper;
hnd.c:  ch->gold = 0;
hnd.c:  ch->copper = 0;
hnd.c:      ch->gold = 0;
hnd.c:      ch->copper = 0;
hnd.c:      ch->gold -= (amount / 100);
hnd.c:      ch->copper -= amount;
hnd.c:  while (ch->gold < 0)
hnd.c:      ch->copper -= 100;
hnd.c:      ch->gold += 1;
hnd.c:  while (ch->copper < 0)
hnd.c:      ch->gold -= 1;
hnd.c:      ch->copper += 100;
hnd.c:      /*money+=100-(ch->copper); */
hnd.c:  if (ch->gold < 0)
hnd.c:      ch->gold = 0;
hnd.c:  if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
hnd.c:  if (room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED))
hnd.c:      && victim->pcdata->wizinvis >= ch->pcdata->level
hnd.c:  if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
hnd.c:  if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
hnd.c:  if (room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED))
hnd.c:  if (IS_PLAYER (ch) && ch->pcdata->level >= LEVEL_IMMORTAL)
info.c:    if (ch->pcdata->show_lev)
info.c:      ch->pcdata->show_lev = FALSE;
info.c:  ch->pcdata->show_lev = TRUE;
info.c:      sprintf (buffr, "Level %d Exp: %ld\n\r", i + 1, FIND_EXP (i, ch->race));
info.c:	write_to_buffer(ch->desc,j,0);
info.c:              if (LEVEL(ch) == MAX_LEVEL && align!=wch->pcdata->alignment
info.c:              if (wch->pcdata->wizinvis == 0)
info.c:              if (wch->pcdata->quiet == 1)
info.c:              if (wch->pcdata->quiet == 2)
info.c:                if (IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_GOOD)
info.c:                  || IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EVIL))
info.c:			 wch->pcdata->remort_times,
info.c:  (IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_FIRE) ? "\x1b[1;31m-" : " "),
info.c:  (IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_AIR) ? "\x1b[1;36m-" : " "),
info.c:  (IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_WATER) ? "\x1b[1;34m-" : " "),
info.c:  (IS_SET(wch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EARTH) ? "\x1b[1;32m-" : " "),
info.c:			 (IS_SET (wch->pcdata->act2, PLR_SILENCE) ? " s" : " "),
info.c:                         (wch->pcdata->bgf ? "-" : " "), (IN_BATTLE (wch) ? "+" : " "),
info.c:			 (IS_SET(wch->pcdata->act2, PLR_HARDCORE) ? "\x1b[1;31mH" : " "),
info.c:                         wch->timer > 49 ? "\x1B[1;37m<AFK> \x1B[37;0m" : "", NAME (wch),
info.c:			 wch->pcdata->title,
info.c:                         (wch->pcdata->wizinvis != 0 ? " \x1b[1;30m(\x1b[1;37mInvis\x1b[1;30m)" : ""));
info.c:                    if (!wch->pcdata->show_lev)
info.c:			 (IS_SET(wch->pcdata->act2, PLR_HARDCORE) ? "\x1b[1;31mH" : " "),
info.c:                         wch->timer > 49 ? "\x1B[1;37m<AFK> \x1B[0;37m" : "", NAME (wch),   
info.c:			 wch->pcdata->title, 
info.c:			 (wch->pcdata->wizinvis != 0 ? " (Invis)" : ""));
info.c:  if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_FIRE)) buf = "\x1B[1;31mF\x1B[0;37m-";
info.c:  else if (IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_WATER)) buf = "\x1B[1;34mW\x1B[0;37m-";
info.c:  else if (IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_AIR)) buf = "\x1B[1;36mA\x1B[0;37m-";
info.c:  else if (IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EARTH)) buf = "\x1B[1;32mE\x1B[0;37m-";
info.c:  else if (IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_GOOD)) buf = "\x1B[1;29mG\x1B[0;37m-";
info.c:  else if (IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EVIL)) buf = "\x1B[1;30mE\x1B[0;37m-";
info.c:  if (!ch->in_room || !ch->in_room->area)
info.c:  switch (ch->in_room->sector_type)
info.c:  if (ch->in_room->sector_type >= SECT_CAVE)
info.c:  switch (ch->in_room->sector_type)
info.c:  if (!IS_OUTSIDE (ch) || ch->in_room->sector_type >= SECT_CAVE)
int.c:      ch->pcdata->oldgrep = mem_alloc (strlen (grep) + 1);
int.c:      strcpy (ch->pcdata->oldgrep, grep);
int.c:  DESCRIPTOR_DATA *d = ch->desc;
int.c:  if (!ch || (!ch->desc && IS_PLAYER(ch)) || !ch->in_room) 
int.c:  if (IS_PLAYER (ch) && (IS_SET (ch->act, PLR_LOG) || fLogAll))
int.c:      REMOVE_BIT (ch->affected_by, AFF_HIDE); 
int.c:      if (IS_SET (ch->act, PLR_FREEZE))
int.c:      if (ch->pcdata->oldgrep)
int.c:	  free_string (ch->pcdata->oldgrep);
int.c:	  ch->pcdata->oldgrep = NULL;
int.c:  if (ch->desc != NULL && ch->desc->snoop_by != NULL)
int.c:      write_to_buffer (ch->desc->snoop_by, buf, 2);
int.c:      write_to_buffer (ch->desc->snoop_by, buf, 2);
int.c:      write_to_buffer (ch->desc->snoop_by, logline, 0);
int.c:      write_to_buffer (ch->desc->snoop_by, "\n\r", 2);
int.c:  if (!found && (!IS_SET (ch->act, PLR_SILENCE) || LEVEL (ch) > IMM_LEVEL))
int.c:      if (!found && IS_PLAYER(ch) && ch->pcdata->command_objs > 0)
int.c:	  for (ob = ch->carrying; ob != NULL; ob = ob->next_content)
int.c:      if (!found && ch->in_room && ch->in_room->more && ch->in_room->command_objs > 0)
int.c:	  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
int.c:	      if (IS_SET(fch->pIndexData->act4, ACT4_COMMANDSCRIPT))
int.c:		      if (IS_MOB (fch) && fch->pIndexData->vnum == tr->attached_to_mob)
int.c:      if (!found && ch->in_room && ch->in_room->more && ch->in_room->command_objs > 0)
int.c:	  for (obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
int.c:      if (!found && ch->in_room && IS_SET(ch->in_room->room_flags, ROOM_COMMANDSCRIPT))
int.c:	      if (ch->in_room->vnum == tr->attached_to_room)
int.c:		  s->room = ch->in_room;
int.c:  if (ch->position < com->position)
int.c:      sprintf(logline, "You cannot %s while you are %s.\n\r", command, position_name[ch->position]);
int.c:  if (ch->position == POSITION_GROUNDFIGHTING && com &&
int.c:  switch (ch->position)
int.c:  vict->desc = ch->desc;
int.c:  p = ch->position;
int.c:  ch->position = POSITION_STANDING;
int.c:  ch->position = p;
look.c:  for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
look.c:    if (ch->pcdata->alignment == fch->pcdata->alignment)
look.c:      show_list_to_char(ch->carrying, fch, TRUE, TRUE);
look.c:           ch->in_room->area->name);
look.c:  if (words (ch->in_room->area->builders) == 0)
look.c:  else if (words (ch->in_room->area->builders) == 1)
look.c:      sprintf (buf, "%s\x1B[0m.\n\r", ch->in_room->area->builders);
look.c:  else if (words (ch->in_room->area->builders) == 2)
look.c:               first (ch->in_room->area->builders),
look.c:               ch->in_room->area->builders +
look.c:               strlen (first (ch->in_room->area->builders)) + 1);
look.c:  else if (words (ch->in_room->area->builders) == 3)
look.c:               first (ch->in_room->area->builders),
look.c:               first (ch->in_room->area->builders + strlen (first (ch->in_room->area->builders)) + 1),
look.c:	       first (ch->in_room->area->builders +
look.c:		      strlen (first (ch->in_room->area->builders)) +
look.c:		      strlen (ch->in_room->area->builders + strlen (first (ch->in_room->area->builders)) + 1) + 1));
look.c:              if ((victim->in_room->area == ch->in_room->area) &&
look.c:  pexit = ch->in_room->exit[dir];
look.c:  if (ch->in_room)
look.c:    curr_room = ch->in_room;
look.c:		  if (ch->pcdata->no_quit_pk < 2)
look.c:		    ch->pcdata->no_quit_pk = 2;
look.c:		  if ((ch->pcdata->wizinvis > LEVEL(viewer))
look.c:		  if ((room_is_dark(ch->in_room) && !IS_AFFECTED(viewer, AFF_INFRARED))
look.c:      if (ch->ced && ch->ced->in_boat == obj)
look.c:              || IS_SET (ch->act, PLR_HOLYLIGHT)))
look.c:          if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:      if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:      if (IS_MOB (ch) || IS_SET (ch->pcdata->act2, PLR_COMBINE))
look.c:  for (rch = list; rch != NULL; rch = rch->next_in_room)
look.c:      && victim->fgt->mounted_by->in_room == ch->in_room
look.c:  if (IS_PLAYER (ch) && (ch->pcdata->no_spam == 2 || ch->pcdata->no_spam == 1) && !tflag)
look.c:      if (IS_PLAYER (victim) && !IS_SET (ch->pcdata->act2, PLR_BRIEF)
look.c:      if (IS_PLAYER (ch) && (ch->pcdata->no_spam == 2 || ch->pcdata->no_spam == 1))
look.c:  if (IS_PLAYER (ch) && ch->pcdata->no_spam == 0)
look.c:      sprintf (buf, "You are %d\' %d\" tall.", ch->height / 12, ch->height % 12);
look.c:      if (ch->height > victim->height)
look.c:      else if (ch->height < victim->height)
look.c:      && ((IS_PLAYER (ch) && number_percent () < ch->pcdata->learned[gsn_peek]) || IS_IMMORTAL (ch)))
look.c:  if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_HOLYLIGHT))
look.c:    if (ch->position < POSITION_SLEEPING)
look.c:  if (ch->position == POSITION_SLEEPING)
look.c:      && !IS_SET (ch->act, PLR_HOLYLIGHT)
look.c:      && (room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED)))
look.c:      if (ch->in_room && ch->in_room->more) show_char_to_char (ch->in_room->more->people, ch);
look.c:   This uses a char boolean ch->scanning
look.c:AFF_BLIND) && IS_AFFECTED(ch, AFF_INFRARED) && IS_SET(ch->pcdata->act2,
look.c:      sprintf(buf, "\x1b[%d;%dr", MAP_HEIGHT, ch->pcdata->pagelen);
look.c:      ch->pcdata->x = MAP_WIDTH/2;
look.c:      ch->pcdata->y = MAP_HEIGHT/2;
look.c:      sprintf(buf, "\x1B[%d;1f", ch->pcdata->pagelen);
look.c:  ch->ced->scanning = TRUE;
look.c:  ch->ced->scanning = FALSE;
look.c:  ch->ced->scanning = TRUE;
look.c:  ch->ced->scanning = FALSE;
look.c:  return (ch->damroll + add_damroll (ch) + str_app[get_curr_str(ch)].dam);
look.c:  return (ch->hitroll + add_hitroll (ch) + (get_curr_dex(ch)*3/2));
look.c:  if (ch->in_room->sector_type >= SECT_CAVE || IS_SET(ch->in_room->room_flags, ROOM_UNDERGROUND))
look.c:  if (IS_SET (ch->in_room->room_flags, ROOM_INDOORS))
look.c:  if (ch->in_room->sector_type >= SECT_CAVE || IS_SET(ch->in_room->room_flags, ROOM_UNDERGROUND))
look.c:  if (IS_SET (ch->in_room->room_flags, ROOM_INDOORS))
look.c:if (!ch->in_room) {
look.c:  if (ch->position < POSITION_SLEEPING)
look.c:  if (ch->position == POSITION_SLEEPING)
look.c:      && !IS_SET (ch->act, PLR_HOLYLIGHT) && !IS_AFFECTED_EXTRA(ch, AFF_DET_FOG))
look.c:      && !IS_SET (ch->act, PLR_HOLYLIGHT)
look.c:      && room_is_dark (ch->in_room) && !IS_AFFECTED (ch, AFF_INFRARED))
look.c:      sprintf(buff, "\x1b[1;37m%s \x1b[1;34m[%s%s\x1b[1;34m/", show_room_name (ch, ch->in_room->name), sectors[ch->in_room->sector_type].color, sectors[ch->in_room->sector_type].name_seen);
look.c:      if (ch->in_room->sector_type >= SECT_CAVE||IS_SET(ch->in_room->room_flags, ROOM_UNDERGROUND))
look.c:      else  if (IS_SET (ch->in_room->room_flags, ROOM_INDOORS))
look.c:          else if (ch->in_room->shade)
look.c:				!IS_SET (ch->pcdata->act2, PLR_BRIEF)))
look.c:	  send_to_char (ch->in_room->description, ch);
look.c:	if (IS_PLAYER (ch) && IS_SET (ch->pcdata->act2, PLR_AUTOEXIT))
look.c:	if(ch->in_room->blood > 0)
look.c:	      if (IS_SET(ch->in_room->blood, blood_number[i]))
look.c:      if (ch->in_room->more->contents)
look.c:      if (ch->in_room->more->gold > 0 || ch->in_room->more->copper > 0)
look.c:          if (ch->in_room->more->gold > 0 && ch->in_room->more->copper == 0)
look.c:                       (ch->in_room->more->gold > 1 ? "are" : "is"), ch->in_room->more->gold,
look.c:                       (ch->in_room->more->gold > 1 ? "s" : ""));
look.c:          else if (ch->in_room->more->gold == 0 && ch->in_room->more->copper > 0)
look.c:                       (ch->in_room->more->copper > 1 ? "are" : "is"), ch->in_room->more->copper,
look.c:                       (ch->in_room->more->copper > 1 ? "s" : ""));
look.c:          else if (ch->in_room->more->gold > 0 && ch->in_room->more->copper > 0)
look.c:                       (ch->in_room->more->gold > 1 ? "are" : "is"), ch->in_room->more->gold,
look.c:                       (ch->in_room->more->gold > 1 ? "s" : ""), ch->in_room->more->copper,
look.c:                       (ch->in_room->more->copper > 1 ? "s" : ""));
look.c:      show_list_to_char (ch->in_room->more->contents, ch, FALSE, FALSE);
look.c:      show_char_to_char (ch->in_room->more->people, ch);
look.c:if (arg1[0]=='\0' || (ch->in_room && ch->in_room->more &&
look.c:        (ch->in_room->more->contents || ch->in_room->more->people!=ch ||
look.c:        ch->in_room->more->people->next_in_room))) {
look.c:  for (obj = ch->carrying; obj && obj != NULL; obj = obj->next_content)
look.c:  for (obj = ch->carrying; obj && obj != NULL; obj = obj->next_content)
look.c:  for (obj = ch->in_room->more->contents; obj && obj != NULL; obj = obj->next_content)
look.c:ITEM_UNSEEN) && !IS_SET(ch->act, PLR_HOLYLIGHT)))
look.c:  for (obj = ch->in_room->more->contents; obj && obj != NULL; obj = obj->next_content)
look.c:ITEM_UNSEEN) && !IS_SET(ch->act, PLR_HOLYLIGHT)))
look.c:  if (ch->in_room->more)
look.c:    pdesc = get_extra_descr (arg1, ch->in_room->more->extra_descr);
look.c:  if ((pexit = ch->in_room->exit[door]) == NULL)
look.c:      if (!ch->ced || !ch->ced->scanning)
look.c:  if (!ch->ced || !ch->ced->scanning)
look.c:      if (!ch->ced || !ch->ced->scanning)
look.c:/*end if !ch->scanning */
look.c:               number_range(1,140) <ch->pcdata->learned[gsn_locate_trap])
look.c:               number_range(1,140) <ch->pcdata->learned[gsn_locate_trap])
look.c:      if ((pexit = ch->in_room->exit[door]) != NULL
look.c:		    if (IS_AFFECTED (ch, AFF_FLYING) || IS_SET (ch->act, PLR_HOLYWALK))
look.c:		    if (IS_AFFECTED (ch, AFF_BREATH_WATER) || IS_SET (ch->act, PLR_HOLYWALK) || IS_SET(ch->act, PLR_HAS_SCUBA))
look.c:			  if (IS_SET(ch->act, PLR_HOLYLIGHT))
look.c:		  || IS_SET (ch->act, PLR_HOLYLIGHT))
look.c:		  sprintf (buf + strlen (buf), "%-5s - %s\n\r",  capitalize (dir_name[door]),  (!IS_SET (ch->act, PLR_HOLYLIGHT) && room_is_dark (troom)) ? "Too dark to tell" : (show_room_name (ch, (troom->name))));
look.c:    sprintf (buffy, "You have \x1B[1;37m%ld\x1B[0m coins in the bank.\n\r", ch->pcdata->bank);
look.c:  if (!ch->gold && !ch->copper)
look.c:  if (ch->gold > 0)
look.c:      sprintf (buffy, "%d \x1B[1;33mgold\x1B[37;0m coins.\n\r", ch->gold);
look.c:  if (ch->copper > 0)
look.c:      sprintf (buffy, "%d \x1B[33;0mcopper\x1B[37;0m coins.\n\r", ch->copper);
look.c:  if (ch->gold > 0)
look.c:      sprintf (buffy, "%d \x1B[1;33mgold\x1B[37;0m coins.\n\r", ch->gold);
look.c:  if (ch->copper > 0)
look.c:      sprintf (buffy, "%d \x1B[33;0mcopper\x1B[37;0m coins.\n\r", ch->copper);
look.c:  show_list_to_char (ch->carrying, ch, TRUE, TRUE);
look.c:  if (!found && ch->carrying == NULL)
look.c:ch->pcdata->level, ch->pcdata->warpoints, ch->pcdata->remort_times);
look.c:(ch), ch->pcdata->level, ch->pcdata->warpoints, ch->pcdata->remort_times);
look.c:  if (strcmp  (arg1, ch->pcdata->pwd) &&
look.c:      strcmp(arg1, ch->pcdata->rpwd))
look.c:  pwdnew = (arg2, ch->pcdata->name);
look.c:  if (ch->pcdata->pwd != NULL)
look.c:      free_string (ch->pcdata->pwd);
look.c:  ch->pcdata->pwd = str_dup (pwdnew);
look.c:  if (ch->pcdata->rpwd)
look.c:    free_string(ch->pcdata->rpwd);
look.c:  ch->pcdata->rpwd = str_dup(arg2);
look.c:   if ( IS_PLAYER(ch) && IS_SET(ch->act, PLR_SILENCE) )
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_AUCTION)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_NOTIFY)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_CHAT)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_IMMTALK)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_CLANTALK)
look.c:   send_to_char( !IS_SET(ch->pcdata->deaf, CHANNEL_YELL)
look.c:   REMOVE_BIT (ch->pcdata->deaf, bit);
look.c:   SET_BIT (ch->pcdata->deaf, bit);
look.c:      if ((ch->in_room->exit[door]) == NULL)
look.c:      if(ch->in_room->exit[door]->d_info && IS_SET(ch->in_room->exit[door]->d_info->exit_info, EX_HASTRAP) && number_range(1,150) < ch->pcdata->learned[gsn_locate_trap])
look.c:      if (!ch->in_room->exit[door]->d_info || ch->in_room->exit[door]->d_info->keyword == NULL || ch->in_room->exit[door]->d_info->keyword[0] == '\0')
look.c:      if (ch->in_room->exit[door]->d_info && !IS_SET (ch->in_room->exit[door]->d_info->exit_info, EX_HIDDEN))
look.c:	if (ch->in_room->exit[door]->d_info && ch->in_room->exit[door]->d_info->keyword != NULL && ch->in_room->exit[door]->d_info->keyword[0] != '\0')
look.c:        if (number_range (0, 120) < UMAX (8, ch->pcdata->learned[gsn_search])
look.c:            sprintf (buf, "You discovered a hidden %s!\n\r", ch->in_room->exit[door]->d_info->keyword);
look.c:  for (obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
look.c:      if (number_range (0, 120) < UMAX (8, ch->pcdata->learned[gsn_search])
look.c:      if (number_range (0, 120) > UMAX (15, ch->pcdata->learned[gsn_search] + 10))
look.c:      if (ch->in_room->exit[door] != NULL && ch->in_room->exit[door]->d_info && IS_SET (ch->in_room->exit[door]->d_info->exit_info, EX_HIDDEN))
look.c:  for (oo = ch->in_room->more->people; oo != NULL; oo = oo->next_in_room)
look.c:    if (number_range (0, 120) < UMAX (8, ch->pcdata->learned[gsn_search]))
look.c:  if (ch->position == POSITION_SEARCHING)
look.c:  ch->pcdata->tickcounts = 9;
look.c:    strcpy (ch->pcdata->temp->temp_string, argy);
look.c:    ch->pcdata->temp->temp_string[0] = '\0';
medit.c:  pMob = (MOB_PROTOTYPE *) ch->desc->pEdit;
medit.c:	ch->desc->pEdit = (void *) pMob;
medit.c:	ch->desc->pEdit = NULL;
medit.c:	sprintf (minibuf, "\x1B[1;%dr\x1B[2JDone.\n\r", ch->pcdata->pagelen);
medit.c:	ch->desc->connected = CON_PLAYING;
medit.c:      sprintf (minibuf, "\x1B[1;%dr\x1B[2JDone.\n\r", ch->pcdata->pagelen);
mgc.c:  for (paf = ch->affected; paf != NULL; paf = paf->next)
mgc.c: nat_level = (get_curr_int (ch) + get_curr_wis (ch)) / 2 + bonus + (ch->pcdata->remort_times+1)/2;
mgc.c: if (ch->pcdata->n_mana < 0) ch->pcdata->n_mana = 0;
mgc.c: mana_fire = ch->pcdata->n_mana;
mgc.c: mana_air = ch->pcdata->n_mana;
mgc.c: mana_water = ch->pcdata->n_mana;
mgc.c: mana_earth = ch->pcdata->n_mana;
mgc.c: mana_spirit = ch->pcdata->n_mana;
mgc.c:  level += ((get_curr_int (ch) + get_curr_wis (ch)) / 2) +(ch->pcdata->remort_times+1);
mgc.c:   if (ch->pcdata->n_mana < 0) ch->pcdata->n_mana = 0;
mgc.c:  mana = ch->pcdata->n_mana;
mgc.c:  if ((gem = ch->hold1) != NULL && gem->pIndexData->item_type == ITEM_GEM && IS_SET(((I_GEM *) gem->more)->gem_type, bit))
mgc.c:  else if ((gem = ch->hold2) != NULL && gem->pIndexData->item_type == ITEM_GEM && IS_SET(((I_GEM *) gem->more)->gem_type, bit))
mgc.c:  for (rch = ch->in_room->more->people; rch; rch = rch->next_in_room)
mgc.c:	  else if (rch->pcdata->learned[sn] > 30)
mgc.c:  if (ch->pcdata->n_mana < 0) ch->pcdata->n_mana = 0;
mgc.c:  mana = ch->pcdata->n_mana;
mgc.c:  if (ch->pcdata->n_mana < 0) ch->pcdata->n_mana = 0;
mgc.c:    if (ch->pcdata->n_mana >= mana)
mgc.c:	ch->pcdata->n_mana -= mana;
mgc.c:	mana -= ch->pcdata->n_mana;
mgc.c:	ch->pcdata->n_mana = 0;
mgc.c:	if ((gem = ch->hold1) != NULL && gem->pIndexData->item_type == ITEM_GEM && IS_SET(((I_GEM *) gem->more)->gem_type, bit))
mgc.c:	else if ((gem = ch->hold2) != NULL && gem->pIndexData->item_type == ITEM_GEM && IS_SET(((I_GEM *) gem->more)->gem_type, bit))
mgc.c:  if (ch->pcdata->tickcounts > 11 && (FIGHTING (ch) != NULL))
mgc.c:  if (ch->position == POSITION_GROUNDFIGHTING)
mgc.c:  if (ch->position == POSITION_BASHED)
mgc.c:  if (ch->position == POSITION_CASTING)
mgc.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_ranged] > pow.max_prac_spells)
mgc.c:      if (ch->pcdata->remort_times > 3) range++;
mgc.c:      if (ch->pcdata->remort_times > 6) range++;
mgc.c:  if (IS_MOB (ch) && ch->desc == NULL)
mgc.c:  if (IS_SET (ch->in_room->room_flags, ROOM_NOMAGIC) && LEVEL(ch) <MAX_LEVEL)
mgc.c:      || (IS_PLAYER (ch) && LEVEL (ch) < spell->spell_level) || (IS_PLAYER(ch) && (ch->pcdata->learned[spell->gsn] <= 0))) 
mgc.c:  if (ch->position < spell->position && ch->position !=
mgc.c:	  if ((victim = get_char_room_near (ch, ch->in_room, range, arg2)) == NULL)
mgc.c:	      if (ch->in_room == victim->in_room)
mgc.c:		&& ch->fgt->challenge != 10 )
mgc.c:		&& ch->fgt->challenge != 10 )
mgc.c:	  if ((victim = get_char_room_near (ch, ch->in_room, range, arg2)) == NULL)
mgc.c:	      if (ch->in_room == victim->in_room)
mgc.c:         obj = get_obj_list (ch, arg2, ch->in_room->more->contents);
mgc.c:  if (ch->desc) ch->desc->repeat = 0;
mgc.c:  strcpy (ch->pcdata->temp->temp_string, argy);
mgc.c:    if ((LEVEL (ch) < 100) || (LEVEL (ch) > 99 && IS_SET (ch->pcdata->act2, PLR_HOLYLAG)))
mgc.c:	  ch->pcdata->remort_times*0;
mgc.c:	ch->pcdata->tickcounts = ((spell->casting_time) * (100-bonus))/100;
mgc.c:	if (ranged && (ch->pcdata->learned[gsn_ranged] > pow.max_prac_spells))
mgc.c:		ch->pcdata->tickcounts +=5;
mgc.c:    if (IS_MOB (ch) && ch->desc == NULL)
mgc.c:  if (ch->position == POSITION_GROUNDFIGHTING)
mgc.c:  if (FIGHTING (ch) == NULL && ch->position == POSITION_CASTING)
mgc.c:  if (FIGHTING (ch) != NULL && ch->position == POSITION_CASTING)
mgc.c:  if (IS_SET (ch->in_room->room_flags, ROOM_NOMAGIC) && LEVEL(ch) <MAX_LEVEL)
mgc.c:  if (IS_SET (ch->in_room->room_flags, ROOM_LOWMAGIC) && LEVEL(ch)<MAX_LEVEL && (number_range(1,3) == 3))
mgc.c:  if (IS_PLAYER(ch) && ch->pcdata->learned[gsn_ranged] >= pow.max_prac_spells)
mgc.c:      if (ch->pcdata->remort_times > 3) range++;
mgc.c:      if (ch->pcdata->remort_times > 5) range++;
mgc.c:  if (ch->position == POSITION_CASTING)
mgc.c:  if (ch->position < spell->position)
mgc.c:	  if ((victim = get_char_room_near (ch, ch->in_room, range, arg2)) == NULL)
mgc.c:      if (ch->position != POSITION_FIGHTING || FIGHTING (ch) != victim)
mgc.c:	ch->pcdata->tickcounts = spell->casting_time/2+3;
mgc.c:	ch->pcdata->tickcounts /= 2;
mgc.c:         if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
mgc.c:	  if ((victim = get_char_room_near (ch, ch->in_room, range, arg2)) == NULL)
mgc.c:       obj = get_obj_list (ch, arg2, ch->in_room->more->contents);
mgc.c:      (ch->pcdata->learned[spell->gsn]
mgc.c:	  if (spell->spell_lag > 0 && ch->pcdata->no_quit > 0)
mgc.c:	      sprintf(buf, "You must wait %d hours before casting %s!\n\r", ch->pcdata->no_quit, spell->spell_name);
mgc.c:	  if (ch->pcdata->no_quit_pk > 0 && number_percent() < spell->pk_fail_chance)
mgc.c:		  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
mgc.c:      for (vch = ch->in_room->more->people; vch; vch = vch_next)
mgc.c:	  vch_next = vch->next_in_room;
mgc.c:  if (IS_SET (ch->in_room->room_flags, ROOM_NOMAGIC))
mgc.c:	  if (ch->pcdata->tickcounts > 2)
mgc.c:      if (ch->position != POSITION_FIGHTING || FIGHTING (ch) != victim)
mgc.c:    ch->pcdata->tickcounts = spell->casting_time + 10;
mgc.c:      for (vch = ch->in_room->more->people; vch; vch = vch_next)
mgc.c:	  vch_next = vch->next_in_room;
move.c:	if (IS_MOB(ch) || ch->desc == NULL)
move.c:	if (ch->in_room->sector_type == SECT_CAPTURE) {
move.c:		sprintf (buf, "%s have captured things", align_info[ch->pcdata->alignment].name)
move.c:    if (IS_MOB (ch) || ch->desc == NULL)
move.c:  	sprintf (ddd, "\x1B[2J\x1B[0m\x1B[1;%dr", ch->pcdata->pagelen);
move.c:  	write_to_descriptor2 (ch->desc, ddd, 0);
move.c:  ch->pcdata->resist_summon = 0;
move.c:  if (!ch || !ch->in_room) return;
move.c:  if (ch == NULL || ch->in_room == NULL) return;
move.c:  check_room_more(ch->in_room);
move.c:  for(fch = ch->in_room->more->people; fch != NULL;fch=fch->next_in_room)
move.c:      !IS_SET(ch->act, PLR_HAS_BOAT))
move.c:      !IS_SET(ch->act, PLR_HAS_MTN_BOOTS))
move.c:      !IS_SET(ch->act, PLR_HAS_SCUBA) && 
move.c:      !IS_SET(ch->act, PLR_HAS_SNOWSHOES))
move.c:  if (ch->in_room == NULL)
move.c:  if (door > 18 && ch->in_room->vnum > 99 && ch->in_room->vnum < 109)
move.c:  if(ch->position < POSITION_SLEEPING)
move.c:  check_room_more (ch->in_room);
move.c:      for (fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:  if (ch->desc)
move.c:    ch->desc->repeat = 0;
move.c:  if (FIGHTING (ch) != NULL && ch->position == POSITION_CASTING)
move.c:  if (ch->position < POSITION_STANDING)
move.c:      if (LEADER (ch) != NULL && LEADER(ch) != ch && ch->position < POSITION_MEDITATING)
move.c:      if (ch->position == POSITION_MEDITATING)
move.c:      if (ch->position == POSITION_FALLING && door==DIR_UP) 
move.c:      if (ch->position == POSITION_FALLING && door==DIR_DOWN) 
move.c:      if (ch->position == POSITION_BASHED)
move.c:      if (ch->position == POSITION_GROUNDFIGHTING)
move.c:  in_room = ch->in_room;
move.c:  if (IS_PLAYER (ch) && (ch->pcdata->condition[COND_DRUNK] > 15 || IS_AFFECTED(ch, AFF_CONFUSE)) && number_range(1,7) == 2)
move.c:      && !IS_SET(ch->act, PLR_HOLYWALK))
move.c:  if (IS_PLAYER(ch) && !IS_SET (ch->act, PLR_HOLYWALK))
move.c:      check_room_more (ch->in_room);
move.c:      if (ch->pcdata->speedwalk > 700  && ch->position != POSITION_RUNNING)
move.c:	  if (ch->desc)
move.c:	    ch->desc->inbuf[0] = '\0';
move.c:	  ch->pcdata->speedwalk = 2*PULSE_VIOLENCE +1;
move.c:      for (ob = ch->in_room->more->contents; ob != NULL; ob = ob->next_content)
move.c:	      if (ob->pIndexData->value[7] != ch->pcdata->race)
move.c:	      if ((ch->pcdata->donated == 0 || ob->pIndexData->value[7] > ch->pcdata->donated))
move.c:		  for (obt = ch->carrying; obt != NULL; obt = obt->next_content)
move.c:      check_room_more(ch->in_room);
move.c:      for (fch = ch->in_room->more->people; fch != NULL; fch = fch_next)
move.c:	  fch_next = fch->next_in_room;
move.c:	  if (fch->pIndexData->guard != door) continue;
move.c:	  if (fch->pIndexData->act3 % 32 != 0)
move.c:	      if (IS_SET (fch->pIndexData->act3, ACT3_GUARD_DOOR))
move.c:		  if (IS_SET (fch->act, ACT_ATTITUDE))
move.c:	      if (IS_SET (fch->pIndexData->act3, ACT3_GUARD_DOOR_ALIGN) && (DIFF_ALIGN(ch, fch)))
move.c:		  sprintf (t, "%ss may not pass!", align_info[ch->pcdata->alignment].name);
move.c:	      if (IS_SET (fch->pIndexData->act3, ACT3_CLAN_GUARD) && fch->pIndexData->clan_guard_1 != 0 &&
move.c:		  clan_number (ch) != fch->pIndexData->clan_guard_1)
move.c:	      if (IS_SET(fch->pIndexData->act3, ACT3_SECT_GUARD) && fch->pIndexData->clan_guard_2 != 0 &&
move.c:		  clan_number_2 (ch) != fch->pIndexData->clan_guard_2)
move.c:      if (fch->move == 50)
move.c:      if (fch->move == 25)
move.c:      if (fch->move < 15)
move.c:      if (fch->move < 7)
move.c:	if (fch->move > 12)
move.c:	  fch->move -= 11;
move.c:	  fch->move = 1;
move.c:      fch->move -= 3;
move.c:      if (ch->pIndexData->mobtype != MOB_FISH)
move.c:	  ((IS_SET (ch->pIndexData->act3, ACT3_STAYROAD) &&
move.c:	   (IS_SET (ch->act, ACT_STAYOFFROAD) &&
move.c:      if (!IS_SET(ch->act, PLR_HOLYWALK) && (to_sector > SECT_SAVANNAH) && (to_sector < SECT_ICE))
move.c:	  if (to_sector == SECT_MOUNTAIN && !IS_SET(ch->act, PLR_HAS_MTN_BOOTS))
move.c:	      !IS_SET(ch->act, PLR_HAS_SCUBA) &&
move.c:	      !IS_SET(ch->act, PLR_HAS_BOAT))
move.c:	      !IS_SET(ch->act, PLR_HAS_BOAT))
move.c:	      if ((IS_SET(to_room->room_flags, ROOM_INDOORS) || IS_SET(to_room->room_flags, ROOM_UNDERGROUND)) && ch->pcdata->learned[gsn_swim] < 50)
move.c:	      if (!IS_AFFECTED(ch, AFF_FLYING) && number_range (0, 105) > ch->pcdata->learned[gsn_swim])
move.c:	    if (!IS_SET(ch->act, PLR_HAS_SNOWSHOES))
move.c:	move += (ch->pcdata->carry_weight /(weightmult * WGT_MULT))-1;
move.c:	if (ch->pcdata->carry_weight / WGT_MULT > 119)
move.c:	if (ch->pcdata->carry_weight / WGT_MULT > 199)
move.c:	  if (!IS_SET (ch->act, PLR_HOLYWALK) &&
move.c:	      !IS_SET(ch->act, PLR_HAS_SHOES) &&
move.c:    if (ch->move < move && RIDING (ch) == NULL)
move.c:    if (ch->move < 20 && number_range(1,7) == 2)
move.c:	  !IS_SET(ch->act, PLR_HAS_BOAT)))
move.c:	      && number_percent() > ch->pcdata->learned[gsn_swim])
move.c:      else if (ch->position == POSITION_RUNNING)
move.c:      fch_next = fch->next_in_room;
move.c:      if (fch->position < POSITION_STANDING || 
move.c:      if (IS_MOB(fch) && IS_SET(fch->pIndexData->act4, ACT4_LEAVESCRIPT))
move.c:		if (IS_MOB (fch) && fch->pIndexData->vnum == tr->attached_to_mob)
move.c:	  if (IS_SET (fch->act, PLR_HOLYLIGHT) || (IS_PLAYER (ch) && number_range (1, 75) > ch->pcdata->learned[gsn_sneak]))
move.c:      else if ((IS_MOB (ch) && IS_SET (ch->act, ACT_SCRAMBLE))
move.c:	       || (IS_PLAYER (ch) && ch->position == POSITION_RUNNING))
move.c:	  if (!is_same_group (fch, ch) || fch->position != POSITION_STANDING)
move.c:  if (((ch->hit < ch->max_hit / 3) &&    !IS_AFFECTED_EXTRA(ch, AFF_NOBLOOD)) || IS_AFFECTED(ch, AFF_WOUND))
move.c:      if (IS_PLAYER(ch) ||(IS_MOB (ch) && ch->pIndexData->mobtype != MOB_GHOST))
move.c:  if (ch->in_room == to_room)
move.c:  if (IS_SET(ch->in_room->room_flags, ROOM_LEAVESCRIPT))
move.c:	    if (ch->in_room->vnum == tr->attached_to_room)
move.c:		s->room = ch->in_room;
move.c:      in_room->more->people = ch->next_in_room;
move.c:	      prev->next_in_room = ch->next_in_room;
move.c:      in_room->light -= ch->pcdata->light;
move.c:	      if (ptrk->online== ch->pcdata->online_spot)
move.c:      if (IS_SET(ch->pIndexData->act4, ACT4_COMMANDSCRIPT))
move.c:      if (ch->in_room->command_objs < 0)
move.c:      (ch->height > INDOOR_FLY_HEIGHT)) 
move.c:  ch->in_room = to_room;
move.c:    ch->next_in_room = to_room->more->people;
move.c:      to_room->light += ch->pcdata->light;
move.c:	  ch->fgt->in_battle = TRUE;
move.c:	  if (ch->fgt)
move.c:	      ch->fgt->in_battle = FALSE;
move.c:	      ch->fgt->wasroomtwo = to_room->vnum;
move.c:	      if (ptrk->online== ch->pcdata->online_spot)
move.c:      if (IS_SET(ch->pIndexData->act4, ACT4_COMMANDSCRIPT))
move.c:	ch->in_room->command_objs++;
move.c:      if(ch->in_room->command_objs < 0)
move.c:	ch->in_room->command_objs = 0;
move.c:      if (IS_SET(ch->pIndexData->act4, ACT4_MOVESCRIPT))
move.c:		if (ch->pIndexData->vnum == tr->attached_to_mob)
move.c:  if (RIDING (ch) != NULL && ch->in_room != RIDING (ch)->in_room
move.c:	  check_fgt (ch->fgt->riding);
move.c:	  ch->fgt->riding->fgt->mounted_by = NULL;
move.c:	  ch->fgt->riding = NULL;
move.c:  else if (MOUNTED_BY (ch) != NULL && ch->in_room != MOUNTED_BY (ch)->in_room
move.c:	  check_fgt (ch->fgt->mounted_by);
move.c:	  ch->fgt->mounted_by->fgt->riding = NULL;
move.c:	  ch->fgt->mounted_by = NULL;
move.c:  if (IS_PLAYER(ch) && ch->position == POSITION_RUNNING && !IS_SET
move.c:      (ch->pcdata->act2, PLR_BRIEF))
move.c:      SET_BIT (ch->pcdata->act2, PLR_BRIEF);
move.c:      REMOVE_BIT (ch->pcdata->act2, PLR_BRIEF);
move.c:	    if (ch->in_room->vnum == tr->attached_to_room)
move.c:		s->room = ch->in_room;
move.c:      fch_next = fch->next_in_room;
move.c:	  if (IS_SET (fch->act, PLR_HOLYLIGHT) || (IS_PLAYER (ch) && number_range (1, 90) > ch->pcdata->learned[gsn_sneak]))
move.c:      else if ((IS_MOB (ch) && IS_SET (ch->act, ACT_SCRAMBLE))
move.c:	       || (IS_PLAYER (ch) && ch->position == POSITION_RUNNING))
move.c:	  if (fch->pcdata->no_quit_pk < 4)
move.c:	    fch->pcdata->no_quit_pk = 4; /* JRAJRA */
move.c:	  if (ch->pcdata->no_quit_pk < 4)
move.c:	    ch->pcdata->no_quit_pk = 4; /* JRAJRA */
move.c:      if (IS_MOB(fch) && IS_SET(fch->pIndexData->act4, ACT4_ENTERSCRIPT))
move.c:		if (IS_MOB (fch) && fch->pIndexData->vnum == tr->attached_to_mob)
move.c:      if (ch->pcdata->learned[gsn_search] > 40)
move.c:	    if (ch->in_room->exit[hh] && ch->in_room->exit[hh]->d_info && IS_SET (ch->in_room->exit[hh]->d_info->exit_info, EX_HIDDEN))
move.c:      fch_next = fch->next_in_room;
move.c:      if (MASTER (fch) == ch && fch->position >= POSITION_STANDING && FIGHTING (fch) == NULL && (!MASTER(ch) || MASTER(ch) == fch))
move.c:	  curr_room = ch->in_room;
move.c:			ch->pcdata->no_quit_pk = 5;
move.c:		      room_is_dark(ch->in_room)) || 
move.c:			  if (!is_first_letter_vowel(align_info[ch->pcdata->alignment].name))
move.c:				sprintf(buf, "You see +* A %s %s *+ arrive", align_info[ch->pcdata->alignment].name, race_info[ch->pcdata->race].name);
move.c:				sprintf(buf, "You see +* An %s %s *+ arrive", align_info[ch->pcdata->alignment].name, race_info[ch->pcdata->race].name);
move.c:			if (!is_first_letter_vowel(race_info[ch->pcdata->race].name))
move.c:				sprintf(buf, "You see a %s arrive", (race_info[ch->pcdata->race].name));
move.c:				sprintf(buf, "You see an %s arrive", (race_info[ch->pcdata->race].name));
move.c:	  REMOVE_BIT(ch->pcdata->act2, PLR_MAPPING);
move.c:      else if (ch->desc && IS_SET(ch->pcdata->act2, PLR_MAPPING))
move.c:	  int newx = ch->pcdata->x;
move.c:	  int newy = ch->pcdata->y;
move.c:	      MAP_WIDTH-2 || door == 4 || door == 5 || IS_SET(ch->pcdata->act2,
move.c:	      sprintf(buf, "\x1b[%d;%dr",MAP_HEIGHT,ch->pcdata->pagelen);
move.c:	      gotoxy(ch, ch->pcdata->x,ch->pcdata->y);
move.c:		  IS_SET(ch->pcdata->act2, PLR_VIEWPLAYERS))
move.c:		      for(fch = in_room->more->people; fch != NULL; fch=fch->next_in_room)
move.c:	      if (!found && in_room->more && in_room->more->people != NULL && IS_SET(ch->pcdata->act2, PLR_VIEWMOBS))
move.c:                   for (rch = in_room->more->people; rch != NULL; rch =rch->next_in_room)
move.c:		  write_to_buffer(ch->desc,color_table[in_room->color].code, 0);
move.c:		  if (IS_SET(ch->pcdata->act2, PLR_NOIBM))
move.c:              write_to_buffer(ch->desc, "\x1b[1;31mX", 0);
move.c:		ch->pcdata->y += (door-1);
move.c:		ch->pcdata->x += (2-door);
move.c:	      sprintf(buf, "\x1B[%d;1f", ch->pcdata->pagelen);
move.c:	  if (number_range(1,130) < ch->pcdata->learned[gsn_locate_trap])
move.c:      ch->pcdata->speedwalk += 2;
move.c:  if (ch->position != POSITION_STANDING)
move.c:  if (LEVEL (ch) < 100 && ch->in_room && (ch->in_room->sector_type == SECT_WATER_NOSWIM ||
move.c:			       ch->in_room->sector_type == SECT_WATER_SWIM))
move.c:	  if (ch->move < 5)
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING) {
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING) {
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING) {
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING) {
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING)
move.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING)
move.c:	  if ((pexit = ch->in_room->exit[door]) != NULL
move.c:  if ((pexit = ch->in_room->exit[door]) != NULL && pexit->d_info && IS_SET (pexit->d_info->exit_info,
move.c:  if ((pexit = ch->in_room->exit[door]) == NULL)
move.c:      pexit = ch->in_room->exit[door];
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:		for (rch = to_room->more->people; rch != NULL; rch = rch->next_in_room)
move.c:	      char_to_room(trapmob, ch->in_room);
move.c:	      check_room_more(ch->in_room);
move.c:	      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:	      char_to_room(trapmob, ch->in_room);
move.c:	      check_room_more(ch->in_room);
move.c:	      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:	      char_to_room(trapmob, ch->in_room);
move.c:	      check_room_more(ch->in_room);
move.c:	      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:      pexit = ch->in_room->exit[door];
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:		for (rch = to_room->more->people; rch != NULL; rch = rch->next_in_room)
move.c:	      char_to_room(trapmob, ch->in_room);
move.c:	      check_room_more(ch->in_room);
move.c:	      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
move.c:  if (IS_PLAYER (ch) && IS_SET (ch->act, PLR_HOLYWALK))
move.c:  ch->pcdata->carry_weight = 0;
move.c:  ch->pcdata->carry_number = 0;
move.c:  ch->pcdata->command_objs = 0;
move.c:  for (obj = ch->carrying; obj != NULL; obj = obj->next_content)
move.c:      ch->pcdata->carry_weight += get_obj_weight (obj);
move.c:      ch->pcdata->carry_number += get_obj_number (obj);
move.c:	ch->pcdata->command_objs++;
move.c:      pexit = ch->in_room->exit[door];
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:		for (rch = to_room->more->people; rch != NULL; rch = rch->next_in_room)
move.c:      pexit = ch->in_room->exit[door];
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:  for (gch = ch->in_room->more->people; gch; gch = gch->next_in_room)
move.c:      if (IS_MOB (gch) && IS_AWAKE (gch) && IS_SET (gch->act, ACT_SENTINEL))
move.c:  if (!is_member(ch, GUILD_THIEFG) && number_range(1,110) > ch->pcdata->learned[gsn_pick_lock])
move.c:      pexit = ch->in_room->exit[door];
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:  if (ch->fgt && ch->fgt->ears > 9)
move.c:  switch (ch->position)
move.c:      ch->wait = 0;
move.c:      ch->fgt->combat_delay_count = -5;
move.c:      if ((number_range (1, (pow.groundfight_stand + ((ch->ced->ground_pos
move.c:== FP_CHOKE_1 || ch->ced->ground_pos == FP_CHOKE_2 || ch->ced->ground_pos == FP_CHOKE_3) ? 1: 0))) != 1) && 
move.c:	  (ch->fgt) &&
move.c:	  (ch->fgt->fighting) &&
move.c:	       ch->fgt->fighting->pcdata->learned[gsn_grapple]))))))
move.c:	  if (ch->in_room && ((!IS_SET(ch->in_room->room_flags,ROOM_INDOORS) && !IS_SET(ch->in_room->room_flags, ROOM_UNDERGROUND)) || ch->height<= INDOOR_FLY_HEIGHT) && IS_SET (ch->pcdata->nat_abilities, AFF_FLYING))
move.c:	      SET_BIT (ch->affected_by, AFF_FLYING);
move.c:	  if (ch->in_room && ((!IS_SET(ch->in_room->room_flags,ROOM_INDOORS) && !IS_SET(ch->in_room->room_flags, ROOM_UNDERGROUND)) || ch->height<= INDOOR_FLY_HEIGHT)) { 
move.c:	    for (paf = ch->affected; paf != NULL; paf = paf->next)
move.c:		    SET_BIT (ch->affected_by, AFF_FLYING);
move.c:  switch (ch->position)
move.c:  if (pow.weather && IS_PLAYER (ch) && ch->in_room &&
move.c:      (ch->in_room->sector_type !=SECT_INSIDE) && (IS_OUTSIDE(ch) ||
move.c:ch->in_room->sector_type < SECT_CAVE))
move.c:	  (cur_temp(ch) + ch->pcdata->warmth < 40)) || 
move.c:	(cur_temp(ch) + ch->pcdata->warmth < 30)))
move.c:  switch (ch->position)
move.c:  if (IS_MOB (ch) || number_percent () < ch->pcdata->learned[gsn_sneak] + ch->pcdata->plus_sneak)
move.c:  if (ch->position != POSITION_STANDING && ch->position != POSITION_RESTING)
move.c:	REMOVE_BIT (ch->affected_by, AFF_HIDE);
move.c:			      number_range (1, 104) <= ch->pcdata->learned[gsn_hide] + ch->pcdata->plus_hide))
move.c:	SET_BIT (ch->affected_by, AFF_HIDE);
move.c:    if (ch->in_room && (IS_SET(ch->in_room->room_flags , ROOM_INDOORS) || IS_SET (ch->in_room->room_flags,ROOM_UNDERGROUND)) && (ch->height > INDOOR_FLY_HEIGHT)) 
move.c:  if (ch->position!=POSITION_STANDING) 
move.c:  if (IS_PLAYER (ch) && (IS_SET (ch->pcdata->nat_abilities, AFF_FLYING)))
move.c:      SET_BIT (ch->affected_by, AFF_FLYING);
move.c:  for (paf = ch->affected; paf != NULL; paf = paf->next)
move.c:      SET_BIT (ch->affected_by, AFF_FLYING);
move.c:  REMOVE_BIT (ch->affected_by, AFF_FLYING);
move.c:  if (!ch->in_room) return;
move.c:  while (VALID_EDGE (ch->in_room, DIR_DOWN)
move.c:	 && ch->in_room->sector_type == SECT_AIR)
move.c:      to_room = ch->in_room->exit[DIR_DOWN]->to_room;
move.c:  if (ch->position != POSITION_STANDING)
move.c:      pexit = ch->in_room->exit[door];
move.c:		  && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
move.c:	      if (dam >= ch->hit)
move.c:		ch->hit = 1;
move.c:	      char_to_room(trapmob, ch->in_room);
move.c:	      check_room_more(ch->in_room);
move.c:	      for(fch = ch->in_room->more->people; fch != NULL; fch = fch->next_in_room)
move.c:	      && pexit_rev->to_room == ch->in_room && pexit_rev->d_info)
note.c:  if (ch->ced->pnote != NULL)
note.c:      pnote = mem_alloc (sizeof (*ch->ced->pnote));
note.c:  ch->ced->pnote = pnote;
note.c:		       (pnote->date_stamp > ch->pcdata->last_note
note.c:		  && ch->pcdata->last_note < pnote->date_stamp)
note.c:		  ch->pcdata->last_note = UMAX (ch->pcdata->last_note, pnote->date_stamp);
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      string_append (ch, &ch->ced->pnote->text);
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      fullscreen_editor (ch, &ch->ced->pnote->text);
note.c:      strcpy (buf, ch->ced->pnote->text);
note.c:      free_string (ch->ced->pnote->text);
note.c:      ch->ced->pnote->text = str_dup (buf);
note.c:      ch->ced->pnote->lines += 1;
note.c:      if (ch->ced->pnote == NULL)
note.c:      if (ch->ced->pnote->lines == 0)
note.c:      str = ch->ced->pnote->text;
note.c:      for (num = 1; num <= ch->ced->pnote->lines; num++)
note.c:      strncpy (new_buf, ch->ced->pnote->text, cnt);
note.c:      free_string (ch->ced->pnote->text);
note.c:      ch->ced->pnote->text = str_dup (new_buf);
note.c:      ch->ced->pnote->lines -= 1;
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      free_string (ch->ced->pnote->subject);
note.c:      ch->ced->pnote->subject = str_dup (argy);
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      free_string (ch->ced->pnote->to_list);
note.c:      ch->ced->pnote->to_list = str_dup (argy);
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      if (ch->ced->pnote != NULL)
note.c:	  free_string (ch->ced->pnote->text);
note.c:	  free_string (ch->ced->pnote->subject);
note.c:	  free_string (ch->ced->pnote->to_list);
note.c:	  free_string (ch->ced->pnote->date);
note.c:	  free_string (ch->ced->pnote->sender);
note.c:	  ch->ced->pnote->next = note_free;
note.c:	  note_free = ch->ced->pnote;
note.c:	  ch->ced->pnote = NULL;
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      if (ch->ced->pnote == NULL)
note.c:	       ch->ced->pnote->sender,
note.c:	       ch->ced->pnote->subject,
note.c:	       ch->ced->pnote->to_list,
note.c:	       ch->ced->pnote->lines
note.c:      strcat (buf1, ch->ced->pnote->text);
note.c:      if (ch->ced->pnote == NULL)
note.c:      if (!str_cmp (ch->ced->pnote->to_list, ""))
note.c:      if (!str_cmp (ch->ced->pnote->subject, ""))
note.c:      if (IS_SET(ch->act, PLR_LAMER))
note.c:      ch->pcdata->online_spot->notes_this_reboot++;
note.c:      if(ch->pcdata->online_spot->notes_this_reboot > 8)
note.c:      ch->ced->pnote->next = NULL;
note.c:      ch->ced->pnote->board_num = board_here;
note.c:      ch->ced->pnote->date = str_dup (strtime);
note.c:      ch->ced->pnote->date_stamp = current_time;
note.c:	  note_list = ch->ced->pnote;
note.c:	  pnote->next = ch->ced->pnote;
note.c:      pnote = ch->ced->pnote;
note.c:      ch->ced->pnote = NULL;
object.c:      obj->next_content = ch->carrying;
object.c:      ch->carrying = obj;
object.c:	  ch->pcdata->carry_number += get_obj_number (obj);
object.c:	  ch->pcdata->carry_weight += get_obj_weight (obj);
object.c:	    ch->pcdata->command_objs++;
object.c:      if (ch->carrying == obj)
object.c:	  ch->carrying = obj->next_content;
object.c:	  for (prev = ch->carrying; prev != NULL; prev = ((!prev->next_content) ? NULL : prev->next_content))
object.c:	  ch->pcdata->carry_number -= get_obj_number (obj);
object.c:	  ch->pcdata->carry_weight -= get_obj_weight (obj);
object.c:	    ch->pcdata->command_objs--;
oc.c:  if (!ch->pcdata || !ch->pcdata->temp)
oc.c:  ch->pcdata->temp->next = temp_free;
oc.c:  temp_free = ch->pcdata->temp;
oc.c:  ch->pcdata->temp = NULL;
oc.c:  if (!ch || !ch->pcdata)
oc.c:  if (ch->pcdata->temp == NULL)
oc.c:    ch->pcdata->temp = new_temp ();
oc.c:  if (ch->ced == NULL)
oc.c:  if (ced_first == ch->ced)
oc.c:      ced_first = ch->ced->next;
oc.c:	if (f->next == ch->ced)
oc.c:	    f->next = ch->ced->next;
oc.c:  ch->ced->pnote = NULL;
oc.c:  ch->ced->attackers[0] = NULL;
oc.c:  ch->ced->attackers[1] = NULL;
oc.c:  ch->ced->attackers[2] = NULL;
oc.c:  ch->ced->attackers[3] = NULL;
oc.c:  ch->ced->in_boat = NULL;
oc.c:  ch->ced->came_from_boat = NULL;
oc.c:  ch->ced->wasroom = 0;
oc.c:  ch->ced->pnote = NULL;
oc.c:  ch->ced->original = NULL;
oc.c:  ch->ced->has_yelled = FALSE;
oc.c:  ch->ced->scanning = FALSE;
oc.c:  ch->ced->was_in_room = NULL;
oc.c:  ch->ced->reply = NULL;
oc.c:  ch->ced->fight_ops = 0xFFFFFFFF;
oc.c:  ch->ced->ground_pos = 0;
oc.c:  ch->ced->wimpy = 5;
oc.c:  ch->ced->cur_line = 0;
oc.c:  ch->ced->scr_wait = 0;
oc.c:  ch->ced->wait_type = 0;
oc.c:  ch->ced->next = ced_free;
oc.c:  ced_free = ch->ced;
oc.c:  ch->ced = NULL;
oc.c:  if (ch->ced == NULL)
oc.c:    ch->ced = new_ced ();
oc.c:  if (ch->desc->connected == CON_MEDITOR)
oc.c:      pMob = (MOB_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_OEDITOR)
oc.c:      pObj = (OBJ_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_MEDITOR)
oc.c:      pMob = (MOB_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_OEDITOR)
oc.c:      pObj = (OBJ_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_MEDITOR)
oc.c:      pMob = (MOB_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_OEDITOR)
oc.c:      pObj = (OBJ_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_MEDITOR)
oc.c:      pMob = (MOB_PROTOTYPE *) ch->desc->pEdit;
oc.c:  if (ch->desc->connected == CON_OEDITOR)
oc.c:      pObj = (OBJ_PROTOTYPE *) ch->desc->pEdit;
oc.c:  pArea = ch->in_room->area;
oc.c:  ch->desc->pEdit = (void *) pArea;
oc.c:  ch->desc->connected = CON_AEDITOR;
oc.c:  if (!ch->desc)
oc.c:      ch->desc->pEdit = s;
oc.c:      ch->desc->connected = CON_SOCEDIT;
oc.c:	  ch->desc->pEdit = s;
oc.c:	  ch->desc->connected = CON_SOCEDIT;
oc.c:  pRoom = ch->in_room;
oc.c:  ch->desc->connected = CON_REDITOR;
oc.c:      ch->desc->pEdit = (void *) pObj;
oc.c:      ch->desc->connected = CON_OEDITOR;
oc.c:	  ch->desc->pEdit = (void *) pObj;
oc.c:	  ch->desc->connected = CON_OEDITOR;
oc.c:      ch->desc->pEdit = (void *) pMob;
oc.c:      ch->desc->connected = CON_MEDITOR;
oc.c:	  ch->desc->pEdit = (void *) pMob;
oc.c:	  ch->desc->connected = CON_MEDITOR;
oc.c:    ch->fgt->attacker_turn = FALSE;
oc.c:      ch->desc->pEdit = (void *) ClanData;
oc.c:      ch->desc->connected = CON_CEDITOR;
oc.c:	  ch->desc->pEdit = (void *) ClanData;
oc.c:	  ch->desc->connected = CON_CEDITOR;
oc.c:  ch->fgt->attacker_turn = TRUE;
oc.c:      ch->desc->pEdit = (void *) ClanData;
oc.c:      ch->desc->connected = CON_CEDITOR;
oc.c:	  ch->desc->pEdit = (void *) ClanData;
oc.c:	  ch->desc->connected = CON_CEDITOR;
oc.c:      sprintf (buf, "\x1B[1;1f\x1B[K\x1B[2;1f\x1B[K\x1B[3;1f\x1B[K\x1B[4;1f\x1B[K\x1B[5;1f\x1B[K\x1B[6;1f\x1B[K\x1B[7;1f\x1B[K\x1B[8;1f\x1B[K\x1B[9;1f\x1B[K\x1B[10;%dr", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:	  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:  sprintf (buf, "\x1B[%d;1f\x1B[K", ch->pcdata->pagelen);
oc.c:  ROOM_DATA *pRoom = ch->in_room;
oc.c:  if (LEVEL (ch) > IMM_LEVEL && !IS_REAL_GOD (ch) && ch->in_room->area->open == 1)
oc.c:  pArea = ch->in_room->area;
oc.c:	  add_reset (ch->in_room, pReset, atoi (arg1));
oc.c:      if (ch->in_room->more && ch->in_room->more->reset_first != NULL)
oc.c:  if (!IS_BUILDER (ch, ch->in_room->area))
oc.c:      if (!ch->in_room || !ch->in_room->area)
oc.c:      range1 = ch->in_room->area->lvnum;
oc.c:      range2 = ch->in_room->area->uvnum;
oc.c:      send_to_char (ch->in_room->area->repop, ch);
oc.c:      reset_room (ch->in_room);
oc.c:      ROOM_DATA *pRoom = ch->in_room;
oc.c:      check_room_more (ch->in_room);
oc.c:	  if (ch->in_room->more->reset_first == NULL)
oc.c:	  add_reset (ch->in_room, pReset, atoi (arg1));
oc.c:    pArea = ch->in_room->area;
oc.c:    pArea = ch->in_room->area;
oc.c:      save_area (ch->in_room->area);
oedit.c:  pObj = (OBJ_PROTOTYPE *) ch->desc->pEdit;
oedit.c:	    ch->desc->pEdit = (void *) pObj;
oedit.c:	    ch->desc->pEdit = NULL;
oedit.c:	    ch->desc->connected = CON_PLAYING;
pb.c:	  if (ch->pcdata->level != (player->player_level))
pb.c:	      player->player_last_login = (int) ch->pcdata->logon;
pb.c:		strcpy (player->email_address, ch->pcdata->email);
pb.c:	      player->player_level = ch->pcdata->level;
pb.c:	      player->player_remort_times = ch->pcdata->remort_times;
pb.c:	      player->player_created = ch->pcdata->created;
pb.c:      player->player_last_login = (int) ch->pcdata->logon;
pb.c:      strcpy (player->email_address, ch->pcdata->email);
pb.c:      player->player_level = ch->pcdata->level;
pb.c:      player->player_remort_times = ch->pcdata->remort_times;
pb.c:      player->player_created = ch->pcdata->created;
pc_wiz.c:    if (!ch->desc)
pc_wiz.c:  ch->desc->connected = CON_SHELL;
pc_wiz.c:    if (!ch->desc)
pc_wiz.c:  if (!ch->desc)
pc_wiz.c:  ch->desc->fdpair[0] = temp_fds[0];	/* Pipe in */
pc_wiz.c:  fcntl (ch->desc->fdpair[0], F_SETFL, O_NONBLOCK);
pc_wiz.c:  ch->desc->fdpair[1] = temp_fds[1];	/* Pipe out */
pc_wiz.c:      close (ch->desc->fdpair[1]);
pc_wiz.c:      fcntl (ch->desc->fdpair[0], F_SETFL, O_NONBLOCK);
pc_wiz.c:      close (ch->desc->fdpair[1]);
pc_wiz.c:      close (ch->desc->fdpair[0]);
pc_wiz.c:  close (ch->desc->fdpair[0]);
pc_wiz.c:      if (c == ch->desc)
pc_wiz.c:  write (ch->desc->descriptor, will_echo, strlen (will_echo));
pc_wiz.c:  write (ch->desc->descriptor, will_suppress_ga, strlen (will_suppress_ga));
pc_wiz.c:  route_io (ch->desc->descriptor, (int) master_fd);
pc_wiz.c:  close (ch->desc->fdpair[1]);
pedit.c:  victim = (CHAR_DATA *) ch->desc->pEdit;
pedit.c:      ch->desc->connected = CON_PLAYING;
pedit.c:      ch->desc->pEdit = NULL;
pedit.c:      ch->desc->connected = CON_PLAYING;
pedit.c:      ch->desc->pEdit = NULL;
pedit.c:  ch->desc->pEdit = (void *) victim;
pedit.c:  ch->desc->connected = CON_PEDITOR;
pedit.c:  int oldrace = ch->pcdata->race;
pedit.c:  if (ch->pcdata->race >=0 && ch->pcdata->race < RACE_COUNT && str_cmp(race_info[ch->pcdata->race].name, "blank"))
pedit.c:      REMOVE_BIT(ch->pcdata->nat_abilities,race_info[ch->pcdata->race].affect_bits);
pedit.c:      REMOVE_BIT(ch->pcdata->nat_abilities2, race_info[ch->pcdata->race].affect_bits2);
pedit.c:      REMOVE_BIT( ch->affected_by,race_info[ch->pcdata->race].affect_bits);
pedit.c:      REMOVE_BIT(ch->more_affected_by, race_info[ch->pcdata->race].affect_bits2);
pedit.c:      REMOVE_BIT(ch->pcdata->augments, race_info[ch->pcdata->race].nat_augments);
pedit.c:	  ch->pcdata->stat[i] -= race_info[ch->pcdata->race].limits[i];
pedit.c:      ch->max_hit -= (LEVEL(ch) * race_info[ch->pcdata->race].hps_bonus);
pedit.c:      if (ch->max_hit < 10) ch->max_hit = 10;
pedit.c:      ch->damroll -= race_info[ch->pcdata->race].combat_damage_bonus;
pedit.c:    ch->pcdata->learned[i] = -100;
pedit.c:  ch->pcdata->learn = LEVEL(ch) +2;
pedit.c:  ch->pcdata->practice =
pedit.c:  ch->pcdata->race = newrace;
pedit.c:	ch->pcdata->stat[i] += race_info[ch->pcdata->race].limits[i];
pedit.c:  ch->pcdata->nat_abilities |= race_info[ch->pcdata->race].affect_bits;
pedit.c:  ch->pcdata->nat_abilities |= align_info[ch->pcdata->alignment].affect_bits;
pedit.c:  ch->affected_by |= ch->pcdata->nat_abilities;
pedit.c:  ch->pcdata->nat_abilities2 |= race_info[ch->pcdata->race].affect_bits2;
pedit.c:  ch->pcdata->nat_abilities2 |= align_info[ch->pcdata->alignment].affect_bits2;
pedit.c:  ch->more_affected_by |= ch->pcdata->nat_abilities2;
pedit.c:  ch->pcdata->augments |= race_info[ch->pcdata->race].nat_augments;
pedit.c:  ch->pcdata->augments |= align_info[ch->pcdata->alignment].nat_augments;
pedit.c:  ch->max_hit += (LEVEL(ch) * race_info[ch->pcdata->race].hps_bonus);
pedit.c:  if (ch->max_hit < 10) ch->max_hit = 10;
pedit.c:  ch->damroll += race_info[ch->pcdata->race].combat_damage_bonus;
pedit.c:  ch->height = number_range (race_info[ch->pcdata->race].height_min, race_info[ch->pcdata->race].height_max);
pedit.c:  sprintf(buf, "You went from being a %s to being a %s.\n\r", ((oldrace >= 0 && oldrace < RACE_COUNT && str_cmp(race_info[oldrace].name, "blank")) ? race_info[oldrace].name : "Something"), ((ch->pcdata->race >= 0 && ch->pcdata->race < RACE_COUNT && str_cmp(race_info[ch->pcdata->race].name, "blank")) ? race_info[ch->pcdata->race].name : "Something"));
pedit.c:  int oldalign = ch->pcdata->alignment;
pedit.c:  if (ch->pcdata->alignment >=0 && ch->pcdata->alignment < NUM_ALIGN && str_cmp(align_info[ch->pcdata->alignment].name, "blank"))
pedit.c:      REMOVE_BIT(ch->pcdata->nat_abilities,race_info[ch->pcdata->race].affect_bits);
pedit.c:      REMOVE_BIT(ch->pcdata->nat_abilities2, race_info[ch->pcdata->race].affect_bits2);
pedit.c:      REMOVE_BIT(ch->affected_by,race_info[ch->pcdata->race].affect_bits);
pedit.c:      REMOVE_BIT(ch->more_affected_by, race_info[ch->pcdata->race].affect_bits2);
pedit.c:      REMOVE_BIT(ch->pcdata->augments, race_info[ch->pcdata->race].nat_augments);
pedit.c:	  ch->pcdata->stat[i] -= align_info[ch->pcdata->alignment].limits[i];
pedit.c:      ch->max_hit -= (LEVEL(ch) * align_info[ch->pcdata->alignment].hps_bonus);
pedit.c:      if (ch->max_hit < 10) ch->max_hit = 10;
pedit.c:      ch->damroll -= align_info[ch->pcdata->alignment].combat_damage_bonus;
pedit.c:  if( LEVEL(ch) != pow.level_to_choose || ch->pcdata->remort_times > 0)
pedit.c:      ch->pcdata->learned[i] = -100;
pedit.c:  ch->pcdata->learn = LEVEL(ch) +2;
pedit.c:  ch->pcdata->practice =
pedit.c:  ch->height = number_range (race_info[ch->pcdata->race].height_min, race_info[ch->pcdata->race].height_max);
pedit.c:  ch->pcdata->alignment = newalign;
pedit.c:      ch->pcdata->stat[i] += align_info[ch->pcdata->alignment].limits[i];
pedit.c:  ch->pcdata->nat_abilities |= race_info[ch->pcdata->race].affect_bits;
pedit.c:  ch->pcdata->nat_abilities |= align_info[ch->pcdata->alignment].affect_bits;
pedit.c:  ch->affected_by |= ch->pcdata->nat_abilities;
pedit.c:  ch->pcdata->nat_abilities2 |= race_info[ch->pcdata->race].affect_bits2;
pedit.c:  ch->pcdata->nat_abilities2 |= align_info[ch->pcdata->alignment].affect_bits2;
pedit.c:  ch->more_affected_by |= ch->pcdata->nat_abilities2;
pedit.c:  ch->pcdata->augments |= align_info[ch->pcdata->alignment].nat_augments;
pedit.c:  ch->pcdata->augments |= race_info[ch->pcdata->race].nat_augments;
pedit.c:  ch->max_hit += (LEVEL(ch) * align_info[ch->pcdata->alignment].hps_bonus);
pedit.c:  if (ch->max_hit < 10) ch->max_hit = 10;
pedit.c:  ch->damroll += align_info[ch->pcdata->alignment].combat_damage_bonus;
pets.c:      if (ch->pcdata->pet_temp[k] != 0)
pets.c:	  if ((mid = get_mob_index (ch->pcdata->pet_temp[k])) == NULL)
pets.c:	      ch->pcdata->pet_temp[k] = 0;
pets.c:	  char_to_room (mob, ch->in_room);
pets.c:	  ch->pcdata->number_pets++;
pets.c:	  mob->hit = ch->pcdata->pet_hps[k];
pets.c:	  mob->move = ch->pcdata->pet_move[k];
pinfo.c:	    for (rch = victim->in_room->more->people; rch != NULL; rch = rch->next_in_room)
pinfo.c:	    for (rch = victim->in_room->more->people; rch != NULL; rch = rch->next_in_room)
pknumb.c:	  for (gch = curr_room->more->people; gch != NULL; gch =gch->next_in_room) 
power.c:		if (ch->pcdata->remort_times == 0)
power.c:	      remort_mult = ch->pcdata->remort_times;
power.c:	    up_hitgain = pow.hitgain[jh][4] + (ch->pcdata->remort_times) * pow.rem_hitgain[jhr][4];
power.c:	    low_hitgain = pow.hitgain[jh][3] + (ch->pcdata->remort_times) * pow.rem_hitgain[jhr][3];
power.c:	    hitgain += race_info[ch->pcdata->race].hps_bonus;
power.c:	    hitgain += align_info[ch->pcdata->alignment].hps_bonus;
power.c:      ch->max_hit += hitgain;
power.c:      ch->max_move += movegain;
power.c:      if (ch->pcdata->remort_times > 0)
power.c:  ch->max_hit = init_hp;
power.c:  ch->max_move = init_mp;
prompt.c:  if (ch->wait > 1)
prompt.c:  if (ch->pcdata->tickcounts > 11)
prompt.c:  if (ch->fgt && ch->fgt->ears > 10)
prompt.c:      sprintf (buf, "[%d] ", ch->fgt->ears - 10);
prompt.c:  if (ch->position == POSITION_CASTING && FIGHTING (ch) != NULL)
prompt.c:  if (ch->position == POSITION_BASHED)
prompt.c:  if (ch->position == POSITION_SHOOTING)
prompt.c:  ii = ch->position;
prompt.c:  ch->position = POSITION_STANDING;
prompt.c:  ch->pcdata->cursor = 0;
prompt.c:  strcpy (rest, interpret_line (ch->pcdata->rprompt, ch));
prompt.c:      if (*t == '\n' || ch->pcdata->cursor > 79)
prompt.c:	  ch->pcdata->cursor = 0;
prompt.c:      ch->pcdata->cursor++;
prompt.c:  ch->pcdata->cursor++;
prompt.c:  ch->position = ii;
prompt.c:  if (ch->desc && ch->desc->host[29] == 1)
prompt.c:    gotoxy (ch, ch->pcdata->cursor, ch->pcdata->pagelen);
prompt.c:  if (ch->desc && ch->desc->host[29] == 1)
prompt.c:      send_to_char (ch->desc->inbuf, ch);
prompt.c:      ch->pcdata->cursor += strlen (ch->desc->inbuf);
prompt.c:  ii = ch->position;
prompt.c:  ch->position = POSITION_STANDING;
prompt.c:  ch->position = ii;
prompt.c:  if (ch->pcdata->rprompt)
prompt.c:    free_string (ch->pcdata->rprompt);
prompt.c:  ch->pcdata->rprompt = str_dup (prompts[(option - 'A')]);
prse.c:	  if (ch->affected != NULL)
prse.c:	      for (paf = ch->affected; paf != NULL; paf = paf->next)
prse.c:	  if (!ch->ced)
prse.c:	  if (ch->pcdata->condition[COND_DRUNK] > 10)
prse.c:	  if (ch->pcdata->condition[COND_FULL] < 10 &&
prse.c:	      ch->pcdata->condition[COND_FULL] > 5)
prse.c:	  if (ch->pcdata->condition[COND_THIRST] < 10 &&
prse.c:	      ch->pcdata->condition[COND_THIRST] > 5)
prse.c:	  if (ch->pcdata->condition[COND_FULL] < 5 &&
prse.c:	      ch->pcdata->condition[COND_FULL] > 0)
prse.c:	  if (ch->pcdata->condition[COND_THIRST] < 5 &&
prse.c:	      ch->pcdata->condition[COND_THIRST] > 0)
prse.c:	  if (ch->pcdata->condition[COND_THIRST] < 1)
prse.c:	  if (ch->pcdata->condition[COND_FULL] < 1)
prse.c:  	  sprintf(bf, "%d", (race_info[ch->pcdata->race].max_skills +
prse.c:align_info[ch->pcdata->alignment].max_skills+
prse.c:(ch->pcdata->remort_times+1)/2) - tally_spsk(ch, 0));
prse.c: 	  sprintf(bf, "%d", (race_info[ch->pcdata->race].max_spells +
prse.c:align_info[ch->pcdata->alignment].max_spells+ (ch->pcdata->remort_times)- tally_spsk(ch, 1)));
prse.c:       sprintf(bf, "%d", (race_info[ch->pcdata->race].max_profs +
prse.c:align_info[ch->pcdata->alignment].max_profs+ (ch->pcdata->remort_times+1)/2) - tally_spsk(ch, 2));
prse.c:	    sprintf (bf, "%d", ch->in_room->vnum);
prse.c:	  sprintf (bf, "%d", ch->pcdata->carry_number);
prse.c:	  sprintf (bf, "%d", (ch->gold * 100) + ch->copper);
prse.c:	  sprintf (bf, "%ld", ch->pcdata->bank);
prse.c:	  sprintf(bf, "%d", ch->pcdata->deaths);
prse.c:	  if (!ch->ced)
prse.c:		(ch->pcdata->learned[gsn_parry] == -100 ? 0 : ch->pcdata->learned[gsn_parry] / 7) +
prse.c:		(ch->pcdata->learned[gsn_dodge] == -100 ? 0 : ch->pcdata->learned[gsn_dodge] / 6) +
prse.c:		(ch->pcdata->learned[gsn_evade] == -100 ? 0 : ch->pcdata->learned[gsn_evade] / 6) +
prse.c:		(ch->pcdata->learned[gsn_shield_block] == -100 ? 0 : ch->pcdata->learned[gsn_shield_block] / 9) +
prse.c:		(IS_SET (ch->ced->fight_ops, F_AGGRESSIVE) ? 0 : 4);
prse.c:      if (!str_infix ("guil", code) && ch->pcdata->guilds != 0 && IS_PLAYER (ch))
prse.c:	  sprintf (bf, "%ld", ch->hit);
prse.c:	  sprintf (bf, "%ld", ch->max_hit);
prse.c:		   ch->height / 12, ch->height % 12);
prse.c:	  sprintf (bf, "%d Stn., %d Peb.", ch->pcdata->carry_weight/WGT_MULT, ch->pcdata->carry_weight % WGT_MULT);
prse.c:	  sprintf (bf, "%d", ch->pcdata->killpoints);
prse.c:	  sprintf (bf, "%d", (IS_MOB (ch) ? 0 : ch->pcdata->learn));
prse.c:	  sprintf (bf, "%d", ch->move);
prse.c:	  sprintf (bf, "%d", ch->max_move);
prse.c:	  sprintf (bf, "%ld", ch->pcdata->pklevels);
prse.c:	  sprintf (bf, "%ld", ch->pcdata->pkhelpers);
prse.c:	  sprintf (bf, "%d", ch->pcdata->pkills);
prse.c:	  sprintf (bf, "%d", ch->pcdata->pkilled);
prse.c:	  sprintf (bf, "%ld", ch->pcdata->pkers);
prse.c:	  if (!ch->ced)
prse.c:	  switch (ch->position)
prse.c:	  sprintf (bf, "%d", (IS_MOB (ch) ? 0 : ch->pcdata->practice));
prse.c:	  int hours = ((ch->pcdata->played) + (((int) (current_time - ch->pcdata->logon)))) / 3600;
prse.c:	    sprintf (bf, "%d", ch->pcdata->stat[0]);
prse.c:	    sprintf (bf, "%d", ch->pcdata->stat[1] );
prse.c:	    sprintf (bf, "%d", ch->pcdata->stat[2]);
prse.c:	    sprintf (bf, "%d", ch->pcdata->stat[3]);
prse.c:	    sprintf (bf, "%d", ch->pcdata->stat[4]);
prse.c:	  sprintf (bf, "%d", ch->pcdata->remort_times);
prse.c:	  sprintf (bf, "%s", race_info[ch->pcdata->race].name);
prse.c:	  if (ch->pcdata->sex == SEX_MALE) sprintf (bf, "Male   ");
prse.c:	  else if (ch->pcdata->sex == SEX_FEMALE) sprintf (bf, "Female ");
prse.c:	      ch->pcdata->sex = SEX_NEUTRAL;
prse.c:	  sprintf(bf, "%d", (race_info[ch->pcdata->race].max_skills + align_info[ch->pcdata->alignment].max_skills + (ch->pcdata->remort_times+1)/2));
prse.c: 	  sprintf(bf, "%d", (race_info[ch->pcdata->race].max_spells +
prse.c:align_info[ch->pcdata->alignment].max_spells+
prse.c:(ch->pcdata->remort_times)));
prse.c:	  sprintf(bf, "%d", (race_info[ch->pcdata->race].max_profs + align_info[ch->pcdata->alignment].max_profs+ (ch->pcdata->remort_times+1)/2));
prse.c:	  sprintf (bf, "%ld", ch->pcdata->total_wps);
prse.c:	  sprintf (bf, "%d", ch->pcdata->totalkills);
prse.c:	      if (ch->pcdata->warmth > 0)
prse.c:		  switch (ch->pcdata->warmth / 10)
prse.c:	  sprintf (bf, "%d", (!ch->ced ? 0 : ch->ced->wimpy));
prse.c:	  if (ch->pcdata->carry_weight < weightmult *1)
prse.c:	  else if (ch->pcdata->carry_weight < (weightmult * 2))
prse.c:	  else if (ch->pcdata->carry_weight < (weightmult * 3))
prse.c:	  else if (ch->pcdata->carry_weight < (weightmult * 4))
prse.c:	  else if (ch->pcdata->carry_weight < (weightmult * 5))
prse.c:	  sprintf (bf, "%ld", ch->pcdata->warpoints);
prse.c:	  sprintf (bf, "%ld", ch->exp);
prse.c:	  sprintf (bf, "%ld", ((FIND_EXP (LEVEL (ch), ch->race)) - ch->exp));
ptrack.c:  if (ch->position == POSITION_FIGHTING)
ptrack.c:if (ch->pcdata->voting_on == 999 || HUNTING(ch) != NULL)
ptrack.c:if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3 && !is_member (ch, GUILD_RANGER))
ptrack.c:    ch->pcdata->voting_on = 0;
ptrack.c:      ch->pcdata->voting_on = 0;
ptrack.c:	      free_string (ch->fgt->phunting);
ptrack.c:	      ch->fgt->phunting = NULL;
ptrack.c:	      ch->pcdata->voting_on = 0;
ptrack.c:	  ch->pcdata->voting_on = 0;
ptrack.c:	    ch->fgt->phunting = str_dup (arg);
ptrack.c:	  ch->pcdata->tickcounts = 9;
ptrack.c:          if (ch->position == POSITION_CASTING) {
ptrack.c:	  ch->pcdata->voting_on = 998;
ptrack.c:	  ch->pcdata->voting_on = 0;
ptrack.c:      ch->pcdata->tickcounts = 9;
ptrack.c:          if (ch->position == POSITION_CASTING) {
ptrack.c:      ch->pcdata->voting_on = 998;
ptrack.c:  if (ch->position == POSITION_FIGHTING)
ptrack.c:  if (IS_PLAYER (ch) && ch->pcdata->learned[gsn_track] < 3 && !is_member (ch, GUILD_RANGER))
ptrack.c:	ch->pcdata->voting_on = 0;
ptrack.c:      (ch->pcdata->learned[gsn_track] < number_range (0, 50) && !is_member (ch, GUILD_RANGER)))
ptrack.c:      ch->pcdata->voting_on=0;
ptrack.c:  for (ptr = ch->in_room->ptracks; ptr != NULL; ptr = ptr->next_track_in_room)
ptrack.c:	      if (ch->fgt->phunting != NULL )
ptrack.c:		  free_string (ch->fgt->phunting);
ptrack.c:		  ch->fgt->phunting = NULL;
ptrack.c:	      ch->pcdata->voting_on = 0;
ptrack.c:		ch->fgt->phunting = str_dup (arg);
quit.c:  if (ch->pcdata->quiet != 2)
quit.c:    ch->pcdata->quiet = 2;
quit.c:    ch->pcdata->quiet = 0;
quit.c:  if (ch->pcdata->quiet == 0)
quit.c:  if (ch->pcdata->quiet == 2)
quit.c:    if (!ch->pcdata->alias[k] || ch->pcdata->alias[k][0] == '\0'
quit.c:        || !ch->pcdata->aliasname[k] || ch->pcdata->aliasname[k][0] == '\0')
quit.c:          if (ch->pcdata->alias[k] && ch->pcdata->alias[k][0] != '\0'
quit.c:          && ch->pcdata->aliasname[k] && ch->pcdata->aliasname[k][0] != '\0')
quit.c:              for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:              for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:              for (iio = ch->pcdata->alias[k]; *iio != '\0'; iio++)
quit.c:                     k + 1, ch->pcdata->aliasname[k], ch->pcdata->alias[k]);
quit.c:              for (iio = ch->pcdata->alias[k]; *iio != '\0'; iio++)
quit.c:          if (ch->pcdata->aliasname[k] && !str_cmp (arg1, ch->pcdata->aliasname[k]))
quit.c:              free_string (ch->pcdata->aliasname[k]);
quit.c:              free_string (ch->pcdata->alias[k]);
quit.c:              ch->pcdata->aliasname[k] = NULL;
quit.c:              ch->pcdata->alias[k] = NULL;
quit.c:                  if (!ch->pcdata->aliasname[k])
quit.c:                  free_string (ch->pcdata->aliasname[k]);
quit.c:                  free_string (ch->pcdata->alias[k]);
quit.c:                  ch->pcdata->aliasname[k] = NULL;
quit.c:                  ch->pcdata->alias[k] = NULL;
quit.c:      if (ch->pcdata->aliasname[k] &&
quit.c:          !aliasok (ch->pcdata->aliasname[k], argy))
quit.c:      if (ch->pcdata->aliasname[k] && !str_cmp (arg1, ch->pcdata->aliasname[k]))
quit.c:          free_string (ch->pcdata->alias[k]);
quit.c:          free_string (ch->pcdata->aliasname[k]);
quit.c:          ch->pcdata->aliasname[k] = str_dup (arg1);
quit.c:          ch->pcdata->alias[k] = str_dup (argy);
quit.c:          for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:          for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:          for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
quit.c:        if (ch->pcdata->aliasname[k] == '\0' || !ch->pcdata->aliasname[k]
quit.c:            || !ch->pcdata->alias[k] || ch->pcdata->alias[k] == '\0')
quit.c:            ch->pcdata->aliasname[k] = str_dup (arg1);
quit.c:            ch->pcdata->alias[k] = str_dup (argy);
quit.c:            for (t = ch->pcdata->alias[k]; *t != '\0'; t++)
quit.c:            for (t = ch->pcdata->aliasname[k]; *t != '\0'; t++)
quit.c:            for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
quit.c:    if (IS_MOB (ch) && ch->desc != NULL)
quit.c:  if (ch->in_room && ch->in_room->sector_type == SECT_WATER_NOSWIM)
quit.c:  if (ch->desc && !ch->desc->character)
quit.c:      ch->desc->character = ch;
quit.c:  if (ch->in_room && ch->in_room->vnum > 440 && ch->in_room->vnum < 700 &&
quit.c:      !ch->in_room->area->can_quit)
quit.c:  if ((ch->pcdata->no_quit_pk > 0 || ch->pcdata->no_quit > 0) && LEVEL(ch) < MAX_LEVEL)
quit.c:	       UMAX(ch->pcdata->no_quit,  ch->pcdata->no_quit_pk));
quit.c:  if (ch->position == POSITION_FIGHTING)
quit.c:  if (ch->position < POSITION_STUNNED)
quit.c:  if (ch->ced->wasroom != 0)
quit.c:      char_to_room (ch, get_room_index (ch->ced->wasroom));
quit.c:  if (ch->in_room && ch->in_room->vnum > 500 && ch->in_room->vnum < 550)
quit.c:      char_to_room(ch, get_room_index(ch->pcdata->alignment+100));
quit.c:	   (ch->desc ? ch->desc->username : "nodesc"),
quit.c:	   (ch->desc ? ch->desc->host : "nodesc"));
quit.c:  ch->pcdata->number_pets = 0;
quit.c:  REMOVE_BIT(ch->act, ACT_CRASHER);
quit.c:  if (ch->in_room)
quit.c:      for (bah = ch->in_room->more->people; bah != NULL; bah = bah_nir)
quit.c:  d = ch->desc;
quit.c:    if (FIGHTING (ch) != NULL || ch->position == POSITION_FIGHTING)
quit.c:  if (ch->in_room && ch->in_room->vnum > 400 && ch->in_room->vnum < 700)
quit.c:  if ((ch->pcdata->no_quit_pk > 0 || ch->pcdata->no_quit > 0) && LEVEL(ch) < MAX_LEVEL)
quit.c:	       UMAX(ch->pcdata->no_quit,  ch->pcdata->no_quit_pk));
quit.c:      d = ch->desc;
quit.c:  if (ch->number_of_mob_followers != 0)
quit.c:       if (ch->pcdata->remort_times > 0) victim_followers++;
quit.c:       if (ch->pcdata->remort_times > 4) victim_followers++;
quit.c:  ch->fgt->master = master;
quit.c:  ch->fgt->leader = NULL;
quit.c:	  REMOVE_BIT (ch->affected_by, AFF_CHARM);
quit.c:  ch->fgt->master = NULL;
quit.c:  ch->fgt->leader = NULL;
quit.c:  if (!ch->fgt)
quit.c:  ch->fgt->leader = NULL;
quit.c:  for (fch = char_list; fch != NULL; fch = fch->next)
quit.c:        fch->fgt->leader = fch;
quit.c:  for (tch = descriptor_list; tch != NULL; tch = tch->next)
quit.c:      if (tch->character == NULL || tch->connected != CON_PLAYING)
quit.c:      if (is_same_group (ch, tch->character))
quit.c:  for (tch = ch->in_room->more->people; tch != NULL; tch = tch->next_in_room)
quit.c:  for (tch = char_list; tch != NULL; tch = tch->next)
quit.c:      for (gch = char_list; gch != NULL; gch = gch->next)
quit.c:                        (IS_MOB (gch) ? gch->pIndexData->short_descr : capitalize (PERS (gch, ch))),
quit.c:			STRING_HITS (gch), STRING_MOVES (gch), ((FIND_EXP (LEVEL (gch), gch->race)) - gch->exp),
quit.c:			(gch->pcdata->remort_times ? "R" : " "));
quit.c:      for (gch = char_list; gch != NULL; gch = gch->next)
quit.c:          if (ch->in_room != NULL && !is_same_group (gch, ch) && ch->in_room == gch->in_room
quit.c:	      if ((gppt < 12 &&  gch->pcdata->remort_times == 0)
quit.c:		  || (gppt < 11 && gch->pcdata->remort_times > 0 && gch->pcdata->remort_times < 4)
quit.c:		  gch->fgt->leader = ch;
quit.c:		  if(gch->pcdata->remort_times > 0) gppt++;
quit.c:		  if(gch->pcdata->remort_times > 4) gppt++;
quit.c:      for (tch = char_list; tch != NULL; tch = tch->next)
quit.c:              tch->fgt->leader = NULL;
quit.c:                tch->fgt->master = NULL;
quit.c:  for (mch = char_list; mch != NULL; mch = mch->next)
quit.c:	  if (mch->pcdata->remort_times > 0)
quit.c:	  if (mch->pcdata->remort_times > 3)
quit.c:  for (mch = char_list; mch != NULL; mch=mch->next)
quit.c:	  if (mch->pcdata->remort_times > 0) follow_number++;
quit.c:	  if (mch->pcdata->remort_times > 4) follow_number++;
quit.c:if (!ch->in_room) return;
quit.c:  while (ch->gold < gold)
quit.c:      ch->copper -= 100;
quit.c:      ch->gold++;
quit.c:  while (ch->copper < amount)
quit.c:      ch->copper += 100;
quit.c:      ch->gold--;
quit.c:  ch->pcdata->voting_on = 0;
quit.c:  for (gch = ch->in_room->more->people; gch != NULL; gch = gch->next_in_room)
quit.c:          gch->pcdata->voting_on = 0;
quit.c:          ch->pcdata->voting_on += share;
quit.c:          for (gch = ch->in_room->more->people; gch != NULL; gch = gch->next_in_room)
quit.c:                  gch->pcdata->voting_on += share;
quit.c:  if (ch->pcdata->voting_on != 0)
quit.c:               "You split %s coins.  You keep your share of %s coins.\n\r", str1, name_amount (ch->pcdata->voting_on));
quit.c:      ch->pcdata->voting_on = 0;
quit.c:  for (gch = ch->in_room->more->people; gch != NULL; gch = gch->next_in_room)
quit.c:          if (gch->pcdata->voting_on == 0)
quit.c:          sprintf (str2, "%s", name_amount (gch->pcdata->voting_on));
quit.c:          gch->pcdata->voting_on = 0;
redit.c:  pRoom = ch->in_room;
redit.c:  check_room_more (ch->in_room);
redit.c:	      (ROOM_DATA *) pExit->to_room = ch->in_room;
redit.c:	      pExit->vnum = ch->in_room->vnum;
redit.c:              pRoom->mapexit[door] = ch->in_room;
redit.c:	      pRoom = ch->in_room;
redit.c:	  ch->desc->pEdit = (void *) pRoom;
redit.c:	  ch->desc->pEdit = NULL;
redit.c:	  ch->desc->connected = CON_PLAYING;
redit.c:          if (is_number(arg2)) ch->in_room->minerals = atoi(arg2);
reloc.c:      write_to_descriptor2 (ch->desc, buf, 0);
reloc.c:      write_to_descriptor2 (ch->desc, buf, 0);
reloc.c:      write_to_descriptor2 (ch->desc, buf, 0);
remort.c:  ch->timer = 50;
remort.c:      if((remort == ch->pcdata->remort_times))
remort.c:      if (ch->pcdata->race < 11)
remort.c:      if (ch->pcdata->race > 11)
remort.c:      if ((remort == ch->pcdata->remort_times))
remort.c:	  sprintf(buf, "-->You are level %d, you have %ld warpoints, and have %d killpoints.\n\r", LEVEL(ch), ch->pcdata->warpoints, ch->pcdata->killpoints);
remort.c:   if (ch->pcdata->remort_times >= pow.max_remorts)
remort.c:    if (pow.show_race_select_info || ch->pcdata->level > 0)
remort.c:      && ch->in_room->vnum != pow.ascension_req[4] )
remort.c:  if (ch->position != POSITION_STANDING)
remort.c:  if (ch->pcdata->remort_times < pow.ascension_req[1])
remort.c:  if (ch->pcdata->warpoints < pow.ascension_req[2])
remort.c:  if (ch->pcdata->total_wps < pow.ascension_req[3])
remort.c:  if (ch->pcdata->race > 10)
remort.c:  for (obj = ch->carrying; obj != NULL; obj = next_obj)
remort.c:  ch->pcdata->level = 1;
remort.c:  ch->exp = 1;
remort.c:  free_string(ch->fgt->phunting);
remort.c:  ch->fgt->phunting = NULL;
remort.c:  free_string(ch->fgt->hunting);
remort.c:  ch->fgt->hunting = NULL;
remort.c:  ch->pcdata->voting_on = 0;
remort.c:  ch->pcdata->deaths =0;
remort.c:  REMOVE_BIT(ch->act, PLR_PKED_THIS_MORT);
remort.c:  ch->pcdata->practice = 10;
remort.c:  ch->pcdata->learn = 2;
remort.c:		  ch->pcdata->stat[k] = ch->pcdata->start_stat[k];
remort.c:          ch->pcdata->remort_times = 0;
remort.c:	  ch->pcdata->total_wps = 0;
remort.c:	  ch->pcdata->warpoints = 0;
remort.c:	  ch->pcdata->guilds = 0;
remort.c:	  ch->pcdata->augments = 0;
remort.c:	  ch->pcdata->totalkills = 0;
remort.c:	  ch->pcdata->killpoints = 0;
remort.c:	  ch->pcdata->pklevels = 0;
remort.c:	  ch->pcdata->pkhelpers = 0;
remort.c:	  ch->pcdata->hard_pkills = 0;
remort.c:	  ch->pcdata->pkills = 0;
remort.c:	  ch->pcdata->pkilled = 0;
remort.c:	  ch->pcdata->pkers = 0;
remort.c:	  ch->pcdata->ascend_times++;
remort.c:		  ch->pcdata->trophy_name[k][0] = '\0';
remort.c:                  ch->pcdata->trophy_times[k] = 0;
remort.c:                  ch->pcdata->trophy_level[k] = 0;
remort.c:		  raceswitch(ch, ch->pcdata->race + 12);
remort.c:		  if (ch->pcdata->race == 12)
remort.c:		  else if (ch->pcdata->race == 13)
remort.c:		  else if (ch->pcdata->race == 14)
remort.c:		  else if (ch->pcdata->race == 15)
remort.c:		  else if (ch->pcdata->race == 16)
remort.c:		  else if (ch->pcdata->race == 17)
remort.c:		  else if (ch->pcdata->race == 18)
remort.c:		  else if (ch->pcdata->race == 19)
remort.c:		  else if (ch->pcdata->race == 20)
remort.c:		  else if (ch->pcdata->race == 21)
remort.c:		  else if (ch->pcdata->race == 22)
remort.c:      ch->pcdata->learned[k] = -100;
remort.c:  max_remort_times[ch->pcdata->alignment] = 
remort.c:   UMAX(max_remort_times[ch->pcdata->alignment], ch->pcdata->remort_times);
remort.c:  if(ch->position != POSITION_STANDING)
remort.c:  if (ch->pcdata->remort_times < pow.forsake_req[1])
remort.c:  if (ch->pcdata->warpoints < pow.forsake_req[2])
remort.c:  if (pow.forsake_req[3] > 0 && get_room_index(pow.forsake_req[3]) != NULL && ch->in_room->vnum != pow.forsake_req[3] )
remort.c:  ch->pcdata->warpoints = ch->pcdata->warpoints - 100;
remort.c:  if(ch->position !=POSITION_STANDING)
remort.c:      if ((ch->pcdata->race > 10 &&
remort.c:	  (ch->pcdata->race < 11 &&
remort.c:   if (ch->pcdata->race < 11 && pow.remort_in_room[ch->pcdata->remort_times] > 0 &&
remort.c:       get_room_index(pow.remort_in_room[ch->pcdata->remort_times]) != NULL && 
remort.c:       ch->in_room->vnum != pow.remort_in_room[ch->pcdata->remort_times] )
remort.c:  if (ch->pcdata->race > 10 && pow.ascend_remort_in_room[ch->pcdata->remort_times] > 0 && get_room_index(pow.ascend_remort_in_room[ch->pcdata->remort_times]) != NULL && ch->in_room->vnum != pow.ascend_remort_in_room[ch->pcdata->remort_times] )
remort.c:  remort = ch->pcdata->remort_times;
remort.c:  if ((ch->pcdata->race < 11 && (LEVEL(ch) < pow.remort_req[remort][0])) 
remort.c:	|| (ch->pcdata->race > 10 && (LEVEL(ch) < pow.ascended_remort_req[remort][0]))) 
remort.c:  if ((ch->pcdata->race < 11 && (ch->pcdata->warpoints < pow.remort_req[remort][1])) || (ch->pcdata->race > 10 && (ch->pcdata->warpoints < pow.ascended_remort_req[remort][1])))
remort.c:  if ((ch->pcdata->race < 11 && (ch->pcdata->killpoints < pow.remort_req[remort][3])) || (ch->pcdata->race > 10 && (ch->pcdata->killpoints < pow.ascended_remort_req[remort][3]))) 
remort.c:	ch->pcdata->race < 11) ||
remort.c:	ch->pcdata->race > 10))
remort.c:  if (ch->pcdata->race < 11)
remort.c:  	ch->pcdata->warpoints -= pow.remort_req[remort][2];
remort.c:  	ch->pcdata->killpoints -= pow.remort_req[remort][4];
remort.c:	ch->pcdata->warpoints -= pow.ascended_remort_req[remort][2];
remort.c:	ch->pcdata->killpoints -= pow.ascended_remort_req[remort][4];
remort.c:if (pow.choose_in_room > 0 && (!ch->in_room || ch->in_room->vnum != pow.choose_in_room))
remort.c:  if(LEVEL(ch) < 0 && ch->pcdata->remort_times == 0) {
remort.c:  if (!str_cmp (argy, "file") && ch->pcdata->level == MAX_LEVEL)
room.c:  fprintf (fpp, "%s at %d: %s\n", NAME (ch), (ch->in_room ? ch->in_room->vnum : 0), argy);
score.c:	     ch->pcdata->carry_number, (ch->pcdata->carry_weight/WGT_MULT), (ch->pcdata->carry_weight % WGT_MULT));
score.c:    if (ch->pcdata->carry_weight < weightmult)
score.c:    else if (ch->pcdata->carry_weight < (weightmult * 2))
score.c:    else if (ch->pcdata->carry_weight < (weightmult * 3))
score.c:    else if (ch->pcdata->carry_weight < (weightmult * 4))
score.c:    else if (ch->pcdata->carry_weight < (weightmult * 5))
score.c:  if ((w_one = ch->hold1) == NULL)
score.c:  if ((w_one = ch->hold2) ==NULL)
score.c:(wdam * 4) + (ch->max_hit / 20) + (max_mana (ch) / 6) + ((LEVEL(ch)*3)/2) +
score.c:(ch->pcdata->learned[gsn_parry] == -100 ? 0 : ch->pcdata->learned[gsn_parry] / 18) +
score.c:(ch->pcdata->learned[gsn_dodge] == -100 ? 0 : ch->pcdata->learned[gsn_dodge] / 18) + 
score.c:+bonushit + GET_HITROLL(ch) + (GET_DAMROLL (ch)) - (ch->pcdata->deaths/2);
score.c:  pos = ch->position;
score.c:  ch->position = POSITION_STANDING;
score.c:  ch->position = pos;
score.c:  pos = ch->position;
score.c:  ch->position = POSITION_STANDING;
score.c:  ch->position = pos;
score.c:  pos = ch->position;
score.c:  ch->position = POSITION_STANDING;
score.c:  ch->position = pos;
script3.c:    if (!ch->desc)
script3.c:      ch->desc->pEdit = (void *) tr;
script3.c:      ch->desc->connected = CON_SCRIPTEDITOR;
script3.c:  ch->desc->pEdit = (void *) tr;
script3.c:  ch->desc->connected = CON_SCRIPTEDITOR;
script3.c:  if (!ch->desc)
script3.c:  if (!ch->desc->pEdit)
script3.c:      ch->desc->connected = CON_PLAYING;
script3.c:  tr = (SINGLE_TRIGGER *) ch->desc->pEdit;
script3.c:      ch->desc->pEdit = NULL;
script3.c:      ch->desc->connected = CON_PLAYING;
script3.c:  ch->desc->pString = pString;
script3.c:  ch->desc->pString = pString;
script3.c:  if (!ch->desc)
script3.c:  if (!ch->pcdata->name)
script3.c:      for (t = *ch->desc->pString; *t != '\0'; t++)
script3.c:          if (*t == ':' || t == *ch->desc->pString)
script3.c:      free_string (*ch->desc->pString);
script3.c:      *ch->desc->pString = str_dup (buf);
script3.c:              for (t = *ch->desc->pString; *t != '\0'; t++)
script3.c:                  if (*t == ':' || t == *ch->desc->pString)
script3.c:              free_string (*ch->desc->pString);
script3.c:              *ch->desc->pString = str_dup (buf);
script3.c:          free_string (*ch->desc->pString);
script3.c:          *ch->desc->pString = str_dup ("");
script3.c:          send_edit_char (*ch->desc->pString, ch);
script3.c:		  if(strlen(*ch->desc->pString)+strlen(arg3) > STD_LENGTH)
script3.c:          *ch->desc->pString = string_replace (*ch->desc->pString, arg2, arg3);
script3.c:          *ch->desc->pString = format_string (*ch->desc->pString);
script3.c:      ch->desc->pString = NULL;
script3.c:  if (LEVEL (ch) < MAX_LEVEL && *ch->desc->pString && strlen (*ch->desc->pString) > 5000)
script3.c:      free_string (*ch->desc->pString);
script3.c:      *ch->desc->pString = &str_empty[0];
script3.c:      ch->desc->pString = NULL;
script3.c:  strcpy (buf, *ch->desc->pString);
script3.c:      free_string (*ch->desc->pString);
script3.c:      *ch->desc->pString = str_dup("");
script3.c:      ch->desc->pString = NULL;
script3.c:      free_string (*ch->desc->pString);
script3.c:      *ch->desc->pString = str_dup("");
script3.c:      ch->desc->pString = NULL;
script3.c:  free_string (*ch->desc->pString);
script3.c:  *ch->desc->pString = str_dup (buf);
sedit.c:      ch->pcdata->learned[race_info[ch->pcdata->race].nat_skills[j]] = -100;
sedit.c:      ch->pcdata->learned[align_info[ch->pcdata->alignment].nat_skills[j]] = -100;
sedit.c:      if (ch->pcdata->learned[i] > 0)
sedit.c:      ch->pcdata->learned[race_info[ch->pcdata->race].nat_skills[j]] = 100;
sedit.c:      ch->pcdata->learned[align_info[ch->pcdata->alignment].nat_skills[j]] = 100;
sedit.c://  sprintf (buf, "\x1B[1;1f\x1B[K\x1B[2;1f\x1B[K\x1B[3;1f;%dr", ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:      sprintf (buf, "\x1B[1;1f\x1B[K\x1B[2;1f\x1B[K\x1B[3;1f\x1B[K\x1B[4;1f\x1B[K\x1B[5;1f\x1B[K\x1B[6;1f\x1B[K\x1B[7;1f\x1B[K\x1B[8;1f\x1B[K\x1B[9;1f\x1B[K\x1B[10;1f\x1B[K\x1B[11;1f\x1B[K\x1B[12;1f\x1B[K\x1B[13;1f\x1B[K\x1B[14;1f\x1B[K\x1B[15;1f\x1B[K\x1B[16;1f\x1B[17;%dr", ch->pcdata->pagelen);
sedit.c:  sprintf (buf, "\x1B[%d;1f", ch->pcdata->pagelen);
sedit.c:      ch->desc->pEdit = (void *) spell;
sedit.c:      ch->desc->connected = CON_SEDITOR;
sedit.c:      ch->desc->pEdit = (void *) spell;
sedit.c:      ch->desc->connected = CON_SEDITOR;
sedit.c:      ch->desc->pEdit = (void *) spell;
sedit.c:      ch->desc->connected = CON_SEDITOR;
sedit.c:  spell = (SPELL_DATA *) ch->desc->pEdit;
sedit.c:      ch->desc->pEdit = NULL;
sedit.c:      ch->desc->connected = CON_PLAYING;
sedit.c:      sprintf (arg1, "\x1B[1;%dr\x1B[2J\x1B[%d;1f", ch->pcdata->pagelen, ch->pcdata->pagelen);
sedit.c:	  cur_num = ch->max_hit;
sedit.c:	  if (ch->pcdata->race > 10)
sedit.c:	cur_num = ch->pcdata->plus_kick;
skill.c:	learned = ch->pcdata->learned[gsn];
skill.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
skill.c:	  ch->pcdata->learned[mob->pIndexData->opt->skltaught[sn]] == -100 &&
skill.c:	       ch->pcdata->learn, 
skill.c:	       (race_info[ch->pcdata->race].max_skills + align_info[ch->pcdata->alignment].max_skills +(ch->pcdata->remort_times +1)/2 - skl),
skill.c:	       ( race_info[ch->pcdata->race].max_profs + align_info[ch->pcdata->alignment].max_profs + (ch->pcdata->remort_times +1)/2 - prf), 
skill.c:	       (race_info[ch->pcdata->race].max_spells + align_info[ch->pcdata->alignment].max_spells +(ch->pcdata->remort_times)-spl));
skill.c:  if (ch->pcdata->learn <= 0)
skill.c:  if (spell->slot == 0 && skl >= (race_info[ch->pcdata->race].max_skills + align_info[ch->pcdata->alignment].max_skills +
skill.c:(ch->pcdata->remort_times +1)/2))
skill.c:  if (spell->slot == 2 && prf >= (race_info[ch->pcdata->race].max_profs + align_info[ch->pcdata->alignment].max_profs +
skill.c:(ch->pcdata->remort_times +1)/2))
skill.c:  if (spell->slot == 1 && spl >= (race_info[ch->pcdata->race].max_spells + align_info[ch->pcdata->alignment].max_spells + (ch->pcdata->remort_times)))
skill.c:      if (spell->prereq_1 != NULL && (spl = skill_lookup(spell->prereq_1, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.c:      if (spell->prereq_2 != NULL && (spl = skill_lookup(spell->prereq_2, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.c:  if (ch->pcdata->learned[spell->gsn] != -100)
skill.c:	  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
skill.c:      ch->pcdata->learn--;
skill.c:      ch->pcdata->learned[spell->gsn] = 1;
skill.c:  oldtrack = ch->pcdata->learned[gsn_track];
skill.c:  oldtrap = ch->pcdata->learned[gsn_trapset];
skill.c:  oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.c:    ch->pcdata->learned[gsn_pick_lock] = 100;
skill.c:    ch->pcdata->learned[gsn_trapset] = 100;
skill.c:    ch->pcdata->learned[gsn_track] = 100; 
skill.c:  ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:  ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:	  || (ch->pcdata->learned[sn] == -100) || spell->slot == 1)
skill.c:	sprintf (buf, "%s%22s %3d%%\x1b[0;37m ",(spell->slot == 2 ? "\x1b[1;36m" : ""), spell->spell_funky_name, ch->pcdata->learned[sn]);
skill.c:  ch->pcdata->learned[gsn_track] = oldtrack; 
skill.c:  ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.c:  ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.c:  ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:  ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:	   ch->pcdata->practice);
skill.c:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
skill.c:      oldtrack = ch->pcdata->learned[gsn_track]; 
skill.c:	ch->pcdata->learned[gsn_track] = 100;
skill.c:      oldtrap = ch->pcdata->learned[gsn_trapset]; 
skill.c:	ch->pcdata->learned[gsn_trapset] = 100;
skill.c:      oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.c:	ch->pcdata->learned[gsn_pick_lock] = 100;
skill.c:      ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:      ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:	      || (ch->pcdata->learned[sn] < -1))
skill.c:		     ch->pcdata->learned[sn]);
skill.c:      ch->pcdata->learned[gsn_track] = oldtrack;
skill.c:      ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.c:      ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.c:      ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:      ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:	       ch->pcdata->practice, ch->pcdata->learn);
skill.c:      oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.c:	ch->pcdata->learned[gsn_pick_lock] = 100;
skill.c:      oldtrack = ch->pcdata->learned[gsn_track];
skill.c:	ch->pcdata->learned[gsn_trapset] = 100;
skill.c:      oldtrap = ch->pcdata->learned[gsn_trapset]; 
skill.c:	ch->pcdata->learned[gsn_track] = 100;
skill.c:      ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.c:      ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.c:      ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.c:      ch->pcdata->learned[gsn_track] = oldtrack;
skill.c:      ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.c:      ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.c:      ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.c:	       ch->pcdata->practice);
skill.c:	      ch->pcdata->learned[spell->gsn] == -100)))
skill.c:      if (spell->gsn > 0 && spell->gsn < SKILL_COUNT && ch->pcdata->learned[spell->gsn] == -100)
skill.c:	  if (ch->pcdata->learned[spell->gsn] == -100)
skill.c:  if (ch->pcdata->practice < 1)
skill.c:      if (spell->prereq_1 != NULL && (spl = skill_lookup(spell->prereq_1, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.c:      if (spell->prereq_2 != NULL && (spl = skill_lookup(spell->prereq_2, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.c:  if (ch->pcdata->learned[spell->gsn] >= adept)
skill.c:	  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
skill.c:      ch->pcdata->practice--;
skill.c:	ch->pcdata->learned[spell->gsn] += int_app[get_curr_int (ch) - 1].learn;
skill.c:	ch->pcdata->learned[spell->gsn] += int_app[get_curr_int (ch) - 1].learn - 1;
skill.c:      if (ch->pcdata->learned[spell->gsn] < adept)
skill.c:	  ch->pcdata->learned[spell->gsn] = adept;
skill.c:	  if (spell->gsn > 549 && IS_PLAYER(ch) && !str_cmp(race_info[ch->pcdata->race].name, "orc") && adept == pow.max_prac_skills)
skill.c:	    ch->pcdata->learned[spell->gsn]+= 15;
skill.c:      if (ch->pcdata->learned[sn] == -100)
skill.c:		 ch->pcdata->learned[sn], spell->spell_funky_name);
skill.test:	learned = ch->pcdata->learned[gsn];
skill.test:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
skill.test:	  ch->pcdata->learned[mob->pIndexData->opt->skltaught[sn]] == -100 &&
skill.test:	       ch->pcdata->learn, 
skill.test:	       (race_info[ch->pcdata->race].max_skills + align_info[ch->pcdata->alignment].max_skills +(ch->pcdata->remort_times +1)/2 - skl),
skill.test:	       ( race_info[ch->pcdata->race].max_profs + align_info[ch->pcdata->alignment].max_profs + (ch->pcdata->remort_times +1)/2 - prf), 
skill.test:	       (race_info[ch->pcdata->race].max_spells + align_info[ch->pcdata->alignment].max_spells +(ch->pcdata->remort_times)-spl));
skill.test:  if (ch->pcdata->learn <= 0)
skill.test:  if (spell->slot == 0 && skl >= (race_info[ch->pcdata->race].max_skills + align_info[ch->pcdata->alignment].max_skills +
skill.test:(ch->pcdata->remort_times +1)/2))
skill.test:  if (spell->slot == 2 && prf >= (race_info[ch->pcdata->race].max_profs + align_info[ch->pcdata->alignment].max_profs +
skill.test:(ch->pcdata->remort_times +1)/2))
skill.test:  if (spell->slot == 1 && spl >= (race_info[ch->pcdata->race].max_spells + align_info[ch->pcdata->alignment].max_spells + (ch->pcdata->remort_times)))
skill.test:      if (spell->prereq_1 != NULL && (spl = skill_lookup(spell->prereq_1, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.test:      if (spell->prereq_2 != NULL && (spl = skill_lookup(spell->prereq_2, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.test:  if (ch->pcdata->learned[spell->gsn] != -100)
skill.test:	  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
skill.test:      ch->pcdata->learn--;
skill.test:      ch->pcdata->learned[spell->gsn] = 1;
skill.test:  oldtrack = ch->pcdata->learned[gsn_track];
skill.test:  oldtrap = ch->pcdata->learned[gsn_trapset];
skill.test:  oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.test:    ch->pcdata->learned[gsn_pick_lock] = 100;
skill.test:    ch->pcdata->learned[gsn_trapset] = 100;
skill.test:    ch->pcdata->learned[gsn_track] = 100; 
skill.test:  ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.test:  ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.test:	  || (ch->pcdata->learned[sn] == -100) || spell->slot == 1)
skill.test:	sprintf (buf, "%s%22s %3d%%\x1b[0;37m ",(spell->slot == 2 ? "\x1b[1;36m" : ""), spell->spell_funky_name, ch->pcdata->learned[sn]);
skill.test:  ch->pcdata->learned[gsn_track] = oldtrack; 
skill.test:  ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.test:  ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.test:  ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.test:  ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.test:	   ch->pcdata->practice);
skill.test:  for (mob = ch->in_room->more->people; mob != NULL; mob = mob->next_in_room)
skill.test:      oldtrack = ch->pcdata->learned[gsn_track]; 
skill.test:	ch->pcdata->learned[gsn_track] = 100;
skill.test:      oldtrap = ch->pcdata->learned[gsn_trapset]; 
skill.test:	ch->pcdata->learned[gsn_trapset] = 100;
skill.test:      oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.test:	ch->pcdata->learned[gsn_pick_lock] = 100;
skill.test:      ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.test:      ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.test:	      || (ch->pcdata->learned[sn] < -1))
skill.test:		     ch->pcdata->learned[sn]);
skill.test:      ch->pcdata->learned[gsn_track] = oldtrack;
skill.test:      ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.test:      ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.test:      ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.test:      ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.test:	       ch->pcdata->practice, ch->pcdata->learn);
skill.test:      oldpick = ch->pcdata->learned[gsn_pick_lock];
skill.test:	ch->pcdata->learned[gsn_pick_lock] = 100;
skill.test:      oldtrack = ch->pcdata->learned[gsn_track];
skill.test:	ch->pcdata->learned[gsn_trapset] = 100;
skill.test:      oldtrap = ch->pcdata->learned[gsn_trapset]; 
skill.test:	ch->pcdata->learned[gsn_track] = 100;
skill.test:      ch->pcdata->learned[gsn_sneak] += ch->pcdata->plus_sneak;
skill.test:      ch->pcdata->learned[gsn_hide] += ch->pcdata->plus_hide;
skill.test:      ch->pcdata->learned[gsn_trapset] = oldtrap;
skill.test:      ch->pcdata->learned[gsn_track] = oldtrack;
skill.test:      ch->pcdata->learned[gsn_pick_lock] = oldpick;
skill.test:      ch->pcdata->learned[gsn_sneak] -= ch->pcdata->plus_sneak;
skill.test:      ch->pcdata->learned[gsn_hide] -= ch->pcdata->plus_hide;
skill.test:	       ch->pcdata->practice);
skill.test:	      ch->pcdata->learned[spell->gsn] == -100)))
skill.test:      if (spell->gsn > 0 && spell->gsn < SKILL_COUNT && ch->pcdata->learned[spell->gsn] == -100)
skill.test:	  if (ch->pcdata->learned[spell->gsn] == -100)
skill.test:  if (ch->pcdata->practice < 1)
skill.test:      if (spell->prereq_1 != NULL && (spl = skill_lookup(spell->prereq_1, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.test:      if (spell->prereq_2 != NULL && (spl = skill_lookup(spell->prereq_2, -1)) != NULL && ch->pcdata->learned[spl->gsn] < pow.prereq)
skill.test:  if (ch->pcdata->learned[spell->gsn] >= adept)
skill.test:	  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
skill.test:      ch->pcdata->practice--;
skill.test:	ch->pcdata->learned[spell->gsn] += int_app[get_curr_int (ch) - 1].learn;
skill.test:	ch->pcdata->learned[spell->gsn] += int_app[get_curr_int (ch) - 1].learn - 1;
skill.test:      if (ch->pcdata->learned[spell->gsn] < adept)
skill.test:	  ch->pcdata->learned[spell->gsn] = adept;
skill.test:	  if (spell->gsn > 549 && IS_PLAYER(ch) && !str_cmp(race_info[ch->pcdata->race].name, "orc") && adept == pow.max_prac_skills)
skill.test:	    ch->pcdata->learned[spell->gsn]+= 15;
skill.test:      if (ch->pcdata->learned[sn] == -100)
skill.test:		 ch->pcdata->learned[sn], spell->spell_funky_name);
skill.test:	  if(IS_SET(spell->guilds, guild_data[i].mob_guildmaster_bit) && !IS_SET(ch->pcdata->guilds, guild_data[i].mob_guildmaster_bit))
skilltemplate.c:  if (ch->wait > 2)
skilltemplate.c:  if (ch->fgt->ears > 9)
skilltemplate.c:		&& ch->fgt->challenge != 10)
skilltemplate.c:		&& ch->fgt->challenge != 10)
skilltemplate.c:    victim = ch->fgt->fighting;
skilltemplate.c:  if (ch->position == POSITION_BASHED)
skilltemplate.c:  if (ch->position == POSITION_GROUNDFIGHTING)
skilltemplate.c:number_percent()<(ch->pcdata->learned[gsn_double_kick]/5)) ||
skilltemplate.c:      chance += ch->pcdata->learned[gsn_kick];
skilltemplate.c:	  if (ch->in_room != victim->in_room || victim->data_type == 50)
spec.c:  if (ch->position != POSITION_FIGHTING)
spec.c:  /*  for (victim = ch->in_room->more->people; victim != NULL; victim = v_next)
spec.c:  if (ch->fgt && ch->fgt->ears > 9)
spec.c:  if (ch->position != POSITION_FIGHTING)
spec.c:  for (victim = ch->in_room->more->people; victim != NULL; victim = v_next)
spec.c:  if (ch->fgt && ch->fgt->ears > 9)
spec.c:  else if (ch->move > 45)
spec.c:  if (ch->position != POSITION_FIGHTING)
spec.c:  for (victim = ch->in_room->more->people; victim != NULL; victim = v_next)
spec.c:  if (ch->position != POSITION_FIGHTING)
spec.c:  if (ch->position != POSITION_FIGHTING)
spec.c:      for (victim = ch->in_room->more->people; victim != NULL; victim = v_next)
spec.c:  for (corpse = ch->in_room->more->contents; corpse != NULL; corpse = c_next)
spec.c:	  obj_to (obj, ch->in_room);
spec.c:  for (trash = ch->carrying; trash != NULL; trash = trash_next)
spec.c:  for (trash = ch->in_room->more->contents; trash != NULL; trash = trash_next)
spec.c:  if (ch->position != POSITION_FIGHTING
spec.c:  if (ch->position != POSITION_STANDING)
spec.c:  for (victim = ch->in_room->more->people; victim != NULL; victim = v_next)
spec.c:      if (IS_SET (ch->act, ACT_ATTITUDE) && (!IS_AWAKE (victim) || number_range (1, 11) == 2))
spec.c:  for (obj = ch->in_room->more->contents; obj != NULL; obj = o_next)
spec.c:      if (ch->next_in_room == NULL)
spl.c:  if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_WATER) && spell->mana_type == 8)
spl.c:  else if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_FIRE) && spell->mana_type == 4)
spl.c:  else if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EARTH) && spell->mana_type == 1)
spl.c:  else if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_AIR) && spell->mana_type == 2)
spl.c:  else if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_GOOD) && spell->mana_type == 16)
spl.c:  else if(IS_SET(ch->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EVIL) && spell->mana_type == 16)
spl.c:      ch->in_room->vnum < 1000)
spl.c:  if (vict->pcdata->no_quit_pk > 0 || ch->pcdata->no_quit_pk > 0)
spl.c:      (ch->in_room && IS_SET (ch->in_room->room_flags, ROOM_NOSUMMON)))
spl.c:  char_to_room (vict, ch->in_room);
spl.c:  if (ch->in_room && IS_SET (ch->in_room->room_flags, ROOM_NO_RECALL))
spl.c:  char_to_room (victim, get_room_index (ch->pcdata->alignment+100));
spl.c:    obj_to (obj, ch->in_room);
spl.c:    general_spell2 (spell, level, ch, vo, FALSE, ch->in_room);    
spl.c:  general_spell2 (spell, level, ch, vo, FALSE, ch->in_room);
spl.c:    if(IS_SET(victim->pcdata->elemental_alignment,ELEMENTAL_ALIGN_GOOD) && ch->pcdata->alignment != 2)
spl.c:    if(IS_SET(victim->pcdata->elemental_alignment,ELEMENTAL_ALIGN_EVIL) && ch->pcdata->alignment != 1)
spl.c:	  if (victim != NULL && victim->in_room == ch->in_room)
spl.c:	    victim = ch->in_room->more->people;
spl.c:		  && (ALIGN (victim) == 0 || ALIGN (ch) == 0) && !IN_BATTLE(ch) && ch->fgt->challenge != 10)
spl.c:		  bonus += (ch->pcdata->remort_times) * 8;
spl.c:                 addmove = ((race_info[ch->pcdata->race].heal_percent + align_info[ch->pcdata->alignment].heal_percent)*addmove)/100;
spl.c:		  bonus += (ch->pcdata->remort_times) * 8;
spl.c:                 addhit = ((race_info[ch->pcdata->race].heal_percent + align_info[ch->pcdata->alignment].heal_percent)*addhit)/100;
spl.c:	int shieldStr = ch->pcdata->level;
spl.c:	shieldStr += (ch->pcdata->remort_times) * 5;
spl.c:        ch->pcdata->mana_shield_strength = shieldStr;
spl.c:		if (victim->in_room != ch->in_room && (number_range(1,5) != 3 || IS_MOB(victim)))
spl.c:			 (IS_MOB(ch) || str_cmp(race_info[ch->pcdata->race].name, "flayer") || number_range(1,5) == 2))
spl.c:		    if (FIGHTING (victim) == NULL && ch->in_room == victim->in_room)
spl.c:	  if ((ch->in_room->vnum > 999 || spell->spell_type == TAR_CHAR_OFFENSIVE) && !failed )
spl.c:	  bonus += (ch->pcdata->remort_times) * 6;
spl.c:	  if(!str_cmp(ch->pcdata->name,"Liberation") && !str_cmp(spell->spell_name,"Cantrip"))
spl.c:	      dam = ((race_info[ch->pcdata->race].attack_spell_percent + align_info[ch->pcdata->alignment].attack_spell_percent)*dam)/100;
spl.c:	  if (victim->in_room != ch->in_room)
spl.c:	      ch->hit += dam/2;
spl.c:	      if (ch->hit > ch->max_hit)
spl.c:		    ch->hit = ch->max_hit;
spl.c:  if (spell->spell_lag > 0 && IS_PLAYER(ch) && ch->pcdata->no_quit < spell->spell_lag)
spl.c:    ch->pcdata->no_quit = spell->spell_lag;
spl.c:  if (ch->pcdata->no_quit_pk < spell->spell_lag)
spl.c:    ch->pcdata->no_quit_pk = spell->spell_lag;
spl.c:  if (ch->pcdata->no_quit > 0)/* JRAJRA spell lag */
spl.c:	char_to_room (undead_creature, ch->in_room);
spl.c:	if (!(ch->number_of_mob_followers)) ch->number_of_mob_followers = 0;
spl.c:	else if (ch->number_of_mob_followers > 1) {
spl.c:	undead_creature->pcdata->alignment = ch->pcdata->alignment;
spl.c:	undead_creature->pIndexData->alignment = ch->pcdata->alignment;
spl.c:	(ch->number_of_mob_followers)++;
spl.c:  if (ch->pcdata->online_spot->located == TRUE && ch->pcdata->online_spot->pk_since_locate < 3)
spl.c:      ch->pcdata->online_spot->located = TRUE;
spl.c:      ch->pcdata->online_spot->pk_since_locate = 0;
spl.c:      ch->pcdata->online_spot->located = TRUE;
spl.c:      ch->pcdata->online_spot->pk_since_locate = 0;
spl.c:  if (ch->in_room->vnum < 1000  || number_percent () > level)
spl.c:  if (ch->in_room->vnum < 1000 || IS_AFFECTED_EXTRA (victim, AFF_PROT_FIRE) || number_percent () < level)
spl.c:  if (ch->in_room->vnum < 1000 || IS_AFFECTED_EXTRA (victim, AFF_PROT_ICE) || number_percent () < level)
spl.c:   if (ch->in_room->vnum < 1000 || IS_AFFECTED_EXTRA (victim, AFF_PROT_SHARD) || number_percent () < level)
spl.c:  if (ch->in_room->vnum < 1000 || IS_AFFECTED_EXTRA (victim, AFF_PROT_SHOCK) || number_percent () < level)
spl.c:   if (((ch->in_room->vnum >= (BATTLEGROUND_START_VNUM + bg_multiplier)) &&
spl.c:      (ch->in_room->vnum <= (BATTLEGROUND_END_VNUM + bg_multiplier))) ||
spl.c:  if (!ch || !ch->in_room) return;
spl.c:  check_room_more(ch->in_room);
spl.c:  if (ch->position != POSITION_STANDING)
spl.c:    if ((pexit = ch->in_room->exit[door]) == NULL || !pexit->to_room ||
spl.c:   if(number_range(1,120) > ch->pcdata->learned[gsn_trapset])
spl.c:  if (ch->in_room->more->trap)
spl.c:      ch->in_room->more->trap->material++;
spl.c:      ch->in_room->more->trap->material += 10;
spl.c:      set_off_trap(ch, ch->in_room, TRUE);
spl.c:  trp = new_trap (ch, ch->in_room);
spl.c:       || !is_member(ch, GUILD_TINKER)) && number_range (1,120) >= ch->pcdata->learned[gsn_trapset]))
spl.c:      set_off_trap (ch,ch->in_room, TRUE);
spl.c:      if ((pexit = ch->in_room->exit[door]) == NULL)
spl.c:	  if (number_percent () < ch->pcdata->learned[gsn_detrap])
spl.c:      check_room_more(ch->in_room);
spl.c:      if(ch->in_room->more->trap == NULL)
spl.c:      if(number_percent() < ch->pcdata->learned[gsn_detrap])
spl.c:	  trp = ch->in_room->more->trap;
spl.c:	   ch->in_room->more->trap = NULL;
spl.c:	      if (number_percent() < ch->pcdata->learned[gsn_detrap])
spl.c:	fch_next = fch->next_in_room;
spl.c:    for(fch = victim->in_room->more->people; fch != NULL; fch = fch->next_in_room)
sv.c:  base = (base * (race_info[ch->pcdata->race].mana_percent + align_info[ch->pcdata->alignment].mana_percent))/100;
sv.c:  ch->pcdata->n_max_mana = base; 
sv.c:  if (ch->height > 0)
sv.c:      ch->height = number_range (race_info[ch->pcdata->race].height_min, race_info[ch->pcdata->race].height_max);
sv.c:  switch (ch->pIndexData->mobtype)
sv.c:      ch->height = number_range (53, 81);
sv.c:      ch->height = number_range (58, 88);
sv.c:      ch->height = number_range (41, 66);
sv.c:      ch->height = number_range (38, 58);
sv.c:      ch->height = number_range (86, 150);
sv.c:      ch->height = number_range (178, 408);
sv.c:      ch->height = number_range (23, 48);
sv.c:      ch->height = number_range (12, 30);
sv.c:      ch->height = number_range (12, 30);
sv.c:      ch->height = number_range (47, 89);
sv.c:      ch->height = number_range (77, 145);
sv.c:      ch->height = number_range (60, 95);
sv.c:      ch->height = number_range (65, 120);
sv.c:      ch->height = number_range (20, 40);
sv.c:      ch->height = number_range (12, 38);
sv.c:      ch->height = number_range (50, 100);
sv.c:      ch->height = number_range (23, 48);
sv.c:      ch->height = number_range (60, 150);
sv.c:      ch->height = number_range (14, 35);
sv.c:      ch->height = number_range (6, 20);
sv.c:      ch->height = number_range (8, 30);
sv.c:      ch->height = number_range (53, 80);
sv.c:      ch->height = number_range (53, 81);
sv.c:      ch->height = number_range (52, 71);
sv.c:      ch->height = number_range (51, 70);
sv.c:      ch->height = number_range (51, 75);
sv.c:	   capitalize (real_ch->pcdata->name));
sv.c:	       capitalize (real_ch->pcdata->name));
sv.c:      ch->pcdata = new_pc ();
sv.c:      ch->desc = NULL;
sv.c:      free_string (ch->pcdata->name);
sv.c:      ch->pcdata->name = str_dup (NAME (real_ch));
sv.c:  if (ch->pcdata->temp_room == NULL)
sv.c:    ch->pcdata->temp_room = get_room_index(ch->pcdata->alignment +100);
sv.c:  char_to_room (ch, ch->pcdata->temp_room);
sv.c:	   capitalize (ch->pcdata->name));
sv.c:      if (ch->carrying != NULL)
sv.c:	fwrite_obj (ch, ch->carrying, corpsefile, 0);
sv.c:    sprintf(szBuf,"%s%s.bak", PLAYER_DIR, capitalize(ch->pcdata->name));
sv.c:  sprintf (strsave, "%s%s.u", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  sprintf (strsave, "%s%s", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  fprintf(stderr,"FUCK!  Caught corruption of pfile %s!  Restored from .bak\n", ch->pcdata->name);
sv.c:  if (ch->in_room && ch->in_room->vnum > 449 && ch->in_room->vnum < 500)
sv.c:  if (ch->desc != NULL && ch->desc->original != NULL)
sv.c:    ch = ch->desc->original;
sv.c:  sprintf (strsave, "%s%s.u", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:  sprintf (strsave, "%s%s", PLAYER_DIR, capitalize (ch->pcdata->name));
sv.c:    sprintf(szBuf,"%s%s.bak", PLAYER_DIR, capitalize(ch->pcdata->name));
sv.c:      if (ch->carrying != NULL)
sv.c:	fwrite_obj (ch, ch->carrying, fp, 0);
sv.c:  jumble (capitalize (ch->name));
sv.c:  tr = ch->in_room;
sv.c:  ch->pcdata->played+=(int)(current_time - ch->pcdata->logon);
sv.c:  ch->pcdata->logon=current_time;
sv.c:  ch->pcdata->new_exp = TRUE;
sv.c:  if (ch->pcdata->email[0] != '\0')
sv.c:    fprintf (fp, "NEmail %s~\n", fix_string (ch->pcdata->email));
sv.c:  if (ch->pcdata->short_descr && ch->pcdata->short_descr[0] != '\0' &&
sv.c:strlen(ch->pcdata->short_descr) > 2)
sv.c:    fprintf (fp, "ShDesc %s~\n", ch->pcdata->short_descr);
sv.c:  if (ch->pcdata->long_descr && ch->pcdata->long_descr[0] != '\0' &&
sv.c:strlen(ch->pcdata->long_descr) > 2)
sv.c:    fprintf (fp, "LoDesc %s~\n", fix_string (ch->pcdata->long_descr));
sv.c:  fprintf (fp, "Descr %s~\n", fix_string (ch->pcdata->description));
sv.c:      fprintf (fp, "LCcol %d %s\n", i, ch->pcdata->chan_color[i]);
sv.c:  fprintf (fp, "LCign %d\n", ch->pcdata->chan_ignore);
sv.c:  fprintf (fp, "TtlKils .%o\n", ch->pcdata->totalkills);
sv.c:  fprintf (fp, "NAn %d\n", ch->pcdata->show_lev);
sv.c:  fprintf (fp, "Killpt .%o\n", ch->pcdata->killpoints);
sv.c:  fprintf (fp, "Deaths %d\n", ch->pcdata->deaths);
sv.c:  fprintf (fp, "DPray %d\n", ch->pcdata->pray_points);
sv.c:  fprintf (fp, "DCoins %d %d %d %d %d\n", 0, 0, ch->gold, 0, ch->copper);
sv.c:      if (ch->pcdata->script_flags[k] && ch->pcdata->script_flags[k][0] != '\0')
sv.c:	  fprintf (fp, "Sf %s~\n", ch->pcdata->script_flags[k]);
sv.c:  fprintf (fp, "Nexp %d\n", ch->pcdata->new_exp);
sv.c:  fprintf (fp, "Nospam %d\n", ch->pcdata->no_spam);
sv.c:  if (ch->height != -1)
sv.c:    fprintf (fp, "NHeight %d\n", ch->height);
sv.c:  fprintf (fp, "NDon %d\n", ch->pcdata->donated);
sv.c:  fprintf (fp, "NQuest %d\n", ch->pcdata->questflag);
sv.c:  fprintf (fp, "NatArm .%o\n", ch->pcdata->nat_armor);
sv.c:  fprintf (fp, "NatAbil %d\n", ch->pcdata->nat_abilities);
sv.c:  fprintf (fp, "NatAbilT %d\n", ch->pcdata->nat_abilities2);
sv.c:  if (ch->ced && ch->ced->wasroom != 0)
sv.c:      fprintf (fp, "NWasrm %d\n", ch->ced->wasroom);
sv.c:  if (ch->pcdata->challenge_on)
sv.c:    fprintf (fp, "NChon %d\n", ch->pcdata->challenge_on);
sv.c:  if (ch->pcdata->remort_times)
sv.c:    fprintf (fp, "NRemort %d\n", ch->pcdata->remort_times);
sv.c:  fprintf (fp, "NAMsg %d\n", ch->pcdata->arena_msg);
sv.c:  if (ch->fgt->challenge)
sv.c:    fprintf (fp, "NChal %d\n", ch->fgt->challenge);
sv.c:  if (ch->pcdata->guilds)
sv.c:    fprintf (fp, "NGldBt %d\n", ch->pcdata->guilds);
sv.c:  fprintf (fp, "NWPS %ld\n", ch->pcdata->warpoints);
sv.c:  fprintf (fp, "NMana .%o\n", ch->pcdata->n_mana);
sv.c:  fprintf (fp, "Race %d\n", ch->pcdata->race);
sv.c:  fprintf (fp, "Level .%o\n", ch->pcdata->level);
sv.c:  fprintf (fp, "SCool %d\n", ch->pcdata->cool_skills);
sv.c:  if (ch->pcdata->level > 100)
sv.c:      fprintf (fp, "Winv %d\n", ch->pcdata->wizinvis);
sv.c:      fprintf (fp, "Secrty %d\n", ch->pcdata->security);
sv.c:  fprintf (fp, "Clan %d\n", ch->pcdata->clan);
sv.c:  fprintf (fp, "Clan2 %d\n", ch->pcdata->clan2);
sv.c:  fprintf (fp, "Played %ld\n", ch->pcdata->played);
sv.c:  fprintf (fp, "Note %ld\n", ch->pcdata->last_note);
sv.c:  fprintf (fp, "Room %d\n", (ch->in_room ? ch->in_room->vnum :100+ch->pcdata->alignment));
sv.c:  fprintf (fp, "HpMove .%lo .%lo .%o .%o\n", ch->hit, ch->max_hit,
sv.c:	   ch->move, ch->max_move);
sv.c:  fprintf (fp, "EFight %d\n", ch->ced->fight_ops);
sv.c:  fprintf (fp, "Exp %ld\n", ch->exp);
sv.c:  fprintf (fp, "Act %d\n", ch->act);
sv.c:  fprintf (fp, "Act2 %d\n", ch->pcdata->act2);
sv.c:  if (ch->pcdata->act3 != 0)
sv.c:    fprintf (fp, "Act3 %d\n", ch->pcdata->act3);
sv.c:  fprintf (fp, "AffTWO %d\n", ch->more_affected_by);
sv.c:  fprintf (fp, "AffBy %d\n", ch->affected_by);
sv.c:      ch->position == POSITION_FIGHTING ? POSITION_STANDING : ch->position);
sv.c:  fprintf (fp, "Learn .%o\n", ch->pcdata->learn);
sv.c:  fprintf (fp, "Practc .%o\n", ch->pcdata->practice);
sv.c:  if (ch->pcdata->saving_throw)
sv.c:    fprintf (fp, "SvngTh %d\n", ch->pcdata->saving_throw);
sv.c:  fprintf (fp, "Alignmt %d\n", ch->pcdata->alignment);
sv.c:  fprintf (fp, "NRat %ld\n", ch->max_hit + ch->max_move + ch->exp - ch->hitroll - ch->damroll);
sv.c:  fprintf (fp, "Hitrl .%o\n", ch->hitroll);
sv.c:  fprintf (fp, "Damrl .%o\n", ch->damroll);
sv.c:  fprintf (fp, "Armor .%o\n", ch->armor);
sv.c:  if (ch->pcdata->deaf)
sv.c:    fprintf (fp, "Deaf %d\n", ch->pcdata->deaf);
sv.c:  fprintf (fp, "Wimpy %d\n", ch->ced->wimpy);
sv.c:  fprintf (fp, "TotWps %ld\n", ch->pcdata->total_wps);
sv.c:  fprintf (fp, "PkLevs %ld\n", ch->pcdata->pklevels);
sv.c:  fprintf (fp, "Pkhelp %ld\n", ch->pcdata->pkhelpers);
sv.c:  fprintf (fp, "Pkills %d\n", ch->pcdata->pkills);
sv.c:  fprintf (fp, "Pkilled %d\n", ch->pcdata->pkilled);
sv.c:  fprintf (fp, "Pkers %ld\n", ch->pcdata->pkers);
sv.c:  fprintf (fp, "Warmth %ld\n", ch->pcdata->warmth);
sv.c:  fprintf (fp, "Hardpk %d\n", ch->pcdata->hard_pkills);
sv.c:  fprintf (fp, "Created %ld\n", ch->pcdata->created);
sv.c:  fprintf (fp, "ManaShield %d\n", ch->pcdata->mana_shield_strength);
sv.c:  fprintf (fp, "Elemental %d\n", ch->pcdata->elemental_alignment);
sv.c:      fprintf (fp, "Vnum %d\n", ch->pIndexData->vnum);
sv.c:      fprintf (fp, "Password %s~\n", ch->pcdata->pwd);
sv.c:      fprintf (fp, "RealPassword %s~\n", ch->pcdata->rpwd);
sv.c:      if (ch->pcdata->rprompt)
sv.c:	fprintf (fp, "Promptr %s~\n", fix_string (ch->pcdata->rprompt));
sv.c:      fprintf (fp, "Pagelen %d\n", ch->pcdata->pagelen);
sv.c:      fprintf (fp, "PImplO %d\n", ch->pcdata->augments);
sv.c:	  fprintf (fp, "Bamfin %s~\n", ch->pcdata->beamin);
sv.c:	  fprintf (fp, "Bamfout %s~\n", ch->pcdata->beamout);
sv.c:      if (ch->pcdata->bank > 0)
sv.c:	fprintf (fp, "Bank %ld\n", ch->pcdata->bank);
sv.c:      fprintf (fp, "Title %s~\n", ch->pcdata->title);
sv.c:	  fprintf(fp, ".%o ", ch->pcdata->stat[i]);
sv.c:	  fprintf(fp, "%d ", ch->pcdata->stat_mod[i]);
sv.c:	  fprintf(fp, "%d ", ch->pcdata->start_stat[i]);
sv.c:	       ch->pcdata->condition[0],
sv.c:	       ch->pcdata->condition[1],
sv.c:	       ch->pcdata->condition[2]);
sv.c:	       ch->pcdata->colors[0],
sv.c:	       ch->pcdata->colors[1],
sv.c:	       ch->pcdata->colors[2],
sv.c:	       ch->pcdata->colors[3],
sv.c:	       ch->pcdata->colors[4],
sv.c:	       ch->pcdata->colors[5],
sv.c:	       ch->pcdata->colors[6],
sv.c:	       ch->pcdata->colors[7],
sv.c:	       ch->pcdata->colors[8],
sv.c:	       ch->pcdata->colors[9]);
sv.c:    fprintf (fp, "Stance %d\n", ch->pcdata->stance);
sv.c:	  if (ch->pcdata->trophy_name[k][0] != '\0')
sv.c:	      fprintf (fp, "NTro %s \n", ch->pcdata->trophy_name[k]);
sv.c:	      fprintf (fp, "TTro %d\n", ch->pcdata->trophy_times[k]);
sv.c:	      fprintf (fp, "LTro %d\n", ch->pcdata->trophy_level[k]);
sv.c:	fprintf(fp, "%d ", ch->pcdata->faction[k]);
sv.c:	  if (ch->pcdata->ignore[k])
sv.c:	    fprintf (fp, "Ignore %s\n", ch->pcdata->ignore[k]);
sv.c:	  if (ch->pcdata->aliasname[k] &&
sv.c:	      ch->pcdata->aliasname[k][0] != '\0' &&
sv.c:	      ch->pcdata->alias[k] &&
sv.c:	      ch->pcdata->alias[k][0] != '\0')
sv.c:	      for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:	      fprintf (fp, "Alias %s\n", ch->pcdata->aliasname[k]);
sv.c:		       fix_string (ch->pcdata->alias[k]));
sv.c:	      for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:	  if (ch->pcdata->learned[sn] > 0)
sv.c:		       ch->pcdata->learned[sn], spell->spell_funky_name);
sv.c:  for (paf = ch->affected; paf && paf != NULL; paf = paf->next)
sv.c:      if (ch->pcdata->storage[k] == NULL || IS_SET (ch->pcdata->storage[k]->extra_flags, ITEM_NOSAVE))
sv.c:	obj = ch->pcdata->storage[k];
sv.c:      for (tch = char_list; tch != NULL; tch = tch->next)
sv.c:	  if (IS_PLAYER (tch) && tch->desc != NULL && !str_cmp (tch->pcdata->name, arg2))
sv.c:	      if (!str_cmp(arg1,tch->pcdata->rpwd))
sv.c:		  tch->desc->connected = CON_PLAYING;
sv.c:		  close_socket (tch->desc);
sv.c:		  tch->desc = d;
sv.c:	      fprintf (stderr, "%s was online and %s@%s attempted to log in.\n", NAME (tch),   (tch->desc ? tch->desc->username : "nodesc"),
sv.c:		       (tch->desc ? tch->desc->host : "nodesc"));
sv.c:	      tch->pcdata->new_exp = TRUE;
sv.c:	  if (IS_PLAYER (tch) && tch->desc == NULL && !strcmp(tch->pcdata->name, arg2))
sv.c:	      tch->desc = d;
sv.c:  ch->pcdata = new_pc ();
sv.c:  ch->next = NULL;
sv.c:    ch->desc = d;
sv.c:    ch->desc = NULL;
sv.c:  free_string (ch->pcdata->name);
sv.c:  ch->pcdata->name = str_dup (name);
sv.c:  ch->pcdata->temp = NULL;
sv.c:	      ch->act = fread_number(fpt);
sv.c:	      if (IS_SET(ch->act, ACT_CRASHER))
sv.c:		  if(ch->desc)
sv.c:		    SET_BIT(ch->desc->act, DESC_CRASHER);
sv.c:	  KEY ("Act2", ch->pcdata->act2, fread_number (fpt));
sv.c:	  KEY ("Act3", ch->pcdata->act3, fread_number (fpt));
sv.c:	  KEY ("AffBy", ch->affected_by, fread_number (fpt));
sv.c:	  KEY ("AffTWO", ch->more_affected_by, fread_number (fpt));
sv.c:	      ch->pcdata->alignment = fread_number(fpt);
sv.c:	      if (ch->pcdata->alignment < 0) ch->pcdata->alignment = 1;
sv.c:	      if (ch->pcdata->alignment >= NUM_ALIGN) ch->pcdata->alignment = 2;
sv.c:	  KEY ("Armor", ch->armor, fread_number (fpt));
sv.c:		  if (!ch->pcdata->aliasname[k] ||
sv.c:		      ch->pcdata->aliasname[k][0] == '\0' ||
sv.c:		      !ch->pcdata->alias[k] ||
sv.c:		      ch->pcdata->alias[k][0] == '\0')
sv.c:	      ch->pcdata->aliasname[k] = str_dup (fread_word (fpt));
sv.c:	      ch->pcdata->alias[k] = str_dup (fread_string2 (fpt, NULL));
sv.c:	      for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:	      paf->next = ch->affected;
sv.c:	      ch->affected = paf;
sv.c:		ch->pcdata->stat_mod[i] = fread_number(fpt);
sv.c:		ch->pcdata->stat[i] = fread_number(fpt);
sv.c:	      ch->pcdata->bank = fread_number (fpt);
sv.c:	  SKEY ("Bamfin", ch->pcdata->beamin, fread_string2 (fpt, NULL));
sv.c:	  SKEY ("Bamfout", ch->pcdata->beamout, fread_string2 (fpt, NULL));
sv.c:	  KEY ("Clan", ch->pcdata->clan, fread_number(fpt));
sv.c:	   KEY ("Clan2", ch->pcdata->clan2, fread_number(fpt));
sv.c:	  KEY ("Created", ch->pcdata->created, fread_number(fpt));
sv.c:	      ch->pcdata->condition[0] = fread_number (fpt);
sv.c:	      ch->pcdata->condition[1] = fread_number (fpt);
sv.c:	      ch->pcdata->condition[2] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[0] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[1] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[2] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[3] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[4] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[5] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[6] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[7] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[8] = fread_number (fpt);
sv.c:	      ch->pcdata->colors[9] = fread_number (fpt);
sv.c:	  KEY ("Damrl", ch->damroll, fread_number (fpt));
sv.c:	  KEY ("Deaths", ch->pcdata->deaths, fread_number (fpt));
sv.c:	  KEY ("DPray", ch->pcdata->pray_points, fread_number (fpt));
sv.c:	      ch->gold = 0;
sv.c:	      ch->copper = 0;
sv.c:	      ch->gold = cns * 100;
sv.c:	      ch->gold += (cns * 10);
sv.c:	      ch->gold += fread_number (fpt);
sv.c:	      ch->copper = cns * 10;
sv.c:	      ch->copper += fread_number (fpt);
sv.c:	  KEY ("Deaf", ch->pcdata->deaf, fread_number (fpt));
sv.c:	  SKEY ("Descr", ch->pcdata->description, fread_string2 (fpt, NULL));
sv.c:	  KEY ("Elemental", ch->pcdata->elemental_alignment, fread_number (fpt));
sv.c:	      if (ch->pcdata->level > MAX_LEVEL)
sv.c:		ch->pcdata->level = MAX_LEVEL;
sv.c:	  KEY ("EFight", ch->ced->fight_ops, fread_number (fpt));
sv.c:	  KEY ("Exp", ch->exp, fread_number (fpt));
sv.c:		ch->pcdata->faction[i] = fread_number(fpt);
sv.c:	  KEY ("Hitrl", ch->hitroll, fread_number (fpt));
sv.c:	      ch->hit = fread_number (fpt);
sv.c:	      ch->max_hit = fread_number (fpt);
sv.c:	      ch->move = fread_number (fpt);
sv.c:	      ch->max_move = fread_number (fpt);
sv.c:	  KEY ("Hardpk", ch->pcdata->hard_pkills, fread_number (fpt));
sv.c:		  if (!ch->pcdata->ignore[i])
sv.c:	      ch->pcdata->ignore[i] = str_dup (fread_word (fpt));
sv.c:	  KEY ("Killpt", ch->pcdata->killpoints, fread_number (fpt));
sv.c:	  KEY ("Level", ch->pcdata->level, fread_number (fpt));
sv.c:	  KEY ("Learn", ch->pcdata->learn, fread_number (fpt));
sv.c:	  SKEY ("LoDesc", ch->pcdata->long_descr, fread_string2 (fpt, NULL));
sv.c:	      strcpy (ch->pcdata->chan_color[tt], fread_word (fpt));
sv.c:	  KEY ("LCign", ch->pcdata->chan_ignore, fread_number (fpt));
sv.c:		  if (ch->pcdata->trophy_level[i] == 0)
sv.c:	      ch->pcdata->trophy_level[i] = fread_number (fpt);
sv.c:	  KEY ("ManaShield", ch->pcdata->mana_shield_strength, fread_number (fpt));
sv.c:	  KEY ("NAn", ch->pcdata->show_lev, fread_number (fpt));
sv.c:	  KEY ("NHeight", ch->height, fread_number (fpt));
sv.c:	  KEY ("Nospam", ch->pcdata->no_spam, fread_number (fpt));
sv.c:	  KEY ("NDon", ch->pcdata->donated, fread_number (fpt));
sv.c:	  KEY ("Nexp", ch->pcdata->new_exp, fread_number (fpt));
sv.c:	  KEY ("NQuest", ch->pcdata->questflag, fread_number (fpt));
sv.c:	  KEY ("NatArm", ch->pcdata->nat_armor, fread_number (fpt));
sv.c:	  KEY ("NatAbil", ch->pcdata->nat_abilities, fread_number (fpt));
sv.c:	  KEY ("NatAbilT", ch->pcdata->nat_abilities2, fread_number (fpt));
sv.c:	  KEY ("NWasrm", ch->ced->wasroom, fread_number (fpt));
sv.c:	  KEY ("NChal", ch->fgt->challenge, fread_number (fpt));
sv.c:	  KEY ("NChon", ch->pcdata->challenge_on, fread_number (fpt));
sv.c:	  KEY ("NRemort", ch->pcdata->remort_times, fread_number (fpt));
sv.c:	  KEY ("NAMsg", ch->pcdata->arena_msg, fread_number (fpt));
sv.c:	  KEY ("NWPS", ch->pcdata->warpoints, fread_number (fpt));
sv.c:	  KEY ("NMana", ch->pcdata->n_mana, fread_number (fpt));
sv.c:	  KEY ("NGldBt", ch->pcdata->guilds, fread_number (fpt));
sv.c:		  if (ch->pcdata->trophy_name[i][0] == '\0')
sv.c:	      strcpy (ch->pcdata->trophy_name[i], fread_word (fpt));
sv.c:	      strcpy (ch->pcdata->email, fread_string2 (fpt, NULL));
sv.c:	  KEY ("Note", ch->pcdata->last_note, fread_number (fpt));
sv.c:	  SKEY ("Promptr", ch->pcdata->rprompt, fread_string2 (fpt, NULL));
sv.c:	  SKEY ("Password", ch->pcdata->pwd, fread_string2 (fpt, NULL));
sv.c:	  KEY ("Played", ch->pcdata->played, fread_number (fpt));
sv.c:	  KEY ("Pagelen", ch->pcdata->pagelen, fread_number (fpt));
sv.c:	  KEY ("PImplO", ch->pcdata->augments, fread_number (fpt));
sv.c:	  KEY ("Positn", ch->position, fread_number (fpt));
sv.c:	  KEY ("Practc", ch->pcdata->practice, fread_number (fpt));
sv.c:	  KEY ("Pklevs", ch->pcdata->pklevels, fread_number (fpt));
sv.c:	  KEY ("Pkhelp", ch->pcdata->pkhelpers, fread_number (fpt));
sv.c:	  KEY ("Pkills", ch->pcdata->pkills, fread_number (fpt));
sv.c:	  KEY ("Pkilled", ch->pcdata->pkilled, fread_number (fpt));
sv.c:	  KEY ("Pkers", ch->pcdata->pkers, fread_number (fpt));
sv.c:	  if (ch->position == POSITION_FIGHTING)
sv.c:	      ch->pcdata->race = fread_number (fpt);
sv.c:	  SKEY ("RealPassword", ch->pcdata->rpwd, fread_string2 (fpt,NULL));
sv.c:	      ch->in_room = NULL;
sv.c:	      ch->pcdata->temp_room = get_room_index (fread_number (fpt));
sv.c:	  KEY ("SvngTh", ch->pcdata->saving_throw, fread_number (fpt));
sv.c:	  KEY ("Sex", ch->pcdata->sex, fread_number (fpt));
sv.c:	  SKEY ("ShDesc", ch->pcdata->short_descr, fread_string2 (fpt, NULL));
sv.c:	  KEY ("SCool", ch->pcdata->cool_skills, fread_number (fpt));
sv.c:	  KEY ("Secrty", ch->pcdata->security, fread_number (fpt));
sv.c:	  KEY ("Stance", ch->pcdata->stance, fread_number (fpt));
sv.c:		ch->pcdata->learned[sn] = value;
sv.c:		  if (ch->pcdata->trophy_times[i] == 0)
sv.c:	      ch->pcdata->trophy_times[i] = fread_number (fpt);
sv.c:	  KEY ("TtlKils", ch->pcdata->totalkills, fread_number (fpt));
sv.c:	      ch->pcdata->title = str_dup (fread_string2 (fpt, NULL));
sv.c:	  KEY ("TotWps", ch->pcdata->total_wps, fread_number(fpt));
sv.c:	      ch->pIndexData = get_mob_index (fread_number (fpt));
sv.c:	  KEY ("Winv", ch->pcdata->wizinvis, fread_number (fpt));
sv.c:	  KEY ("Wimpy", ch->ced->wimpy, fread_number (fpt));
sv.c:	  KEY ("Warmth", ch->pcdata->warmth, fread_number (fpt));
sv.c:  if (ch->pcdata->temp_room == NULL)
sv.c:    ch->pcdata->temp_room = get_room_index(ch->pcdata->alignment +100);
sv.c:		  if (ch->pcdata->pet_temp[kl] == 0)
sv.c:		      ch->pcdata->pet_temp[kl] = fread_number (fp);
sv.c:		      ch->pcdata->pet_hps[kl] = fread_number (fp);
sv.c:		      ch->pcdata->pet_move[kl] = fread_number (fp);
sv.c:	      ch->act = fread_number(fp);
sv.c:	      if (IS_SET(ch->act, ACT_CRASHER))
sv.c:		  if (ch->desc)
sv.c:		    SET_BIT(ch->desc->act, DESC_CRASHER);
sv.c:	  KEY ("Act2", ch->pcdata->act2, fread_number (fp));
sv.c:	  KEY ("Act3", ch->pcdata->act3, fread_number (fp));
sv.c:	  KEY ("AffBy", ch->affected_by, fread_number (fp));
sv.c:	  KEY ("AffTWO", ch->more_affected_by, fread_number (fp));
sv.c:	      ch->pcdata->alignment = fread_number(fp);
sv.c:	      if (ch->pcdata->alignment < 0) ch->pcdata->alignment = 1;
sv.c:	      if (ch->pcdata->alignment >= NUM_ALIGN) ch->pcdata->alignment = 2;
sv.c:	  KEY ("Armor", ch->armor, fread_number (fp));
sv.c:		  if (!ch->pcdata->aliasname[k] ||
sv.c:		      ch->pcdata->aliasname[k][0] == '\0' ||
sv.c:		      !ch->pcdata->alias[k] ||
sv.c:		      ch->pcdata->alias[k][0] == '\0')
sv.c:	      ch->pcdata->aliasname[k] = str_dup (fread_word (fp));
sv.c:	      ch->pcdata->alias[k] = str_dup (fread_string2 (fp, NULL));
sv.c:	      for (msk = ch->pcdata->alias[k]; *msk != '\0'; msk++)
sv.c:	      paf->next = ch->affected;
sv.c:	      ch->affected = paf;
sv.c:		ch->pcdata->stat_mod[i] = fread_number(fp);
sv.c:		ch->pcdata->stat[i] = fread_number(fp);
sv.c:	      ch->pcdata->bank = fread_number (fp);
sv.c:	  SKEY ("Bamfin", ch->pcdata->beamin, fread_string2 (fp, NULL));
sv.c:	  SKEY ("Bamfout", ch->pcdata->beamout, fread_string2 (fp, NULL));
sv.c:	  KEY ("Created", ch->pcdata->created, fread_number(fp));
sv.c:	  KEY ("Clan", ch->pcdata->clan, fread_number(fp));
sv.c:	   KEY ("Clan2", ch->pcdata->clan2, fread_number(fp));
sv.c:	      ch->pcdata->condition[0] = fread_number (fp);
sv.c:	      ch->pcdata->condition[1] = fread_number (fp);
sv.c:	      ch->pcdata->condition[2] = fread_number (fp);
sv.c:	      ch->pcdata->colors[0] = fread_number (fp);
sv.c:	      ch->pcdata->colors[1] = fread_number (fp);
sv.c:	      ch->pcdata->colors[2] = fread_number (fp);
sv.c:	      ch->pcdata->colors[3] = fread_number (fp);
sv.c:	      ch->pcdata->colors[4] = fread_number (fp);
sv.c:	      ch->pcdata->colors[5] = fread_number (fp);
sv.c:	      ch->pcdata->colors[6] = fread_number (fp);
sv.c:	      ch->pcdata->colors[7] = fread_number (fp);
sv.c:	      ch->pcdata->colors[8] = fread_number (fp);
sv.c:	      ch->pcdata->colors[9] = fread_number (fp);
sv.c:	  KEY ("Damrl", ch->damroll, fread_number (fp));
sv.c:	  KEY ("Deaths", ch->pcdata->deaths, fread_number (fp));
sv.c:	  KEY ("DPray", ch->pcdata->pray_points, fread_number (fp));
sv.c:	      ch->gold = 0;
sv.c:	      ch->copper = 0;
sv.c:	      ch->gold = cns * 100;
sv.c:	      ch->gold += (cns * 10);
sv.c:	      ch->gold += fread_number (fp);
sv.c:	      ch->copper = cns * 10;
sv.c:	      ch->copper += fread_number (fp);
sv.c:	  KEY ("Deaf", ch->pcdata->deaf, fread_number (fp));
sv.c:	  SKEY ("Descr", ch->pcdata->description, fread_string2 (fp, NULL));
sv.c:	  KEY ("Elemental", ch->pcdata->elemental_alignment, fread_number (fp));
sv.c:	  KEY ("EFight", ch->ced->fight_ops, fread_number (fp));
sv.c:	  KEY ("Exp", ch->exp, fread_number (fp));
sv.c:		 ch->pcdata->faction[i] = fread_number(fp);
sv.c:	  KEY ("Hitrl", ch->hitroll, fread_number (fp));
sv.c:	      ch->hit = fread_number (fp);
sv.c:	      ch->max_hit = fread_number (fp);
sv.c:	      ch->move = fread_number (fp);
sv.c:	      ch->max_move = fread_number (fp);
sv.c:	  KEY ("Hardpk", ch->pcdata->hard_pkills, fread_number (fp));
sv.c:		  if (!ch->pcdata->ignore[i])
sv.c:	      ch->pcdata->ignore[i] = str_dup (fread_word (fp));
sv.c:	  KEY ("Killpt", ch->pcdata->killpoints, fread_number (fp));
sv.c:	  KEY ("Level", ch->pcdata->level, fread_number (fp));
sv.c:	  KEY ("Learn", ch->pcdata->learn, fread_number (fp));
sv.c:	  SKEY ("LoDesc", ch->pcdata->long_descr, fread_string2 (fp, NULL));
sv.c:	      strcpy (ch->pcdata->chan_color[tt], fread_word (fp));
sv.c:	  KEY ("LCign", ch->pcdata->chan_ignore, fread_number (fp));
sv.c:		  if (ch->pcdata->trophy_level[i] == 0)
sv.c:	      ch->pcdata->trophy_level[i] = fread_number (fp);
sv.c:	  KEY ("ManaShield", ch->pcdata->mana_shield_strength, fread_number (fp));
sv.c:	  KEY ("NAn", ch->pcdata->show_lev, fread_number (fp));
sv.c:	  KEY ("Nospam", ch->pcdata->no_spam, fread_number (fp));
sv.c:	  KEY ("NHeight", ch->height, fread_number (fp));
sv.c:	  KEY ("NDon", ch->pcdata->donated, fread_number (fp));
sv.c:	  KEY ("Nexp", ch->pcdata->new_exp, fread_number (fp));
sv.c:	  KEY ("NQuest", ch->pcdata->questflag, fread_number (fp));
sv.c:	  KEY ("NatArm", ch->pcdata->nat_armor, fread_number (fp));
sv.c:	  KEY ("NatAbil", ch->pcdata->nat_abilities, fread_number (fp));
sv.c:	  KEY ("NatAbilT", ch->pcdata->nat_abilities2, fread_number (fp));
sv.c:	  KEY ("NWasrm", ch->ced->wasroom, fread_number (fp));
sv.c:	  KEY ("NChal", ch->fgt->challenge, fread_number (fp));
sv.c:	  KEY ("NChon", ch->pcdata->challenge_on, fread_number (fp));
sv.c:	  KEY ("NRemort", ch->pcdata->remort_times, fread_number (fp));
sv.c:	  KEY ("NAMsg", ch->pcdata->arena_msg, fread_number (fp));
sv.c:	  KEY ("NWPS", ch->pcdata->warpoints, fread_number (fp));
sv.c:	  KEY ("NMana", ch->pcdata->n_mana, fread_number (fp));
sv.c:	  KEY ("NGldBt", ch->pcdata->guilds, fread_number (fp));
sv.c:		  if (ch->pcdata->trophy_name[i][0] == '\0')
sv.c:	      strcpy (ch->pcdata->trophy_name[i], fread_word (fp));
sv.c:	      strcpy (ch->pcdata->email, fread_string2 (fp, NULL));
sv.c:	  KEY ("Note", ch->pcdata->last_note, fread_number (fp));
sv.c:	  SKEY ("Promptr", ch->pcdata->rprompt, fread_string2 (fp, NULL));
sv.c:	  SKEY ("Password", ch->pcdata->pwd, fread_string2 (fp, NULL));
sv.c:	  KEY ("Played", ch->pcdata->played, fread_number (fp));
sv.c:	  KEY ("Pagelen", ch->pcdata->pagelen, fread_number (fp));
sv.c:	  KEY ("PImplO", ch->pcdata->augments, fread_number (fp));
sv.c:	  KEY ("Positn", ch->position, fread_number (fp));
sv.c:	  KEY ("Practc", ch->pcdata->practice, fread_number (fp));
sv.c:	  KEY ("Pklevs", ch->pcdata->pklevels, fread_number (fp));
sv.c:	  KEY ("Pkhelp", ch->pcdata->pkhelpers, fread_number (fp));
sv.c:	  KEY ("Pkills", ch->pcdata->pkills, fread_number (fp));
sv.c:	  KEY ("Pkilled", ch->pcdata->pkilled, fread_number (fp));
sv.c:	  KEY ("Pkers", ch->pcdata->pkers, fread_number (fp));
sv.c:	      ch->pcdata->race = fread_number (fp);
sv.c:	  SKEY ("RealPassword", ch->pcdata->rpwd, fread_string2 (fp,NULL));
sv.c:	      ch->pcdata->temp_room = get_room_index (fread_number (fp));
sv.c:	  KEY ("SvngTh", ch->pcdata->saving_throw, fread_number (fp));
sv.c:	  KEY ("Sex", ch->pcdata->sex, fread_number (fp));
sv.c:	  SKEY ("ShDesc", ch->pcdata->short_descr, fread_string2 (fp, NULL));
sv.c:	  KEY ("SCool", ch->pcdata->cool_skills, fread_number (fp));
sv.c:	  KEY ("Secrty", ch->pcdata->security, fread_number (fp));
sv.c:	  KEY ("Stance", ch->pcdata->stance, fread_number (fp));
sv.c:	      ch->pcdata->script_flags[csf] = str_dup (fread_string2 (fp, NULL));
sv.c:		ch->pcdata->learned[sn] = value;
sv.c:		ch->pcdata->start_stat[i] = fread_number(fp);
sv.c:		  if (ch->pcdata->trophy_times[i] == 0)
sv.c:	      ch->pcdata->trophy_times[i] = fread_number (fp);
sv.c:	  KEY ("TtlKils", ch->pcdata->totalkills, fread_number (fp));
sv.c:	      ch->pcdata->title = str_dup (fread_string2 (fp, NULL));
sv.c:	  KEY ("TotWps", ch->pcdata->total_wps, fread_number (fp));
sv.c:	      ch->pIndexData = get_mob_index (fread_number (fp));
sv.c:	  KEY ("Winv", ch->pcdata->wizinvis, fread_number (fp));
sv.c:	  KEY ("Wimpy", ch->ced->wimpy, fread_number (fp));
sv.c:	  KEY ("Warmth", ch->pcdata->warmth, fread_number (fp));  
sv.c:      if (ch->pcdata->storage[k] == NULL)
sv.c:		ch->hold1 = obj;
sv.c:		ch->hold2 = obj;
sv.c:		    SET_BIT(ch->act, PLR_HAS_SHOES);
sv.c:		    SET_BIT(ch->act, PLR_HAS_SHIELD);
sv.c:			SET_BIT(ch->act, PLR_HAS_SNOWSHOES);
sv.c:			SET_BIT(ch->act, PLR_HAS_SCUBA);
sv.c:			SET_BIT(ch->act, PLR_HAS_MTN_BOOTS);
sv.c:		    ch->pcdata->light++;
sv.c:		    ch->pcdata->command_objs++;
sv.c:		      ch->pcdata->storage[free_storage (ch)] = obj;
toptr.c:  if (ch->pcdata->warpoints <0) ch->pcdata->warpoints = 0;
toptr.c:  if (current_time - ch->pcdata->created > 0 &&  current_time - startup_time > 0) 
toptr.c:       charinfo[10] = (float)((float) (ch->pcdata->played + (current_time
toptr.c:- ch->pcdata->logon)))*100.0/((float)(current_time-ch->pcdata->created));
toptr.c:(ch->pcdata->played)*100.0)/((float)(current_time-startup_time));
toptr.c:  if (ch->pcdata->pkills > 20)
toptr.c:      charinfo[0] = (float) ch->pcdata->pkills;
toptr.c:      charinfo[1] = (float) ((float) ch->pcdata->pklevels /
toptr.c:			       (float) ch->pcdata->pkills);
toptr.c:      charinfo[2] = (float) ((float) ch->pcdata->pkills /
toptr.c:			     (float) ch->pcdata->pkhelpers);
toptr.c:      charinfo[5] = (float)   ch->pcdata->total_wps;
toptr.c:      charinfo[6] =  (float) ((float) ch->pcdata->pkills /
toptr.c:			       (float) ch->pcdata->pklevels);
toptr.c:      charinfo[7] = (float) ((float) ch->pcdata->pkhelpers/
toptr.c:			     (float) ch->pcdata->pkills); 
toptr.c:      charinfo[8] = (float) ch->pcdata->warpoints;
toptr.c:      charinfo[9] = (float) ch->pcdata->hard_pkills;
toptr.c:  if (ch->pcdata->pkilled >=1)
toptr.c:      charinfo[3] = (float) ((float) ch->pcdata->pkilled);
toptr.c:      charinfo[4] = (float) ((float) ch->pcdata->pkers /
toptr.c:				    (float) ch->pcdata->pkilled);
toptr.c:	  pkdata[newslot[i]][i].alignment = ch->pcdata->alignment;
toptr.c:  if (ch->pcdata->warpoints  < 0) ch->pcdata->warpoints = 0;
toptr.c:          if (ch->pcdata->warpoints > topten.topten_warpoints[k])
toptr.c:     topten.topten_warpoints[newslot] = ch->pcdata->warpoints;
toptr.c:     topten.topten_alignment[newslot] = ch->pcdata->alignment;
toptr.c:      ratingd.rating_alignment[newslot] = ch->pcdata->alignment;
toptr.c:    if ((ch->pcdata->trophy_name[i] != '\0') && (ch->pcdata->trophy_level[i] >=1) && (ch->pcdata->trophy_times[i] >=1))
toptr.c:		 ch->pcdata->trophy_level[i],
toptr.c:		 ch->pcdata->trophy_name[i], ch->pcdata->trophy_times[i]);
toptr.c:  position = ch->position;
toptr.c:  ch->position = POSITION_STANDING;
toptr.c:  sprintf(buffy, "\n\rYou have \x1b[1;31m%ld\x1b[0;37m warpoints.\n\r", ch->pcdata->warpoints);
toptr.c:  ch->position = position;
toptr.c:  position = ch->position;
toptr.c:  ch->position = POSITION_STANDING;
toptr.c:      sprintf(buffy, "\n\rYour total number of pkills is: \x1b[1;32m%d\x1b[0;37m.\n\r", ch->pcdata->pkills);
toptr.c:      ch->position = position;
toptr.c:      sprintf(buffy, "\n\rYour average level of pkill victims is \x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)ch->pcdata->pklevels)/((float) (UMAX(ch->pcdata->pkills, 1))));
toptr.c:      ch->position = position;
toptr.c:      sprintf(buffy, "\n\rYour average groupsize when you pkill someone is \x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)ch->pcdata->pkhelpers)/((float) (UMAX(ch->pcdata->pkills, 1))));
toptr.c:      ch->position = position;
toptr.c:         sprintf(buffy, "\n\rYour total number of times you have been pkilled is: \x1b[1;32m%d\x1b[0;37m.\n\r", ch->pcdata->pkilled);
toptr.c:      ch->position = position;
toptr.c:      sprintf(buffy, "\n\rYou require \x1b[1;34m%2.4f\x1b[0;37m people to kill you on average.\n\r", (float) ((float)ch->pcdata->pkers)/((float) (UMAX(ch->pcdata->pkilled, 1))));
toptr.c:      ch->position = position;
toptr.c:         sprintf(buffy, "\n\rYour total number of warpoints is: \x1b[1;32m%ld\x1b[0;37m.\n\r", ch->pcdata->total_wps);
toptr.c:      ch->position = position;
toptr.c:         sprintf(buffy, "\n\rYour total number of hard pkills is: \x1b[1;32m%ld\x1b[0;37m.\n\r", ch->pcdata->hard_pkills);
toptr.c:      ch->position = position;
toptr.c:	   sprintf(buffy, "\n\rYour number of warpoints is: \x1b[1;32m%d\x1b[0;37m.\n\r", ch->pcdata->warpoints);
toptr.c:      ch->position = position;
toptr.c:         sprintf(buffy, "\n\rYour average level of pkill victims is \x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)ch->pcdata->pklevels)/((float) (UMAX(ch->pcdata->pkills, 1))));
toptr.c:      ch->position = position;
toptr.c:          sprintf(buffy, "\n\rYour average groupsize when you pkill someone is \x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)ch->pcdata->pkhelpers)/((float) (UMAX(ch->pcdata->pkills, 1))));
toptr.c:      ch->position = position;
toptr.c:      sprintf(buffy, "\n\rYour percentage of playing time since your creation is:\x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)(ch->pcdata->played + current_time - ch->pcdata->logon)*100.0/((float) (current_time - ch->pcdata->created))));
toptr.c:      ch->position = position;
toptr.c:      sprintf(buffy, "\n\rYour percentage of playing time since the game originally started is:\x1b[1;34m%2.4f\x1b[0;37m.\n\r", (float) ((float)(ch->pcdata->played + current_time - ch->pcdata->logon)*100.0/((float) (current_time - startup_time))));
toptr.c:      ch->position = position;
toptr.c: ch->position = position;
toptr.c:  position = ch->position;
toptr.c:  ch->position = POSITION_STANDING;
toptr.c:  ch->position = position;
toptr.c:      if (ch->pcdata->trophy_name[i][0] == '\0')
toptr.c:      if (ch->pcdata->trophy_level[i] < templev)
toptr.c:	  templev = ch->pcdata->trophy_level[i];
toptr.c:  if (ch->pcdata->trophy_level[tempnum] <= LEVEL (victim))
toptr.c:  ch->pcdata->online_spot->pk_since_locate++;
toptr.c:=(float)((float)(5+victim->pcdata->remort_times))/((float)(5+ch->pcdata->remort_times));
toptr.c:  if (IS_SET(ch->pcdata->act2, PLR_HARDCORE))
toptr.c:   ch->pcdata->warpoints +=wpstogive;
toptr.c:   ch->pcdata->total_wps +=wpstogive;
toptr.c:    ch->pcdata->total_wps += 1;
toptr.c:    ch->pcdata->warpoints += 1;
toptr.c:      ch->pcdata->total_wps += 1;
toptr.c:      ch->pcdata->warpoints += 1;
toptr.c:      if (ch->pcdata->trophy_name[i][0] == '\0')
toptr.c:      if (!str_cmp (RNAME (victim), ch->pcdata->trophy_name[i]))
toptr.c:	  ch->pcdata->trophy_times[i]++;
toptr.c:	  ch->pcdata->trophy_level[i] = LEVEL (victim);
toptr.c:  strcpy (ch->pcdata->trophy_name[nummy], RNAME (victim));
toptr.c:  ch->pcdata->trophy_times[nummy] = 1;
toptr.c:  ch->pcdata->trophy_level[nummy] = LEVEL (victim);
toptr.c:      if ((ch->pcdata->trophy_level[k] > 0) &&
toptr.c:(ch->pcdata->trophy_times[k] > 0) && (ch->pcdata->trophy_name[k][0] !=
toptr.c:          if ((ch->pcdata->trophy_level[k]) <
toptr.c:(ch->pcdata->trophy_level[i]))
toptr.c:	      templev = ch->pcdata->trophy_level[i];
toptr.c:	      ch->pcdata->trophy_level[i] = ch->pcdata->trophy_level[k];
toptr.c:	      ch->pcdata->trophy_level[k] = templev;
toptr.c:	      tempnum = ch->pcdata->trophy_times[i];
toptr.c:	      ch->pcdata->trophy_times[i] = ch->pcdata->trophy_times[k];
toptr.c:	      ch->pcdata->trophy_times[k] = tempnum;
toptr.c:	      strcpy(tempname, ch->pcdata->trophy_name[i]);
toptr.c:	      strcpy(ch->pcdata->trophy_name[i],
toptr.c:ch->pcdata->trophy_name[k]);
toptr.c:	      strcpy(ch->pcdata->trophy_name[k], tempname);
upd.c:  ch->hitroll = 0;
upd.c:  ch->damroll = 0;
upd.c:  ch->armor = ch->pcdata->nat_armor;
upd.c:  ch->pcdata->plus_hide = 0;
upd.c:  ch->pcdata->plus_sneak = 0;
upd.c:  ch->pcdata->plus_kick = 0;
upd.c:  ch->pcdata->armor[0] = 0;
upd.c:  ch->pcdata->armor[1] = 0;
upd.c:  ch->pcdata->armor[2] = 0;
upd.c:  ch->pcdata->armor[3] = 0;
upd.c:  ch->pcdata->carry_weight = 0;
upd.c:  ch->pcdata->carry_number = 0;
upd.c:  ch->pcdata->command_objs = 0;
upd.c:      ch->pcdata->stat_mod[i] = 0;
upd.c:      ch->pcdata->learned[race_info[ch->pcdata->race].nat_skills[i]] = 100;
upd.c:      ch->pcdata->learned[align_info[ch->pcdata->alignment].nat_skills[i]] = 100;
upd.c:  if (ch->pcdata->warpoints < 0) ch->pcdata->warpoints = 0;
upd.c:  if (ch->pcdata->total_wps < 0) ch->pcdata->total_wps = 0;
upd.c:  LOOP (paf, ch->affected, paf->next)
upd.c:	  ch->armor += mod;
upd.c:	  ch->hitroll += mod;
upd.c:	  ch->damroll += mod;
upd.c:	  ch->pcdata->plus_kick += mod;
upd.c:	  ch->pcdata->plus_sneak += mod;
upd.c:	  ch->pcdata->warmth += mod;
upd.c:	  ch->pcdata->plus_hide += mod;
upd.c:          ch->pcdata->stat_mod[STR] += mod;
upd.c:          ch->pcdata->stat_mod[INT] += mod;
upd.c:          ch->pcdata->stat_mod[WIS] += mod;
upd.c:          ch->pcdata->stat_mod[DEX] += mod;
upd.c:          ch->pcdata->stat_mod[CON] += mod;
upd.c:  LOOP (obj, ch->carrying, obj->next_content)
upd.c:      ch->pcdata->carry_weight += get_obj_weight (obj);
upd.c:      ch->pcdata->carry_number += get_obj_number (obj);
upd.c:	ch->pcdata->command_objs++;
upd.c:	      ch->pcdata->armor[0] += (r->protects_body);
upd.c:	      ch->pcdata->armor[1] += (r->protects_head);
upd.c:	      ch->pcdata->armor[2] += (r->protects_legs);
upd.c:	      ch->pcdata->armor[3] += (r->protects_arms);
upd.c:	      ch->pcdata->armor[2] += (r->protects_legs * r->condition_now) / (r->max_condition);
upd.c:	      ch->pcdata->armor[0] += (r->protects_body * r->condition_now) / (r->max_condition);
upd.c:	      ch->pcdata->armor[1] += (r->protects_head * r->condition_now) / (r->max_condition);
upd.c:	      ch->pcdata->armor[3] += (r->protects_arms * r->condition_now) / (r->max_condition);
upd.c:	      ch->armor += mod;
upd.c:	      ch->hitroll += mod;
upd.c:	      ch->damroll += mod;
upd.c:	      ch->pcdata->plus_kick += mod;
upd.c:	      ch->pcdata->plus_sneak += mod;
upd.c:	      ch->pcdata->warmth +=mod;
upd.c:	      ch->pcdata->plus_hide += mod;
upd.c:	      ch->pcdata->stat_mod[STR] += mod;
upd.c:	      ch->pcdata->stat_mod[INT] += mod;
upd.c:	      ch->pcdata->stat_mod[WIS] += mod;
upd.c:	      ch->pcdata->stat_mod[DEX] += mod;
upd.c:	      ch->pcdata->stat_mod[CON] += mod;
upd.c:	      ch->armor += mod;
upd.c:	      ch->hitroll += mod;
upd.c:	      ch->damroll += mod;
upd.c:	      ch->pcdata->plus_kick += mod;
upd.c:	      ch->pcdata->plus_sneak += mod;
upd.c:	      ch->pcdata->warmth += mod;
upd.c:	      ch->pcdata->plus_hide += mod;
upd.c:	      ch->pcdata->stat_mod[STR] += mod;
upd.c:	      ch->pcdata->stat_mod[INT] += mod;
upd.c:	      ch->pcdata->stat_mod[WIS] += mod;
upd.c:	      ch->pcdata->stat_mod[DEX] += mod;
upd.c:	      ch->pcdata->stat_mod[CON] += mod;
upd.c:  ch->damroll += 
upd.c:     ((ch->pcdata->remort_times))+
upd.c:     (IS_SET (ch->ced->fight_ops, F_AGGRESSIVE) ? 2 : 0)+
upd.c:     (IS_SET (ch->ced->fight_ops, F_POWER) ? 1 : 0)+
upd.c:      race_info[ch->pcdata->race].combat_damage_bonus+
upd.c:     align_info[ch->pcdata->alignment].combat_damage_bonus);
upd.c:  ch->hitroll += 
upd.c:     (IS_SET(ch->ced->fight_ops, F_AGGRESSIVE) ? -4 : 0) +
upd.c:  ch->affected_by |= ch->pcdata->nat_abilities;
upd.c:  ch->affected_by |= race_info[ch->pcdata->race].affect_bits;
upd.c:  ch->more_affected_by |= ch->pcdata->nat_abilities2;
upd.c:  ch->more_affected_by |= race_info[ch->pcdata->race].affect_bits2;
upd.c:  ch->affected_by |= align_info[ch->pcdata->alignment].affect_bits;
upd.c:  ch->more_affected_by |= align_info[ch->pcdata->alignment].affect_bits2;
upd.c:  ch->pcdata->practice += add_prac;
upd.c:  ch->pcdata->learn += add_learn;
upd.c:    if (-gain >= ch->exp)
upd.c:  ch->exp += gain;
upd.c:  while (LEVEL (ch) < pow.max_level && ch->exp >= FIND_EXP (LEVEL (ch), ch->pcdata->race))
upd.c:      ch->pcdata->level++;
upd.c:      if (ch->pcdata->remort_times == 0 && ch->pcdata->level == pow.level_to_choose -1)
upd.c:      if (LEVEL(ch) == pow.level_to_choose && ch->pcdata->remort_times == 0 && pow.choose_in_room != 0 && get_room_index(pow.choose_in_room) != NULL)
upd.c:  base = (base * (race_info[ch->pcdata->race].mana_percent + align_info[ch->pcdata->alignment].mana_percent))/100;
upd.c:  if (ch->pcdata->n_mana < ch->pcdata->n_max_mana && hehe != 2)
upd.c:	((ch->position == POSITION_MEDITATING) ? pow.med_mana_regen_bonus : 0 )+
upd.c:      ch->pcdata->n_mana = UMIN (ch->pcdata->n_max_mana, ch->pcdata->n_mana + tt); 
upd.c:      ch->pcdata->n_mana -= 3;
upd.c:      if (ch->pcdata->n_mana <= 0)
upd.c:	ch->pcdata->n_mana = 0;
upd.c:  gem1 = ch->hold1;
upd.c:      else if (ch->position == POSITION_MEDITATING)
upd.c:      else if (ch->position == POSITION_SLEEPING)
upd.c:      else if (ch->position == POSITION_RESTING)
upd.c:  gem2 = ch->hold2;
upd.c:      else if (ch->position == POSITION_MEDITATING)
upd.c:      else if (ch->position == POSITION_SLEEPING)
upd.c:      else if (ch->position == POSITION_RESTING)
upd.c:  switch (ch->position)
upd.c:  if (IS_MOB (ch) && ch->hit < (ch->max_hit / 2) && !FIGHTING (ch))
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 5)
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 0)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 5)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 0)
upd.c:      gain = (gain * (race_info[ch->pcdata->race].regen_hit_percent + align_info[ch->pcdata->alignment].regen_hit_percent)) / 100;
upd.c:  if (IS_PLAYER(ch) && is_member(ch, GUILD_MONK) && ch->pcdata->learned[gsn_spiritregen] > 60)
upd.c:  return UMIN (gain, ch->max_hit - ch->hit);
upd.c:  switch (ch->position)
upd.c:      if (ch->pcdata->condition[COND_FULL] <= 0)
upd.c:      if (ch->pcdata->condition[COND_THIRST] <= 0)
upd.c:      gain = (gain * (race_info[ch->pcdata->race].regen_move_percent + align_info[ch->pcdata->alignment].regen_move_percent)) / 100;
upd.c:  if (IS_PLAYER(ch) && is_member(ch, GUILD_MONK) && ch->pcdata->learned[gsn_spiritregen] > 60)
upd.c:  return UMIN (gain, ch->max_move - ch->move);
upd.c:  if (!ch->in_room || ch->in_room->vnum < 1000) return;
upd.c:  ch->pcdata->condition[iCond] += value;
upd.c:  if (ch->pcdata->condition[COND_DRUNK] < 0)
upd.c:    ch->pcdata->condition[COND_DRUNK] = 0;
upd.c:  if (ch->pcdata->condition[iCond] > 48)
upd.c:    ch->pcdata->condition[iCond] = 48;
upd.c:  condition = ch->pcdata->condition[iCond];
upd.c:  if (ch->pcdata->condition[iCond] < -2)
upd.c:      if (ch->desc != NULL)
upd.c:          if (ch->hit + (condition * 10) < 0)
upd.c:          if (ch->hit == -1)
upd.c:              ch->pcdata->condition[COND_THIRST] = 48;
upd.c:              ch->pcdata->condition[COND_FULL] = 48;
upd.c:  if (ch->pcdata->condition[iCond] == 9)
upd.c:  if (ch->pcdata->condition[iCond] <= 1)
upd.c:  if (ch->pcdata->condition[iCond] == 3)
upd.c:    ch_next = ch->next;
upd.c:    if (ch->in_room == NULL)
upd.c:        ch->fgt->fighting=NULL;
upd.c:        if (ch->position != POSITION_FIGHTING && ch->position != POSITION_CASTING &&
upd.c:            ch->position != POSITION_SEARCHING && ch->position != POSITION_BASHED &&
upd.c:            ch->position != POSITION_BACKSTAB && ch->position != POSITION_CIRCLE &&
upd.c:            ch->position != POSITION_GROUNDFIGHTING)
upd.c:          ch->wait = 0;
upd.c:        if (FIGHTING (ch) == NULL && ch->position == POSITION_BASHED)
upd.c:        if (ch->wait > 0)
upd.c:          ch->wait -= 13;
upd.c:        if (ch->wait < 0)
upd.c:          ch->wait = 0;
upd.c:	if (ch->in_room->area->nplayer < 1 || IS_AFFECTED (ch, AFF_CHARM))
upd.c:	if (ch->pIndexData->spec_fun && (ch->position != POSITION_GROUNDFIGHTING) && (ch->position != POSITION_BASHED))
upd.c:	    if ((*ch->pIndexData->spec_fun) (ch))
upd.c:	if(ch->pIndexData->act4 >= ACT4_KILL_OPP)
upd.c:		IS_SET(ch->pIndexData->act4, ACT4_SUMMONER) &&  
upd.c:		ch->pIndexData->opt != NULL &&
upd.c:		ch->pIndexData->opt->summons > 1 && 
upd.c:		(get_mob_index(ch->pIndexData->opt->summons) !=NULL))
upd.c:		    summoned = create_mobile(get_mob_index(ch->pIndexData->opt->summons));
upd.c:		    char_to_room(summoned, ch->in_room);
upd.c:		    summoned->fgt->fighting = ch->fgt->fighting;
upd.c:	    if (IS_SET (ch->pIndexData->act4, ACT4_REST) && FIGHTING (ch) == NULL)
upd.c:		if (ch->next_in_room && (ch->position == POSITION_RESTING || ch->position == POSITION_SLEEPING))
upd.c:		else if (ch->position == POSITION_STANDING)
upd.c:		    if (ch->move < ch->max_move / 4)
upd.c:		    else if (ch->move < ch->max_move / 2)
upd.c:		    if (ch->hit < ch->max_hit / 7)
upd.c:		    else if (ch->hit < ch->max_hit / 4)
upd.c:	    if (ch->position != POSITION_STANDING)
upd.c:	    if (ch->in_room->more && IS_SET (ch->pIndexData->act4, ACT4_SLEEPAGGRO) && (FIGHTING (ch) == NULL))
upd.c:		for (tch = ch->in_room->more->people; tch != NULL; tch = tch_next)
upd.c:		    if (!tch->next_in_room)
upd.c:		      tch_next = tch->next_in_room;
upd.c:		    if (IS_PLAYER (tch) && tch->position == POSITION_SLEEPING)
upd.c:		if (ch->in_room->more && ch->in_room->more->pcs > 0)
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_KILL_OPP) && FIGHTING (ch) == NULL)
upd.c:			for (to_attack = ch->in_room->more->people; to_attack != NULL; to_attack = to_attack->next_in_room)
upd.c:				if (ch->position == POSITION_RESTING)
upd.c:				if (ch->position == POSITION_STANDING)
upd.c:		    if (FIGHTING(ch) == NULL && IS_SET(ch->pIndexData->act4, ACT4_KILL_CLAN))
upd.c:			for (tcr = ch->in_room->more->people; tcr != NULL; tcr = tcr->next_in_room)
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_ASSISTALL))
upd.c:			for (tcr = ch->in_room->more->people; tcr != NULL; tcr = tcr->next_in_room)
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_RESCUEONE))
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_RESCUETWO))
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_ASSISTONE))
upd.c:		    if (IS_SET (ch->pIndexData->act4, ACT4_ASSISTTWO))
upd.c:		if (IS_SET (ch->pIndexData->act4, ACT4_KILLALLONE) && FIGHTING (ch) == NULL)
upd.c:		    for (to_attack = ch->in_room->more->people; to_attack != NULL; to_attack = to_attack->next_in_room)
upd.c:			if (ch->position == POSITION_RESTING)
upd.c:			if (ch->position != POSITION_STANDING)
upd.c:		if (IS_SET (ch->pIndexData->act4, ACT4_KILLALLTWO) && FIGHTING (ch) == NULL)
upd.c:		    for (to_attack = ch->in_room->more->people; to_attack != NULL; to_attack = to_attack->next_in_room)
upd.c:			if (ch->position == POSITION_RESTING)
upd.c:			if (ch->position != POSITION_STANDING)
upd.c:		if (IS_SET (ch->pIndexData->act4, ACT4_KILLGLADIATOR))
upd.c:		if (IS_SET (ch->pIndexData->act4, ACT4_RANGER))
upd.c:		if (IS_SET (ch->pIndexData->affected_by, AFF_HIDE)
upd.c:		    && !IS_SET (ch->affected_by, AFF_HIDE)
upd.c:		    && ch->next_in_room == NULL)
upd.c:		  SET_BIT (ch->affected_by, AFF_HIDE);
upd.c:	if (!IS_SET (ch->act, ACT_SENTINEL)
upd.c:	    && !IS_SET (ch->pIndexData->act3, ACT3_FOLLOW)
upd.c:	    && (pexit = ch->in_room->exit[door]) != NULL
upd.c:	    && (!IS_SET (ch->act, ACT_STAY_SECTOR)
upd.c:		|| ((ROOM_DATA *) pexit->to_room)->sector_type == ch->in_room->sector_type)
upd.c:	    && (!IS_SET (ch->act, ACT_STAY_AREA)
upd.c:		|| ((ROOM_DATA *) pexit->to_room)->area == ch->in_room->area))
upd.c:	    if (ch->position < POSITION_STANDING)
upd.c:	if (ch->hit < ch->max_hit / 10
upd.c:	    && (!IS_SET (ch->act, ACT_SENTINEL))
upd.c:	    && (pexit = ch->in_room->exit[door]) != NULL
upd.c:		     rch = rch->next_in_room)
upd.c:      if (!wch->next)
upd.c:        ch_next = wch->next;
upd.c:      if (!wch->in_room)
upd.c:	  if(wch->pcdata->no_quit > 0)
upd.c:	    wch->pcdata->no_quit--; 
upd.c:	  if ((wch->pcdata->no_quit_pk > 0) && (FIGHTING (wch) == NULL || wch->position != POSITION_FIGHTING))
upd.c:	    wch->pcdata->no_quit_pk--;
upd.c:	  if(wch->in_room && wch->in_room->sector_type != SECT_INSIDE && 
upd.c:	     !IS_SET(wch->in_room->room_flags, ROOM_INDOORS) &&
upd.c:	     !IS_SET(wch->in_room->room_flags, ROOM_UNDERGROUND) &&
upd.c:	     wch->in_room->sector_type != SECT_UNDERWATER &&
upd.c:	     wch->in_room->sector_type < SECT_ASTRAL)
upd.c:		  if (wch->hit > 31)
upd.c:		  if (wch->data_type==50) continue;
upd.c:		  if (wch->desc != NULL && 
upd.c:		      wch->desc->connected == CON_PLAYING
upd.c:		      if (((wch->in_room->sector_type == SECT_AIR || wch->in_room->sector_type == SECT_CLOUDS)) && find_str (buf, "fog"))
upd.c:		      if (wch->in_room->sector_type > SECT_CLOUDS &&  wch->in_room->sector_type < SECT_TROPICAL && (!find_str (buf, "snow") || !find_str (buf, "blizzard")   || !find_str (buf, "cloud")))
upd.c:		      if ((wch->in_room->sector_type == SECT_DESERT || wch->in_room->sector_type == SECT_WASTELAND)  && (find_str (buf, "snow") || find_str (buf, "blizzard")))
upd.c:		      if (wch->in_room->sector_type == SECT_TROPICAL  && (find_str (buf, "snow") || find_str (buf, "blizzard")))
upd.c:          if (wch->pIndexData->vnum == tr->attached_to_mob)
upd.c:      if (wch->pIndexData->pShop != NULL && wch->pIndexData->pShop->creates_vnum != 0)
upd.c:          pShop = wch->pIndexData->pShop;
upd.c:              for (ooo = wch->carrying; ooo != NULL; ooo = ooo->next_content)
upd.c:      if (wch->in_room == NULL || wch->in_room->area == NULL || wch->in_room->area->nplayer < 1)
upd.c:      if (IS_MOB (wch) && wch->in_room->more->pcs > 0)
upd.c:      if (wch->position == POSITION_SLEEPING
upd.c:          && IS_SET (wch->pIndexData->act3, ACT3_SLEEP)
upd.c:          wch->position = POSITION_STANDING;
upd.c:      if (IS_SET (wch->pIndexData->act3, ACT3_SLEEP)
upd.c:          && (wch->position == POSITION_STANDING || wch->position == POSITION_RESTING)
upd.c:          wch->position = POSITION_SLEEPING;
upd.c:      if (IS_MOB (wch) && wch->timer > 0)
upd.c:          if (--wch->timer == 0)
upd.c:    ch_next = ch->next;
upd.c:    if (ch->desc && ch->desc->connected != CON_PLAYING)
upd.c:    if (ch->in_room == NULL)
upd.c:    if (CHALLENGE (ch) == 10 && (ch->in_room->vnum > 507 || ch->in_room->vnum < 504))
upd.c:      ch->fgt->challenge = 0;
upd.c:        if (ch->pcdata->challenge_time > 0)
upd.c:          ch->pcdata->challenge_time--;
upd.c:        if (ch->pcdata->died_recently> 0 && number_range(1,4) == 2)
upd.c:          ch->pcdata->died_recently--;
upd.c:            ch->timer++;
upd.c:            if (ch->timer > 120) {
upd.c:                if (ch->desc) {
upd.c:                        close_socket(ch->desc);
upd.c:            if (ch->timer > 5 && ch->timer < 16)
upd.c:              ch->timer = 90;
upd.c:                if (ch->pcdata->remort_times < 2)
upd.c:                if (ch->pcdata->remort_times < 5 )
upd.c:            if (IS_PLAYER (ch) && (ch->in_room->sector_type == SECT_DESERT
upd.c:                || ch->in_room->sector_type == SECT_WASTELAND)
upd.c:    LOOP (paf, ch->affected, paf_next)
upd.c:        if (ch->hit - 2 < 1)
upd.c:            ch->hit = 1;
upd.c:    else if (IS_AFFECTED (ch, AFF_PLAGUE) && ch->in_room->more->pcs > 0)
upd.c:	 LOOP (plague, ch->in_room->more->people, plague->next)
upd.c:        if (ch->hit - 8 < 1)
upd.c:            ch->hit = 1;
upd.c:      ch_next = ch->next;
upd.c:      if (ch->desc && ch->desc->connected != CON_PLAYING)
upd.c:      if (ch->position <= POSITION_STUNNED && ch->position >= 0 && ch->hit > 0)
upd.c:      if (!ch->in_room) continue;
upd.c:	  if (!IS_SET(ch->act, PLR_HOLYWALK))
upd.c:	      switch (ch->in_room->sector_type)
upd.c:		       !IS_SET(ch->act, PLR_HAS_SCUBA))
upd.c:			if (ch->hit < 0)
upd.c:		    if (!IS_SET(ch->act, PLR_HAS_BOAT))
upd.c:			if (ch->move > 20)
upd.c:			    if (ch->hit < 0)
upd.c:			if (ch->hit < 0)
upd.c:			if (ch->hit < 0)
upd.c:	      ch->affected_by |= ch->pcdata->nat_abilities;
upd.c:	      ch->more_affected_by |= ch->pcdata->nat_abilities2;
upd.c:              if (ch->pIndexData->vnum == tr->attached_to_mob)
upd.c:          if (IS_SET (ch->act, ACT_SCAVENGER)
upd.c:              && ch->in_room->more->contents != NULL
upd.c:              for (obj = ch->in_room->more->contents; obj != NULL; obj = obj->next_content)
upd.c:              if (obj_best != NULL && obj_best->in_room == ch->in_room && IS_SET (obj_best->pIndexData->wear_flags, ITEM_TAKE))
upd.c:          if (IS_SET (ch->pIndexData->act3, ACT3_REGENERATE) && number_range (1, 7) == 2)
upd.c:              if (ch->hit < ch->max_hit)
upd.c:                  healnum = .20 * (float) (ch->max_hit - ch->hit);
upd.c:                  if (ch->hit > ch->max_hit)
upd.c:      if (ch->hit < ch->max_hit)
upd.c:      if (ch->move < ch->max_move)
upd.c:      if (ch->hit == -1)
upd.c:          ch->hit = 1;
upd.c:      if (ch->position == POSITION_STUNNED)
upd.c:      if (IS_PLAYER (ch) && ch->timer > 93 && ch->pcdata->no_quit_pk < 1)
upd.c:      ch_next = ch->next;
upd.c:	      if (ch->hit < -10) raw_kill (ch, TRUE);
upd.c:	      if (ch->hit < ch->max_hit-3)
upd.c:		  if (IS_PLAYER(ch) && !strcmp(race_info[ch->pcdata->race].name, "troll"))
upd.c:	      if (ch->move < ch->max_move)
upd.c:		  if (IS_PLAYER(ch) && !strcmp(race_info[ch->pcdata->race].name, "behemoth"))
upd.c:		ch->pcdata->n_mana--;
upd.c:	      if (ch->pcdata->n_mana < 0) ch->pcdata->n_mana = 0;
upd.c:	      if (ch->hit < -10) raw_kill(ch, true);
upd.c:	  if (IS_SET(ch->pIndexData->act4, ACT4_QUICKTICK))
upd.c:		  if (ch->pIndexData->vnum == tr->attached_to_mob)
upd.c:          if (IS_SET (ch->act, ACT_SCRAMBLE)
upd.c:	      && !IS_SET (ch->act, ACT_SENTINEL)
upd.c:              && (pexit = ch->in_room->exit[door]) != NULL
upd.c:              && (!IS_SET (ch->act, ACT_STAY_AREA)
upd.c:		  || ((ROOM_DATA *) pexit->to_room)->area == ch->in_room->area))
upd.c:	  if(IS_SET(ch->pIndexData->act4, ACT4_PROTECTOR) && number_range(1,7) == 3)
upd.c:	      if ((enemy = get_char_room_near(ch, ch->in_room, 6, "enemy")) != NULL )
upd.c:		      if (enemy->in_room != ch->in_room)
upd.c:          if (HUNTING (ch) != NULL && ch->position >= POSITION_STANDING)
upd.c:                  ch->position == POSITION_FIGHTING ||
upd.c:                  ch->position == POSITION_GROUNDFIGHTING)
upd.c:	      if (!IS_SET (ch->pIndexData->act3, ACT3_MUTE) && 
upd.c:                  if (ch->pIndexData->will_help && ch->pIndexData->yeller_number != 0)
upd.c:          ch->wait -= 13;
upd.c:          if (ch->wait < 0)
upd.c:            ch->wait = 0;
upd.c:	  if (FIGHTING (ch) == NULL && number_range (1, 3) == 2 && HUNTING (ch) != NULL && (is_number (ch->fgt->hunting) || !IS_SET (ch->act, ACT_SENTINEL)))
upd.c:	  if (ch->in_room->area->nplayer < 1)
upd.c:	      (ch->position == POSITION_FIGHTING || 
upd.c:	       ch->position == POSITION_GROUNDFIGHTING))
upd.c:          ch->wait -= 8;
upd.c:          if (ch->wait < 0)
upd.c:            ch->wait = 0;
upd.c:          if (ch->position == POSITION_FALLING)
upd.c:	      if (IS_AFFECTED (ch, AFF_FLYING) || IS_SET (ch->act, PLR_HOLYWALK))
upd.c:		  if (ch->in_room->exit[DIR_DOWN] &&
upd.c:		      (ROOM_DATA *) ch->in_room->exit[DIR_DOWN]->to_room != NULL
upd.c:		      && ch->in_room->sector_type == SECT_AIR)
upd.c:		      to_room = ch->in_room->exit[DIR_DOWN]->to_room;
upd.c:		      if (ch->hit > 25)
upd.c:		      if (ch->position >= POSITION_STUNNED)
upd.c:          if (ch->in_room->room_flags2 != 0)
upd.c:              if (IS_AFFECTED (ch, AFF_NOXIOUS) && !FLAGGYSET && !IS_SET (ch->in_room->room_flags2, ROOM2_GASTRAPONE))
upd.c:                  ch->in_room->room_flags2 ^= ROOM2_GASTRAPONE;
upd.c:                  roomstink = ch->in_room;
upd.c:              if (IS_SET (ch->in_room->room_flags2, ROOM2_MANADRAIN))
upd.c:              else if (IS_SET (ch->in_room->room_flags2, ROOM2_EXTRAMANA))
upd.c:              if (IS_SET (ch->in_room->room_flags2, ROOM2_EXTRAHEAL))
upd.c:                  if (ch->hit < ch->max_hit && ch->position)
upd.c:	  if (IS_SET (ch->act, PLR_HOLYWALK))
upd.c:      if (ch->in_room->room_flags2 > 0 && number_range(1,4) == 2)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_FIRETRAP))
upd.c:		  if (ch->position == POSITION_DEAD)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_ROCKTRAP))
upd.c:		      if (ch->position == POSITION_DEAD)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_ARROWTRAP) ||
upd.c:	      IS_SET (ch->in_room->room_flags2, ROOM2_POISONTRAP))
upd.c:		  if (ch->armor < -60)
upd.c:		  else if (ch->armor < 10)
upd.c:		  if (ch->position == POSITION_DEAD)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_SPIKETRAP) && number_range (1, 3) == 2)
upd.c:		  if (ch->armor < -80)
upd.c:		  else if (ch->armor < 5)
upd.c:		  if (ch->position == POSITION_DEAD)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_GASTRAPONE) ||
upd.c:	      IS_SET (ch->in_room->room_flags2, ROOM2_GASTRAPTWO))
upd.c:		  if (IS_SET (ch->in_room->room_flags2, ROOM2_GASTRAPONE))
upd.c:		      /*                                                     ch->in_room->room2_flags^=ROOM_GASTRAPONE; */
upd.c:		  if (ch->position == POSITION_DEAD)
upd.c:		  if (IS_SET (ch->in_room->room_flags2, ROOM2_GASTRAPTWO) && !IS_AFFECTED_EXTRA(ch, AFF_PROT_POISON))
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_AVALANCHE))
upd.c:	      roomav = ch->in_room;
upd.c:	      if (ch->position == POSITION_DEAD)
upd.c:	  if (IS_SET (ch->in_room->room_flags2, ROOM2_GEYSERTRAP) && number_range (1, 10) == 2)
upd.c:	      if (ch->position == POSITION_DEAD)
upd.c:	  && (FIGHTING (ch) == NULL && IS_SET (ch->act, ACT_SENTINEL)))
upd.c:      if (IS_SET (ch->in_room->room_flags2, ROOM2_MOVING) &&  
upd.c:	  ch->in_room->exit[ch->in_room->more->move_dir] != NULL && 
upd.c:	  ch->in_room->more &&
upd.c:	  (ROOM_DATA *) ch->in_room->exit[ch->in_room->more->move_dir]->to_room
upd.c:	  && (LEVEL (ch) < IMM_LEVEL || !IS_SET (ch->act, PLR_HOLYWALK))
upd.c:	  && ch->position != POSITION_FALLING && ch->in_room->more)
upd.c:	  if (ch->in_room->more->move_message && ch->in_room->more->move_message[0] != '\0')
upd.c:	      sprintf (general_use, "You are %s", ch->in_room->more->move_message);
upd.c:	      sprintf (general_use, "$n is %s", ch->in_room->more->move_message);
upd.c:	  to_room = (ROOM_DATA *) ch->in_room->exit[ch->in_room->more->move_dir]->to_room;
upd.c:  if (ch->pIndexData->mobtype == MOB_PLANT ||
upd.c:      ch->pIndexData->mobtype == MOB_GENERAL_ANIMAL ||
upd.c:      ch->pIndexData->mobtype == MOB_DUMMY ||
upd.c:      ch->pIndexData->mobtype == MOB_INSECT ||
upd.c:      ch->pIndexData->mobtype == MOB_UNDEAD ||
upd.c:      ch->pIndexData->mobtype == MOB_BIRD ||
upd.c:      ch->pIndexData->mobtype == MOB_FISH ||
upd.c:      ch->pIndexData->mobtype == MOB_CANINE ||
upd.c:      ch->pIndexData->mobtype == MOB_FELINE ||
upd.c:      ch->pIndexData->mobtype == MOB_REPTILE ||
upd.c:      ch->pIndexData->mobtype == MOB_GHOST ||
upd.c:      ch->pIndexData->mobtype == MOB_ARACHNID ||
upd.c:      ch->pIndexData->mobtype == MOB_HORSE ||
upd.c:      ch->pIndexData->mobtype == MOB_MUTANT ||
upd.c:      ch->pIndexData->mobtype == MOB_RODENT)
upd.c:  if (ch->pIndexData->mobtype == MOB_PLANT ||
upd.c:      ch->pIndexData->mobtype == MOB_GENERAL_ANIMAL ||
upd.c:      ch->pIndexData->mobtype == MOB_DUMMY ||
upd.c:      ch->pIndexData->mobtype == MOB_INSECT ||
upd.c:      ch->pIndexData->mobtype == MOB_UNDEAD ||
upd.c:      ch->pIndexData->mobtype == MOB_BIRD ||
upd.c:      ch->pIndexData->mobtype == MOB_FISH ||
upd.c:      ch->pIndexData->mobtype == MOB_CANINE ||
upd.c:      ch->pIndexData->mobtype == MOB_FELINE ||
upd.c:      ch->pIndexData->mobtype == MOB_REPTILE ||
upd.c:      ch->pIndexData->mobtype == MOB_GHOST ||
upd.c:      ch->pIndexData->mobtype == MOB_ARACHNID ||
upd.c:      ch->pIndexData->mobtype == MOB_HORSE ||
upd.c:      ch->pIndexData->mobtype == MOB_MUTANT ||
upd.c:      ch->pIndexData->mobtype == MOB_RODENT)
upd.c:      wch_next = wch->gen_next;
upd.c:      if (wch->data_type == 50 || wch->data_type == 0)
upd.c:      if (wch->in_room->area->nplayer < 1)
upd.c:      --wch->wait;
upd.c:      if (!wch->in_room->more || !wch->in_room->more->people || wch->in_room->more->pcs < 1)
upd.c:      for (ch = wch->in_room->more->people; ch && ch != NULL; ch = ch_next)
upd.c:          ch_next = ch->next_in_room;
upd.c:          if (IS_MOB (ch) && ch->pIndexData->race_hate != 0 && FIGHTING (ch) == NULL)
upd.c:              for (vch = wch->in_room->more->people; vch != NULL; vch = vch_next)
upd.c:                  if (!vch->next_in_room)
upd.c:                    vch_next = vch->next_in_room;
upd.c:                  if (IS_PLAYER (vch) && can_see (ch, vch) && (IS_SET (ch->pIndexData->race_hate, (1 << ch->pcdata->race))) &&
upd.c:          if (ch->in_room == NULL)
upd.c:              || (!IS_SET (ch->act, ACT_AGGRESSIVE)
upd.c:                  && !IS_SET (ch->act, ACT_ANGRY))
upd.c:              || (IS_SET (ch->act, ACT_WIMPY) && IS_AWAKE (wch))
upd.c:          if (IS_SET (ch->act, ACT_ANGRY) && (number_range (0, 6) != 1))
upd.c:          for (vch = wch->in_room->more->people; vch != NULL; vch = vch_next)
upd.c:              vch_next = vch->next_in_room;
upd.c:                  && (!IS_SET (ch->act, ACT_WIMPY) || !IS_AWAKE (vch))
upd.c:	  if (IS_SET(ch->pIndexData->act4, ACT4_KILL_OPP) && DIFF_ALIGN(ch, victim))
upd.c:          if (ch->in_room->area != pRoom->area)
upd.c:              if (area_only && mmid->area != ch->in_room->area)
upd.c:              write_to_descriptor2 (ch->desc, general_use, 0);
upd.c:              if (area_only && objj->area != ch->in_room->area)
upd.c:              write_to_descriptor2 (ch->desc, general_use, 0);
upd.c:		  for (pch = pRoom->more->people; pch != NULL; pch=pch->next_in_room)
upd.c:		for (pch = pRoom->more->people; pch != NULL; pch = pch->next_in_room)
view.c:      if (ch->pcdata->learn < 1)
view.c:      ch->pcdata->learn--;
view.c:      ch->pcdata->practice += 10;
view.c:      if (ch->pcdata->practice < 10)
view.c:      ch->pcdata->learn++;
view.c:      ch->pcdata->practice -= 10;
warmth.c:  if (IS_MOB (ch) || !ch->in_room || ch->in_room->sector_type == SECT_INSIDE ||
warmth.c:      (!IS_OUTSIDE(ch) || ch->in_room->sector_type >= SECT_CAVE || !IS_SET(ch->in_room->room_flags, ROOM_INDOORS)) || IS_SET (ch->act, PLR_HOLYWALK))
warmth.c:  if (ch->in_room->vnum < 1000)
warmth.c:  warmth = ch->pcdata->warmth;
warmth.c:      if (ch->position == POSITION_SLEEPING)
warmth.c:      if (ch->move > 8)
warmth.c:  if (ch->hit < 0)
yell.c:  for (fch = rid->more->people; fch != NULL; fch = fch->next_in_room)
yell.c:      if (IS_SET (fch->pcdata->deaf, CHANNEL_YELL))
yell.c:  if (!ch->in_room)
yell.c:  do_it (ch, ch->in_room, n, 9999);
yell.c:  undo_it (ch, ch->in_room, n, 9999);
